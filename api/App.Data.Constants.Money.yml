### YamlMime:ManagedReference
items:
- uid: App.Data.Constants.Money
  commentId: T:App.Data.Constants.Money
  id: Money
  parent: App.Data.Constants
  children:
  - App.Data.Constants.Money.Amount
  - App.Data.Constants.Money.Currency
  - App.Data.Constants.Money.op_Addition(App.Data.Constants.Money,App.Data.Constants.Money)
  - App.Data.Constants.Money.op_UnaryNegation(App.Data.Constants.Money)
  - App.Data.Constants.Money.ToString
  langs:
  - csharp
  - vb
  name: Money
  nameWithType: Money
  fullName: App.Data.Constants.Money
  type: Class
  source:
    remote:
      path: App/Data/Constants/Rates.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: Money
    path: ../App/Data/Constants/Rates.cs
    startLine: 78
  assemblies:
  - App
  namespace: App.Data.Constants
  summary: "\nRecord representing Money\n"
  example: []
  syntax:
    content: 'public record Money : IEquatable<Money>'
    content.vb: Public Class Money Implements IEquatable(Of Money)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{App.Data.Constants.Money}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - App.Data.Constants.Money.App.Utils.ReflectionExtensions.GetPropertyExpression``1(System.Reflection.PropertyInfo,System.Type)
  - App.Data.Constants.Money.App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(System.Object,System.Reflection.PropertyInfo,System.Type)
- uid: App.Data.Constants.Money.Amount
  commentId: P:App.Data.Constants.Money.Amount
  id: Amount
  parent: App.Data.Constants.Money
  langs:
  - csharp
  - vb
  name: Amount
  nameWithType: Money.Amount
  fullName: App.Data.Constants.Money.Amount
  type: Property
  source:
    remote:
      path: App/Data/Constants/Rates.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: Amount
    path: ../App/Data/Constants/Rates.cs
    startLine: 83
  assemblies:
  - App
  namespace: App.Data.Constants
  summary: "\nAmount of money\n"
  example: []
  syntax:
    content: public double Amount { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public Property Amount As Double
  overload: App.Data.Constants.Money.Amount*
- uid: App.Data.Constants.Money.Currency
  commentId: P:App.Data.Constants.Money.Currency
  id: Currency
  parent: App.Data.Constants.Money
  langs:
  - csharp
  - vb
  name: Currency
  nameWithType: Money.Currency
  fullName: App.Data.Constants.Money.Currency
  type: Property
  source:
    remote:
      path: App/Data/Constants/Rates.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: Currency
    path: ../App/Data/Constants/Rates.cs
    startLine: 88
  assemblies:
  - App
  namespace: App.Data.Constants
  summary: "\nCurrency of money\n"
  example: []
  syntax:
    content: public Currency Currency { get; set; }
    parameters: []
    return:
      type: App.Data.Constants.Currency
    content.vb: Public Property Currency As Currency
  overload: App.Data.Constants.Money.Currency*
- uid: App.Data.Constants.Money.ToString
  commentId: M:App.Data.Constants.Money.ToString
  id: ToString
  parent: App.Data.Constants.Money
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Money.ToString()
  fullName: App.Data.Constants.Money.ToString()
  type: Method
  source:
    remote:
      path: App/Data/Constants/Rates.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: ToString
    path: ../App/Data/Constants/Rates.cs
    startLine: 94
  assemblies:
  - App
  namespace: App.Data.Constants
  summary: "\nPretty print of Money\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: ToString repr
    content.vb: Public Overrides Function ToString() As String
  overridden: System.Object.ToString
  overload: App.Data.Constants.Money.ToString*
- uid: App.Data.Constants.Money.op_Addition(App.Data.Constants.Money,App.Data.Constants.Money)
  commentId: M:App.Data.Constants.Money.op_Addition(App.Data.Constants.Money,App.Data.Constants.Money)
  id: op_Addition(App.Data.Constants.Money,App.Data.Constants.Money)
  parent: App.Data.Constants.Money
  langs:
  - csharp
  - vb
  name: operator +(Money, Money)
  nameWithType: Money.operator +(Money, Money)
  fullName: App.Data.Constants.Money.operator +(App.Data.Constants.Money, App.Data.Constants.Money)
  type: Operator
  source:
    remote:
      path: App/Data/Constants/Rates.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: op_Addition
    path: ../App/Data/Constants/Rates.cs
    startLine: 106
  assemblies:
  - App
  namespace: App.Data.Constants
  summary: "\nAdds two Money\n"
  example: []
  syntax:
    content: public static Money operator +(Money a, Money b)
    parameters:
    - id: a
      type: App.Data.Constants.Money
      description: Money 1
    - id: b
      type: App.Data.Constants.Money
      description: Money 2
    return:
      type: App.Data.Constants.Money
      description: Sum of Money
    content.vb: Public Shared Operator +(a As Money, b As Money) As Money
  overload: App.Data.Constants.Money.op_Addition*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Throws if currency don&apos;t match
  nameWithType.vb: Money.+(Money, Money)
  fullName.vb: App.Data.Constants.Money.+(App.Data.Constants.Money, App.Data.Constants.Money)
  name.vb: +(Money, Money)
- uid: App.Data.Constants.Money.op_UnaryNegation(App.Data.Constants.Money)
  commentId: M:App.Data.Constants.Money.op_UnaryNegation(App.Data.Constants.Money)
  id: op_UnaryNegation(App.Data.Constants.Money)
  parent: App.Data.Constants.Money
  langs:
  - csharp
  - vb
  name: operator -(Money)
  nameWithType: Money.operator -(Money)
  fullName: App.Data.Constants.Money.operator -(App.Data.Constants.Money)
  type: Operator
  source:
    remote:
      path: App/Data/Constants/Rates.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: op_UnaryNegation
    path: ../App/Data/Constants/Rates.cs
    startLine: 118
  assemblies:
  - App
  namespace: App.Data.Constants
  summary: "\nNegates Money amount\n"
  example: []
  syntax:
    content: public static Money operator -(Money a)
    parameters:
    - id: a
      type: App.Data.Constants.Money
      description: Money 1
    return:
      type: App.Data.Constants.Money
      description: Negated money
    content.vb: Public Shared Operator -(a As Money) As Money
  overload: App.Data.Constants.Money.op_UnaryNegation*
  nameWithType.vb: Money.-(Money)
  fullName.vb: App.Data.Constants.Money.-(App.Data.Constants.Money)
  name.vb: -(Money)
references:
- uid: App.Data.Constants
  commentId: N:App.Data.Constants
  name: App.Data.Constants
  nameWithType: App.Data.Constants
  fullName: App.Data.Constants
  spec.csharp:
  - uid: App
    name: App
  - name: .
  - uid: App.Data
    name: Data
  - name: .
  - uid: App.Data.Constants
    name: Constants
  spec.vb:
  - uid: App
    name: App
  - name: .
  - uid: App.Data
    name: Data
  - name: .
  - uid: App.Data.Constants
    name: Constants
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IEquatable{App.Data.Constants.Money}
  commentId: T:System.IEquatable{App.Data.Constants.Money}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Money>
  nameWithType: IEquatable<Money>
  fullName: System.IEquatable<App.Data.Constants.Money>
  nameWithType.vb: IEquatable(Of Money)
  fullName.vb: System.IEquatable(Of App.Data.Constants.Money)
  name.vb: IEquatable(Of Money)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
  - name: <
  - uid: App.Data.Constants.Money
    name: Money
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: App.Data.Constants.Money
    name: Money
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: App.Data.Constants.Money.App.Utils.ReflectionExtensions.GetPropertyExpression``1(System.Reflection.PropertyInfo,System.Type)
  commentId: M:App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
  parent: App.Utils.ReflectionExtensions
  definition: App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
  name: GetPropertyExpression<Money>(Money, PropertyInfo, Type)
  nameWithType: ReflectionExtensions.GetPropertyExpression<Money>(Money, PropertyInfo, Type)
  fullName: App.Utils.ReflectionExtensions.GetPropertyExpression<App.Data.Constants.Money>(App.Data.Constants.Money, System.Reflection.PropertyInfo, System.Type)
  nameWithType.vb: ReflectionExtensions.GetPropertyExpression(Of Money)(Money, PropertyInfo, Type)
  fullName.vb: App.Utils.ReflectionExtensions.GetPropertyExpression(Of App.Data.Constants.Money)(App.Data.Constants.Money, System.Reflection.PropertyInfo, System.Type)
  name.vb: GetPropertyExpression(Of Money)(Money, PropertyInfo, Type)
  spec.csharp:
  - uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(App.Data.Constants.Money,System.Reflection.PropertyInfo,System.Type)
    name: GetPropertyExpression
  - name: <
  - uid: App.Data.Constants.Money
    name: Money
  - name: '>'
  - name: (
  - uid: App.Data.Constants.Money
    name: Money
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(App.Data.Constants.Money,System.Reflection.PropertyInfo,System.Type)
    name: GetPropertyExpression
  - name: (
  - name: Of
  - name: " "
  - uid: App.Data.Constants.Money
    name: Money
  - name: )
  - name: (
  - uid: App.Data.Constants.Money
    name: Money
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: App.Data.Constants.Money.App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(System.Object,System.Reflection.PropertyInfo,System.Type)
  commentId: M:App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
  parent: App.Utils.ReflectionExtensions
  definition: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
  name: GetSetPropertyEventCallback<Money>(Money, object, PropertyInfo, Type)
  nameWithType: ReflectionExtensions.GetSetPropertyEventCallback<Money>(Money, object, PropertyInfo, Type)
  fullName: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback<App.Data.Constants.Money>(App.Data.Constants.Money, object, System.Reflection.PropertyInfo, System.Type)
  nameWithType.vb: ReflectionExtensions.GetSetPropertyEventCallback(Of Money)(Money, Object, PropertyInfo, Type)
  fullName.vb: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback(Of App.Data.Constants.Money)(App.Data.Constants.Money, Object, System.Reflection.PropertyInfo, System.Type)
  name.vb: GetSetPropertyEventCallback(Of Money)(Money, Object, PropertyInfo, Type)
  spec.csharp:
  - uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(App.Data.Constants.Money,System.Object,System.Reflection.PropertyInfo,System.Type)
    name: GetSetPropertyEventCallback
  - name: <
  - uid: App.Data.Constants.Money
    name: Money
  - name: '>'
  - name: (
  - uid: App.Data.Constants.Money
    name: Money
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(App.Data.Constants.Money,System.Object,System.Reflection.PropertyInfo,System.Type)
    name: GetSetPropertyEventCallback
  - name: (
  - name: Of
  - name: " "
  - uid: App.Data.Constants.Money
    name: Money
  - name: )
  - name: (
  - uid: App.Data.Constants.Money
    name: Money
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
  commentId: M:App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
  isExternal: true
  name: GetPropertyExpression<T>(T, PropertyInfo, Type)
  nameWithType: ReflectionExtensions.GetPropertyExpression<T>(T, PropertyInfo, Type)
  fullName: App.Utils.ReflectionExtensions.GetPropertyExpression<T>(T, System.Reflection.PropertyInfo, System.Type)
  nameWithType.vb: ReflectionExtensions.GetPropertyExpression(Of T)(T, PropertyInfo, Type)
  fullName.vb: App.Utils.ReflectionExtensions.GetPropertyExpression(Of T)(T, System.Reflection.PropertyInfo, System.Type)
  name.vb: GetPropertyExpression(Of T)(T, PropertyInfo, Type)
  spec.csharp:
  - uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
    name: GetPropertyExpression
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
    name: GetPropertyExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: App.Utils.ReflectionExtensions
  commentId: T:App.Utils.ReflectionExtensions
  parent: App.Utils
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: App.Utils.ReflectionExtensions
- uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
  commentId: M:App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
  isExternal: true
  name: GetSetPropertyEventCallback<T>(T, object, PropertyInfo, Type)
  nameWithType: ReflectionExtensions.GetSetPropertyEventCallback<T>(T, object, PropertyInfo, Type)
  fullName: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback<T>(T, object, System.Reflection.PropertyInfo, System.Type)
  nameWithType.vb: ReflectionExtensions.GetSetPropertyEventCallback(Of T)(T, Object, PropertyInfo, Type)
  fullName.vb: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback(Of T)(T, Object, System.Reflection.PropertyInfo, System.Type)
  name.vb: GetSetPropertyEventCallback(Of T)(T, Object, PropertyInfo, Type)
  spec.csharp:
  - uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
    name: GetSetPropertyEventCallback
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
    name: GetSetPropertyEventCallback
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: App.Utils
  commentId: N:App.Utils
  name: App.Utils
  nameWithType: App.Utils
  fullName: App.Utils
  spec.csharp:
  - uid: App
    name: App
  - name: .
  - uid: App.Utils
    name: Utils
  spec.vb:
  - uid: App
    name: App
  - name: .
  - uid: App.Utils
    name: Utils
- uid: App.Data.Constants.Money.Amount*
  commentId: Overload:App.Data.Constants.Money.Amount
  name: Amount
  nameWithType: Money.Amount
  fullName: App.Data.Constants.Money.Amount
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: App.Data.Constants.Money.Currency*
  commentId: Overload:App.Data.Constants.Money.Currency
  name: Currency
  nameWithType: Money.Currency
  fullName: App.Data.Constants.Money.Currency
- uid: App.Data.Constants.Currency
  commentId: T:App.Data.Constants.Currency
  parent: App.Data.Constants
  name: Currency
  nameWithType: Currency
  fullName: App.Data.Constants.Currency
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: App.Data.Constants.Money.ToString*
  commentId: Overload:App.Data.Constants.Money.ToString
  name: ToString
  nameWithType: Money.ToString
  fullName: App.Data.Constants.Money.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: App.Data.Constants.Money.op_Addition*
  commentId: Overload:App.Data.Constants.Money.op_Addition
  name: operator +
  nameWithType: Money.operator +
  fullName: App.Data.Constants.Money.operator +
  nameWithType.vb: Money.+
  fullName.vb: App.Data.Constants.Money.+
  name.vb: +
  spec.csharp:
  - name: operator
  - name: " "
  - uid: App.Data.Constants.Money.op_Addition*
    name: +
- uid: App.Data.Constants.Money
  commentId: T:App.Data.Constants.Money
  parent: App.Data.Constants
  name: Money
  nameWithType: Money
  fullName: App.Data.Constants.Money
- uid: App.Data.Constants.Money.op_UnaryNegation*
  commentId: Overload:App.Data.Constants.Money.op_UnaryNegation
  name: operator -
  nameWithType: Money.operator -
  fullName: App.Data.Constants.Money.operator -
  nameWithType.vb: Money.-
  fullName.vb: App.Data.Constants.Money.-
  name.vb: '-'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: App.Data.Constants.Money.op_UnaryNegation*
    name: '-'
