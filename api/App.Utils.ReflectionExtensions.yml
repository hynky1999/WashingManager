### YamlMime:ManagedReference
items:
- uid: App.Utils.ReflectionExtensions
  commentId: T:App.Utils.ReflectionExtensions
  id: ReflectionExtensions
  parent: App.Utils
  children:
  - App.Utils.ReflectionExtensions.GetConcretePropertyExpression``2(System.Reflection.PropertyInfo)
  - App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
  - App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
  langs:
  - csharp
  - vb
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: App.Utils.ReflectionExtensions
  type: Class
  source:
    remote:
      path: App/Utils/ReflectionExtensions.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: ReflectionExtensions
    path: ../App/Utils/ReflectionExtensions.cs
    startLine: 10
  assemblies:
  - App
  namespace: App.Utils
  summary: "\nThis class provides a helper method for working with Reflection.\nEspecially useful for Blazor to be able to bind a ValueChanged, Value and ValueExpression to a component on runtime.\n"
  example: []
  syntax:
    content: public static class ReflectionExtensions
    content.vb: Public Module ReflectionExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: App.Utils.ReflectionExtensions.GetConcretePropertyExpression``2(System.Reflection.PropertyInfo)
  commentId: M:App.Utils.ReflectionExtensions.GetConcretePropertyExpression``2(System.Reflection.PropertyInfo)
  id: GetConcretePropertyExpression``2(System.Reflection.PropertyInfo)
  isExtensionMethod: true
  parent: App.Utils.ReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetConcretePropertyExpression<T, TK>(PropertyInfo)
  nameWithType: ReflectionExtensions.GetConcretePropertyExpression<T, TK>(PropertyInfo)
  fullName: App.Utils.ReflectionExtensions.GetConcretePropertyExpression<T, TK>(System.Reflection.PropertyInfo)
  type: Method
  source:
    remote:
      path: App/Utils/ReflectionExtensions.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: GetConcretePropertyExpression
    path: ../App/Utils/ReflectionExtensions.cs
    startLine: 49
  assemblies:
  - App
  namespace: App.Utils
  summary: "\nCreates an Expression of member access to the given property of model of type T.\n"
  example: []
  syntax:
    content: public static Expression<Func<T, TK>> GetConcretePropertyExpression<T, TK>(this PropertyInfo propertyInfo)
    parameters:
    - id: propertyInfo
      type: System.Reflection.PropertyInfo
      description: propertyInfo of property
    typeParameters:
    - id: T
      description: Type of model owning the property
    - id: TK
      description: property conversion type
    return:
      type: System.Linq.Expressions.Expression{System.Func{{T},{TK}}}
      description: Expression of member access
    content.vb: Public Shared Function GetConcretePropertyExpression(Of T, TK)(propertyInfo As PropertyInfo) As Expression(Of Func(Of T, TK))
  overload: App.Utils.ReflectionExtensions.GetConcretePropertyExpression*
  nameWithType.vb: ReflectionExtensions.GetConcretePropertyExpression(Of T, TK)(PropertyInfo)
  fullName.vb: App.Utils.ReflectionExtensions.GetConcretePropertyExpression(Of T, TK)(System.Reflection.PropertyInfo)
  name.vb: GetConcretePropertyExpression(Of T, TK)(PropertyInfo)
- uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
  commentId: M:App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
  id: GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
  isExtensionMethod: true
  parent: App.Utils.ReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetPropertyExpression<T>(T, PropertyInfo, Type?)
  nameWithType: ReflectionExtensions.GetPropertyExpression<T>(T, PropertyInfo, Type?)
  fullName: App.Utils.ReflectionExtensions.GetPropertyExpression<T>(T, System.Reflection.PropertyInfo, System.Type?)
  type: Method
  source:
    remote:
      path: App/Utils/ReflectionExtensions.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: GetPropertyExpression
    path: ../App/Utils/ReflectionExtensions.cs
    startLine: 67
  assemblies:
  - App
  namespace: App.Utils
  summary: "\nCreates an Property Access Expressions of the given property of model.\nUseful for Blazor to bind a ValueExpression\n"
  example: []
  syntax:
    content: public static LambdaExpression GetPropertyExpression<T>(this T model, PropertyInfo propertyInfo, Type? castType = null)
    parameters:
    - id: model
      type: '{T}'
      description: model which owns the property
    - id: propertyInfo
      type: System.Reflection.PropertyInfo
      description: property info of accessed property
    - id: castType
      type: System.Type
      description: Type to cast property after access
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: Property Access Expression of model
    content.vb: Public Shared Function GetPropertyExpression(Of T)(model As T, propertyInfo As PropertyInfo, castType As Type = Nothing) As LambdaExpression
  overload: App.Utils.ReflectionExtensions.GetPropertyExpression*
  nameWithType.vb: ReflectionExtensions.GetPropertyExpression(Of T)(T, PropertyInfo, Type)
  fullName.vb: App.Utils.ReflectionExtensions.GetPropertyExpression(Of T)(T, System.Reflection.PropertyInfo, System.Type)
  name.vb: GetPropertyExpression(Of T)(T, PropertyInfo, Type)
- uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
  commentId: M:App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
  id: GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
  isExtensionMethod: true
  parent: App.Utils.ReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetSetPropertyEventCallback<T>(T, object, PropertyInfo, Type?)
  nameWithType: ReflectionExtensions.GetSetPropertyEventCallback<T>(T, object, PropertyInfo, Type?)
  fullName: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback<T>(T, object, System.Reflection.PropertyInfo, System.Type?)
  type: Method
  source:
    remote:
      path: App/Utils/ReflectionExtensions.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: GetSetPropertyEventCallback
    path: ../App/Utils/ReflectionExtensions.cs
    startLine: 97
  assemblies:
  - App
  namespace: App.Utils
  summary: "\nCreates an EventCallback which Set given property of model to the callback value.\nUseful for Blazor to bind a ValueChanged\n"
  example: []
  syntax:
    content: public static object? GetSetPropertyEventCallback<T>(this T model, object receiver, PropertyInfo propertyInfo, Type? parameterType = null)
    parameters:
    - id: model
      type: '{T}'
      description: model owning the property
    - id: receiver
      type: System.Object
      description: receiver class
    - id: propertyInfo
      type: System.Reflection.PropertyInfo
      description: property info a property set
    - id: parameterType
      type: System.Type
      description: parameter type of EventCallback
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Object
      description: EventCallback which sets given property to called value
    content.vb: Public Shared Function GetSetPropertyEventCallback(Of T)(model As T, receiver As Object, propertyInfo As PropertyInfo, parameterType As Type = Nothing) As Object
  overload: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback*
  nameWithType.vb: ReflectionExtensions.GetSetPropertyEventCallback(Of T)(T, Object, PropertyInfo, Type)
  fullName.vb: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback(Of T)(T, Object, System.Reflection.PropertyInfo, System.Type)
  name.vb: GetSetPropertyEventCallback(Of T)(T, Object, PropertyInfo, Type)
references:
- uid: App.Utils
  commentId: N:App.Utils
  name: App.Utils
  nameWithType: App.Utils
  fullName: App.Utils
  spec.csharp:
  - uid: App
    name: App
  - name: .
  - uid: App.Utils
    name: Utils
  spec.vb:
  - uid: App
    name: App
  - name: .
  - uid: App.Utils
    name: Utils
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: App.Utils.ReflectionExtensions.GetConcretePropertyExpression*
  commentId: Overload:App.Utils.ReflectionExtensions.GetConcretePropertyExpression
  name: GetConcretePropertyExpression
  nameWithType: ReflectionExtensions.GetConcretePropertyExpression
  fullName: App.Utils.ReflectionExtensions.GetConcretePropertyExpression
- uid: System.Reflection.PropertyInfo
  commentId: T:System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Linq.Expressions.Expression{System.Func{{T},{TK}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, TK>>
  nameWithType: Expression<Func<T, TK>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, TK>>
  nameWithType.vb: Expression(Of Func(Of T, TK))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, TK))
  name.vb: Expression(Of Func(Of T, TK))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TK
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TK
  - name: )
  - name: )
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Reflection
    name: Reflection
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Reflection
    name: Reflection
    isExternal: true
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - name: TDelegate
  - name: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TDelegate
  - name: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
  - name: .
  - uid: System.Linq.Expressions
    name: Expressions
    isExternal: true
- uid: App.Utils.ReflectionExtensions.GetPropertyExpression*
  commentId: Overload:App.Utils.ReflectionExtensions.GetPropertyExpression
  name: GetPropertyExpression
  nameWithType: ReflectionExtensions.GetPropertyExpression
  fullName: App.Utils.ReflectionExtensions.GetPropertyExpression
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Linq.Expressions.LambdaExpression
  commentId: T:System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback*
  commentId: Overload:App.Utils.ReflectionExtensions.GetSetPropertyEventCallback
  name: GetSetPropertyEventCallback
  nameWithType: ReflectionExtensions.GetSetPropertyEventCallback
  fullName: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback
