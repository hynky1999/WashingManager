### YamlMime:ManagedReference
items:
- uid: App.Utils.ProgramInit
  commentId: T:App.Utils.ProgramInit
  id: ProgramInit
  parent: App.Utils
  children:
  - App.Utils.ProgramInit.InitializeDB(IDbContextFactory{App.Data.ApplicationDbContext},Microsoft.AspNetCore.Identity.UserManager{App.Auth.Models.ApplicationUser},Microsoft.AspNetCore.Identity.RoleManager{App.Auth.Utils.Role},App.Auth.Models.ApplicationUser,System.String,App.Auth.Models.ApplicationUser,System.String,System.Boolean)
  - App.Utils.ProgramInit.InitializeHooks(App.Middlewares.IContextHookMiddleware,App.ServerServices.IReservationManager)
  - App.Utils.ProgramInit.InitializeQueues(App.ServerServices.IReservationManager,IDbContextFactory{App.Data.ApplicationDbContext},App.Data.ServiceInterfaces.IBorrowableEntityService)
  langs:
  - csharp
  - vb
  name: ProgramInit
  nameWithType: ProgramInit
  fullName: App.Utils.ProgramInit
  type: Class
  source:
    remote:
      path: App/Utils/ProgramInit.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: ProgramInit
    path: ../App/Utils/ProgramInit.cs
    startLine: 18
  assemblies:
  - App
  namespace: App.Utils
  summary: "\nThis class consists of methods used for program initialization.\n"
  example: []
  syntax:
    content: public static class ProgramInit
    content.vb: Public Module ProgramInit
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: App.Utils.ProgramInit.InitializeHooks(App.Middlewares.IContextHookMiddleware,App.ServerServices.IReservationManager)
  commentId: M:App.Utils.ProgramInit.InitializeHooks(App.Middlewares.IContextHookMiddleware,App.ServerServices.IReservationManager)
  id: InitializeHooks(App.Middlewares.IContextHookMiddleware,App.ServerServices.IReservationManager)
  parent: App.Utils.ProgramInit
  langs:
  - csharp
  - vb
  name: InitializeHooks(IContextHookMiddleware, IReservationManager)
  nameWithType: ProgramInit.InitializeHooks(IContextHookMiddleware, IReservationManager)
  fullName: App.Utils.ProgramInit.InitializeHooks(App.Middlewares.IContextHookMiddleware, App.ServerServices.IReservationManager)
  type: Method
  source:
    remote:
      path: App/Utils/ProgramInit.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: InitializeHooks
    path: ../App/Utils/ProgramInit.cs
    startLine: 27
  assemblies:
  - App
  namespace: App.Utils
  summary: "\nInitializes hooks to <xref href=\"App.Middlewares.IContextHookMiddleware\" data-throw-if-not-resolved=\"false\"></xref>\nThe only hooks added are for BE deletion/creation -> queue creations/deletion\nReservation deletion/modification/creation -> queue on change\n"
  example: []
  syntax:
    content: public static void InitializeHooks(IContextHookMiddleware middleware, IReservationManager reservationManager)
    parameters:
    - id: middleware
      type: App.Middlewares.IContextHookMiddleware
      description: ''
    - id: reservationManager
      type: App.ServerServices.IReservationManager
      description: ''
    content.vb: Public Shared Sub InitializeHooks(middleware As IContextHookMiddleware, reservationManager As IReservationManager)
  overload: App.Utils.ProgramInit.InitializeHooks*
- uid: App.Utils.ProgramInit.InitializeQueues(App.ServerServices.IReservationManager,IDbContextFactory{App.Data.ApplicationDbContext},App.Data.ServiceInterfaces.IBorrowableEntityService)
  commentId: M:App.Utils.ProgramInit.InitializeQueues(App.ServerServices.IReservationManager,IDbContextFactory{App.Data.ApplicationDbContext},App.Data.ServiceInterfaces.IBorrowableEntityService)
  id: InitializeQueues(App.ServerServices.IReservationManager,IDbContextFactory{App.Data.ApplicationDbContext},App.Data.ServiceInterfaces.IBorrowableEntityService)
  parent: App.Utils.ProgramInit
  langs:
  - csharp
  - vb
  name: InitializeQueues(IReservationManager, IDbContextFactory<ApplicationDbContext>, IBorrowableEntityService)
  nameWithType: ProgramInit.InitializeQueues(IReservationManager, IDbContextFactory<ApplicationDbContext>, IBorrowableEntityService)
  fullName: App.Utils.ProgramInit.InitializeQueues(App.ServerServices.IReservationManager, IDbContextFactory<App.Data.ApplicationDbContext>, App.Data.ServiceInterfaces.IBorrowableEntityService)
  type: Method
  source:
    remote:
      path: App/Utils/ProgramInit.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: InitializeQueues
    path: ../App/Utils/ProgramInit.cs
    startLine: 79
  assemblies:
  - App
  namespace: App.Utils
  summary: "\nInitializes queues of <xref href=\"App.ServerServices.IReservationManager\" data-throw-if-not-resolved=\"false\"></xref> based on BEs in database\n"
  example: []
  syntax:
    content: public static Task InitializeQueues(IReservationManager reservationManager, IDbContextFactory<ApplicationDbContext> contextFactory, IBorrowableEntityService beService)
    parameters:
    - id: reservationManager
      type: App.ServerServices.IReservationManager
      description: ''
    - id: contextFactory
      type: IDbContextFactory{App.Data.ApplicationDbContext}
      description: ''
    - id: beService
      type: App.Data.ServiceInterfaces.IBorrowableEntityService
      description: ''
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Shared Function InitializeQueues(reservationManager As IReservationManager, contextFactory As IDbContextFactory(Of ApplicationDbContext), beService As IBorrowableEntityService) As Task
  overload: App.Utils.ProgramInit.InitializeQueues*
  nameWithType.vb: ProgramInit.InitializeQueues(IReservationManager, IDbContextFactory(Of ApplicationDbContext), IBorrowableEntityService)
  fullName.vb: App.Utils.ProgramInit.InitializeQueues(App.ServerServices.IReservationManager, IDbContextFactory(Of App.Data.ApplicationDbContext), App.Data.ServiceInterfaces.IBorrowableEntityService)
  name.vb: InitializeQueues(IReservationManager, IDbContextFactory(Of ApplicationDbContext), IBorrowableEntityService)
- uid: App.Utils.ProgramInit.InitializeDB(IDbContextFactory{App.Data.ApplicationDbContext},Microsoft.AspNetCore.Identity.UserManager{App.Auth.Models.ApplicationUser},Microsoft.AspNetCore.Identity.RoleManager{App.Auth.Utils.Role},App.Auth.Models.ApplicationUser,System.String,App.Auth.Models.ApplicationUser,System.String,System.Boolean)
  commentId: M:App.Utils.ProgramInit.InitializeDB(IDbContextFactory{App.Data.ApplicationDbContext},Microsoft.AspNetCore.Identity.UserManager{App.Auth.Models.ApplicationUser},Microsoft.AspNetCore.Identity.RoleManager{App.Auth.Utils.Role},App.Auth.Models.ApplicationUser,System.String,App.Auth.Models.ApplicationUser,System.String,System.Boolean)
  id: InitializeDB(IDbContextFactory{App.Data.ApplicationDbContext},Microsoft.AspNetCore.Identity.UserManager{App.Auth.Models.ApplicationUser},Microsoft.AspNetCore.Identity.RoleManager{App.Auth.Utils.Role},App.Auth.Models.ApplicationUser,System.String,App.Auth.Models.ApplicationUser,System.String,System.Boolean)
  parent: App.Utils.ProgramInit
  langs:
  - csharp
  - vb
  name: InitializeDB(IDbContextFactory<ApplicationDbContext>, UserManager<ApplicationUser>, RoleManager<Role>, ApplicationUser?, string, ApplicationUser?, string, bool)
  nameWithType: ProgramInit.InitializeDB(IDbContextFactory<ApplicationDbContext>, UserManager<ApplicationUser>, RoleManager<Role>, ApplicationUser?, string, ApplicationUser?, string, bool)
  fullName: App.Utils.ProgramInit.InitializeDB(IDbContextFactory<App.Data.ApplicationDbContext>, Microsoft.AspNetCore.Identity.UserManager<App.Auth.Models.ApplicationUser>, Microsoft.AspNetCore.Identity.RoleManager<App.Auth.Utils.Role>, App.Auth.Models.ApplicationUser?, string, App.Auth.Models.ApplicationUser?, string, bool)
  type: Method
  source:
    remote:
      path: App/Utils/ProgramInit.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: InitializeDB
    path: ../App/Utils/ProgramInit.cs
    startLine: 106
  assemblies:
  - App
  namespace: App.Utils
  summary: "\nInitialize the database with default user accounts and roles.\n"
  example: []
  syntax:
    content: public static Task InitializeDB(IDbContextFactory<ApplicationDbContext> dbContextFactory, UserManager<ApplicationUser> userManager, RoleManager<Role> roleManager, ApplicationUser? admin, string adminPass, ApplicationUser? manager, string managerPass, bool initData = true)
    parameters:
    - id: dbContextFactory
      type: IDbContextFactory{App.Data.ApplicationDbContext}
      description: ''
    - id: userManager
      type: Microsoft.AspNetCore.Identity.UserManager{App.Auth.Models.ApplicationUser}
      description: ''
    - id: roleManager
      type: Microsoft.AspNetCore.Identity.RoleManager{App.Auth.Utils.Role}
      description: ''
    - id: admin
      type: App.Auth.Models.ApplicationUser
      description: Admin User
    - id: adminPass
      type: System.String
      description: Admin Password
    - id: manager
      type: App.Auth.Models.ApplicationUser
      description: Manager User
    - id: managerPass
      type: System.String
      description: Manager Password
    - id: initData
      type: System.Boolean
      description: Should db be initialized with random data ?
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Shared Function InitializeDB(dbContextFactory As IDbContextFactory(Of ApplicationDbContext), userManager As UserManager(Of ApplicationUser), roleManager As RoleManager(Of Role), admin As ApplicationUser, adminPass As String, manager As ApplicationUser, managerPass As String, initData As Boolean = True) As Task
  overload: App.Utils.ProgramInit.InitializeDB*
  nameWithType.vb: ProgramInit.InitializeDB(IDbContextFactory(Of ApplicationDbContext), UserManager(Of ApplicationUser), RoleManager(Of Role), ApplicationUser, String, ApplicationUser, String, Boolean)
  fullName.vb: App.Utils.ProgramInit.InitializeDB(IDbContextFactory(Of App.Data.ApplicationDbContext), Microsoft.AspNetCore.Identity.UserManager(Of App.Auth.Models.ApplicationUser), Microsoft.AspNetCore.Identity.RoleManager(Of App.Auth.Utils.Role), App.Auth.Models.ApplicationUser, String, App.Auth.Models.ApplicationUser, String, Boolean)
  name.vb: InitializeDB(IDbContextFactory(Of ApplicationDbContext), UserManager(Of ApplicationUser), RoleManager(Of Role), ApplicationUser, String, ApplicationUser, String, Boolean)
references:
- uid: App.Utils
  commentId: N:App.Utils
  name: App.Utils
  nameWithType: App.Utils
  fullName: App.Utils
  spec.csharp:
  - uid: App
    name: App
  - name: .
  - uid: App.Utils
    name: Utils
  spec.vb:
  - uid: App
    name: App
  - name: .
  - uid: App.Utils
    name: Utils
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: App.Middlewares.IContextHookMiddleware
  commentId: T:App.Middlewares.IContextHookMiddleware
  parent: App.Middlewares
  name: IContextHookMiddleware
  nameWithType: IContextHookMiddleware
  fullName: App.Middlewares.IContextHookMiddleware
- uid: App.Utils.ProgramInit.InitializeHooks*
  commentId: Overload:App.Utils.ProgramInit.InitializeHooks
  name: InitializeHooks
  nameWithType: ProgramInit.InitializeHooks
  fullName: App.Utils.ProgramInit.InitializeHooks
- uid: App.ServerServices.IReservationManager
  commentId: T:App.ServerServices.IReservationManager
  parent: App.ServerServices
  name: IReservationManager
  nameWithType: IReservationManager
  fullName: App.ServerServices.IReservationManager
- uid: App.Middlewares
  commentId: N:App.Middlewares
  name: App.Middlewares
  nameWithType: App.Middlewares
  fullName: App.Middlewares
  spec.csharp:
  - uid: App
    name: App
  - name: .
  - uid: App.Middlewares
    name: Middlewares
  spec.vb:
  - uid: App
    name: App
  - name: .
  - uid: App.Middlewares
    name: Middlewares
- uid: App.ServerServices
  commentId: N:App.ServerServices
  name: App.ServerServices
  nameWithType: App.ServerServices
  fullName: App.ServerServices
  spec.csharp:
  - uid: App
    name: App
  - name: .
  - uid: App.ServerServices
    name: ServerServices
  spec.vb:
  - uid: App
    name: App
  - name: .
  - uid: App.ServerServices
    name: ServerServices
- uid: App.Utils.ProgramInit.InitializeQueues*
  commentId: Overload:App.Utils.ProgramInit.InitializeQueues
  name: InitializeQueues
  nameWithType: ProgramInit.InitializeQueues
  fullName: App.Utils.ProgramInit.InitializeQueues
- uid: IDbContextFactory{App.Data.ApplicationDbContext}
  commentId: '!:IDbContextFactory{App.Data.ApplicationDbContext}'
  definition: IDbContextFactory`1
  name: IDbContextFactory<ApplicationDbContext>
  nameWithType: IDbContextFactory<ApplicationDbContext>
  fullName: IDbContextFactory<App.Data.ApplicationDbContext>
  nameWithType.vb: IDbContextFactory(Of ApplicationDbContext)
  fullName.vb: IDbContextFactory(Of App.Data.ApplicationDbContext)
  name.vb: IDbContextFactory(Of ApplicationDbContext)
  spec.csharp:
  - uid: IDbContextFactory`1
    name: IDbContextFactory
    isExternal: true
  - name: <
  - uid: App.Data.ApplicationDbContext
    name: ApplicationDbContext
  - name: '>'
  spec.vb:
  - uid: IDbContextFactory`1
    name: IDbContextFactory
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: App.Data.ApplicationDbContext
    name: ApplicationDbContext
  - name: )
- uid: App.Data.ServiceInterfaces.IBorrowableEntityService
  commentId: T:App.Data.ServiceInterfaces.IBorrowableEntityService
  parent: App.Data.ServiceInterfaces
  name: IBorrowableEntityService
  nameWithType: IBorrowableEntityService
  fullName: App.Data.ServiceInterfaces.IBorrowableEntityService
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: IDbContextFactory`1
  isExternal: true
  name: IDbContextFactory<>
  nameWithType: IDbContextFactory<>
  fullName: IDbContextFactory<>
  nameWithType.vb: IDbContextFactory(Of )
  fullName.vb: IDbContextFactory(Of )
  name.vb: IDbContextFactory(Of )
  spec.csharp:
  - uid: IDbContextFactory`1
    name: IDbContextFactory
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: IDbContextFactory`1
    name: IDbContextFactory
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: App.Data.ServiceInterfaces
  commentId: N:App.Data.ServiceInterfaces
  name: App.Data.ServiceInterfaces
  nameWithType: App.Data.ServiceInterfaces
  fullName: App.Data.ServiceInterfaces
  spec.csharp:
  - uid: App
    name: App
  - name: .
  - uid: App.Data
    name: Data
  - name: .
  - uid: App.Data.ServiceInterfaces
    name: ServiceInterfaces
  spec.vb:
  - uid: App
    name: App
  - name: .
  - uid: App.Data
    name: Data
  - name: .
  - uid: App.Data.ServiceInterfaces
    name: ServiceInterfaces
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
- uid: App.Utils.ProgramInit.InitializeDB*
  commentId: Overload:App.Utils.ProgramInit.InitializeDB
  name: InitializeDB
  nameWithType: ProgramInit.InitializeDB
  fullName: App.Utils.ProgramInit.InitializeDB
- uid: Microsoft.AspNetCore.Identity.UserManager{App.Auth.Models.ApplicationUser}
  commentId: T:Microsoft.AspNetCore.Identity.UserManager{App.Auth.Models.ApplicationUser}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.UserManager`1
  name: UserManager<ApplicationUser>
  nameWithType: UserManager<ApplicationUser>
  fullName: Microsoft.AspNetCore.Identity.UserManager<App.Auth.Models.ApplicationUser>
  nameWithType.vb: UserManager(Of ApplicationUser)
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of App.Auth.Models.ApplicationUser)
  name.vb: UserManager(Of ApplicationUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    isExternal: true
  - name: <
  - uid: App.Auth.Models.ApplicationUser
    name: ApplicationUser
  - name: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: App.Auth.Models.ApplicationUser
    name: ApplicationUser
  - name: )
- uid: Microsoft.AspNetCore.Identity.RoleManager{App.Auth.Utils.Role}
  commentId: T:Microsoft.AspNetCore.Identity.RoleManager{App.Auth.Utils.Role}
  parent: Microsoft.AspNetCore.Identity
  definition: Microsoft.AspNetCore.Identity.RoleManager`1
  name: RoleManager<Role>
  nameWithType: RoleManager<Role>
  fullName: Microsoft.AspNetCore.Identity.RoleManager<App.Auth.Utils.Role>
  nameWithType.vb: RoleManager(Of Role)
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of App.Auth.Utils.Role)
  name.vb: RoleManager(Of Role)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    isExternal: true
  - name: <
  - uid: App.Auth.Utils.Role
    name: Role
  - name: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: App.Auth.Utils.Role
    name: Role
  - name: )
- uid: App.Auth.Models.ApplicationUser
  commentId: T:App.Auth.Models.ApplicationUser
  parent: App.Auth.Models
  name: ApplicationUser
  nameWithType: ApplicationUser
  fullName: App.Auth.Models.ApplicationUser
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Microsoft.AspNetCore.Identity.UserManager`1
  commentId: T:Microsoft.AspNetCore.Identity.UserManager`1
  isExternal: true
  name: UserManager<TUser>
  nameWithType: UserManager<TUser>
  fullName: Microsoft.AspNetCore.Identity.UserManager<TUser>
  nameWithType.vb: UserManager(Of TUser)
  fullName.vb: Microsoft.AspNetCore.Identity.UserManager(Of TUser)
  name.vb: UserManager(Of TUser)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    isExternal: true
  - name: <
  - name: TUser
  - name: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.UserManager`1
    name: UserManager
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TUser
  - name: )
- uid: Microsoft.AspNetCore.Identity
  commentId: N:Microsoft.AspNetCore.Identity
  isExternal: true
  name: Microsoft.AspNetCore.Identity
  nameWithType: Microsoft.AspNetCore.Identity
  fullName: Microsoft.AspNetCore.Identity
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.AspNetCore
    name: AspNetCore
    isExternal: true
  - name: .
  - uid: Microsoft.AspNetCore.Identity
    name: Identity
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.AspNetCore
    name: AspNetCore
    isExternal: true
  - name: .
  - uid: Microsoft.AspNetCore.Identity
    name: Identity
    isExternal: true
- uid: Microsoft.AspNetCore.Identity.RoleManager`1
  commentId: T:Microsoft.AspNetCore.Identity.RoleManager`1
  isExternal: true
  name: RoleManager<TRole>
  nameWithType: RoleManager<TRole>
  fullName: Microsoft.AspNetCore.Identity.RoleManager<TRole>
  nameWithType.vb: RoleManager(Of TRole)
  fullName.vb: Microsoft.AspNetCore.Identity.RoleManager(Of TRole)
  name.vb: RoleManager(Of TRole)
  spec.csharp:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    isExternal: true
  - name: <
  - name: TRole
  - name: '>'
  spec.vb:
  - uid: Microsoft.AspNetCore.Identity.RoleManager`1
    name: RoleManager
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TRole
  - name: )
- uid: App.Auth.Models
  commentId: N:App.Auth.Models
  name: App.Auth.Models
  nameWithType: App.Auth.Models
  fullName: App.Auth.Models
  spec.csharp:
  - uid: App
    name: App
  - name: .
  - uid: App.Auth
    name: Auth
  - name: .
  - uid: App.Auth.Models
    name: Models
  spec.vb:
  - uid: App
    name: App
  - name: .
  - uid: App.Auth
    name: Auth
  - name: .
  - uid: App.Auth.Models
    name: Models
