### YamlMime:ManagedReference
items:
- uid: App.Data.EFCoreServices.UsageChartingService`1
  commentId: T:App.Data.EFCoreServices.UsageChartingService`1
  id: UsageChartingService`1
  parent: App.Data.EFCoreServices
  children:
  - App.Data.EFCoreServices.UsageChartingService`1.#ctor(IDbContextFactory{App.Data.ApplicationDbContext},App.Data.Constants.IUsageConstants,IClock)
  - App.Data.EFCoreServices.UsageChartingService`1.GetAvgHourlyUsageAsync(DateTimeZone)
  - App.Data.EFCoreServices.UsageChartingService`1.GetBorrowsByDayAsync(LocalDate,LocalDate,DateTimeZone)
  - App.Data.EFCoreServices.UsageChartingService`1.GetBorrowsByHourAsync(LocalDate,DateTimeZone)
  - App.Data.EFCoreServices.UsageChartingService`1.GetHourlyUsageAsync(IsoDayOfWeek,DateTimeZone)
  - App.Data.EFCoreServices.UsageChartingService`1.GetWeekUsageAsync(DateTimeZone)
  langs:
  - csharp
  - vb
  name: UsageChartingService<T>
  nameWithType: UsageChartingService<T>
  fullName: App.Data.EFCoreServices.UsageChartingService<T>
  type: Class
  source:
    remote:
      path: App/Data/EFCoreServices/UsageChartingService.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: UsageChartingService
    path: ../App/Data/EFCoreServices/UsageChartingService.cs
    startLine: 10
  assemblies:
  - App
  namespace: App.Data.EFCoreServices
  summary: "\nEF Core implementation of <xref href=\"App.Data.ServiceInterfaces.IUsageChartingService%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class UsageChartingService<T> : IUsageChartingService<T>, IUsageChartingService where T : BorrowableEntity'
    typeParameters:
    - id: T
    content.vb: Public Class UsageChartingService(Of T As BorrowableEntity) Implements IUsageChartingService(Of T), IUsageChartingService
  inheritance:
  - System.Object
  implements:
  - App.Data.ServiceInterfaces.IUsageChartingService{{T}}
  - App.Data.ServiceInterfaces.IUsageChartingService
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - App.Data.EFCoreServices.UsageChartingService`1.App.Utils.ReflectionExtensions.GetPropertyExpression``1(System.Reflection.PropertyInfo,System.Type)
  - App.Data.EFCoreServices.UsageChartingService`1.App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(System.Object,System.Reflection.PropertyInfo,System.Type)
  nameWithType.vb: UsageChartingService(Of T)
  fullName.vb: App.Data.EFCoreServices.UsageChartingService(Of T)
  name.vb: UsageChartingService(Of T)
- uid: App.Data.EFCoreServices.UsageChartingService`1.#ctor(IDbContextFactory{App.Data.ApplicationDbContext},App.Data.Constants.IUsageConstants,IClock)
  commentId: M:App.Data.EFCoreServices.UsageChartingService`1.#ctor(IDbContextFactory{App.Data.ApplicationDbContext},App.Data.Constants.IUsageConstants,IClock)
  id: '#ctor(IDbContextFactory{App.Data.ApplicationDbContext},App.Data.Constants.IUsageConstants,IClock)'
  parent: App.Data.EFCoreServices.UsageChartingService`1
  langs:
  - csharp
  - vb
  name: UsageChartingService(IDbContextFactory<ApplicationDbContext>, IUsageConstants, IClock)
  nameWithType: UsageChartingService<T>.UsageChartingService(IDbContextFactory<ApplicationDbContext>, IUsageConstants, IClock)
  fullName: App.Data.EFCoreServices.UsageChartingService<T>.UsageChartingService(IDbContextFactory<App.Data.ApplicationDbContext>, App.Data.Constants.IUsageConstants, IClock)
  type: Constructor
  source:
    remote:
      path: App/Data/EFCoreServices/UsageChartingService.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: .ctor
    path: ../App/Data/EFCoreServices/UsageChartingService.cs
    startLine: 23
  assemblies:
  - App
  namespace: App.Data.EFCoreServices
  summary: "\nConstructor.\n"
  example: []
  syntax:
    content: public UsageChartingService(IDbContextFactory<ApplicationDbContext> dbFactory, IUsageConstants usageConstants, IClock clock)
    parameters:
    - id: dbFactory
      type: IDbContextFactory{App.Data.ApplicationDbContext}
      description: ''
    - id: usageConstants
      type: App.Data.Constants.IUsageConstants
      description: ''
    - id: clock
      type: IClock
      description: ''
    content.vb: Public Sub New(dbFactory As IDbContextFactory(Of ApplicationDbContext), usageConstants As IUsageConstants, clock As IClock)
  overload: App.Data.EFCoreServices.UsageChartingService`1.#ctor*
  nameWithType.vb: UsageChartingService(Of T).New(IDbContextFactory(Of ApplicationDbContext), IUsageConstants, IClock)
  fullName.vb: App.Data.EFCoreServices.UsageChartingService(Of T).New(IDbContextFactory(Of App.Data.ApplicationDbContext), App.Data.Constants.IUsageConstants, IClock)
  name.vb: New(IDbContextFactory(Of ApplicationDbContext), IUsageConstants, IClock)
- uid: App.Data.EFCoreServices.UsageChartingService`1.GetBorrowsByHourAsync(LocalDate,DateTimeZone)
  commentId: M:App.Data.EFCoreServices.UsageChartingService`1.GetBorrowsByHourAsync(LocalDate,DateTimeZone)
  id: GetBorrowsByHourAsync(LocalDate,DateTimeZone)
  parent: App.Data.EFCoreServices.UsageChartingService`1
  langs:
  - csharp
  - vb
  name: GetBorrowsByHourAsync(LocalDate, DateTimeZone)
  nameWithType: UsageChartingService<T>.GetBorrowsByHourAsync(LocalDate, DateTimeZone)
  fullName: App.Data.EFCoreServices.UsageChartingService<T>.GetBorrowsByHourAsync(LocalDate, DateTimeZone)
  type: Method
  source:
    remote:
      path: App/Data/EFCoreServices/UsageChartingService.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: GetBorrowsByHourAsync
    path: ../App/Data/EFCoreServices/UsageChartingService.cs
    startLine: 33
  assemblies:
  - App
  namespace: App.Data.EFCoreServices
  summary: "\nReturns n. Borrows per hour in specified date.\nWhile the arguments might seems strange, this is the only way to\nenforce getting just date and timezone from the user.\n"
  example: []
  syntax:
    content: public Task<(LocalTime hour, int value)[]> GetBorrowsByHourAsync(LocalDate date, DateTimeZone tz)
    parameters:
    - id: date
      type: LocalDate
    - id: tz
      type: DateTimeZone
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{LocalTime,System.Int32}[]}
      description: Borrows per hour
    content.vb: Public Function GetBorrowsByHourAsync([date] As LocalDate, tz As DateTimeZone) As Task(Of (hour As LocalTime, value As Integer)())
  overload: App.Data.EFCoreServices.UsageChartingService`1.GetBorrowsByHourAsync*
  implements:
  - App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByHourAsync(LocalDate,DateTimeZone)
  nameWithType.vb: UsageChartingService(Of T).GetBorrowsByHourAsync(LocalDate, DateTimeZone)
  fullName.vb: App.Data.EFCoreServices.UsageChartingService(Of T).GetBorrowsByHourAsync(LocalDate, DateTimeZone)
- uid: App.Data.EFCoreServices.UsageChartingService`1.GetBorrowsByDayAsync(LocalDate,LocalDate,DateTimeZone)
  commentId: M:App.Data.EFCoreServices.UsageChartingService`1.GetBorrowsByDayAsync(LocalDate,LocalDate,DateTimeZone)
  id: GetBorrowsByDayAsync(LocalDate,LocalDate,DateTimeZone)
  parent: App.Data.EFCoreServices.UsageChartingService`1
  langs:
  - csharp
  - vb
  name: GetBorrowsByDayAsync(LocalDate, LocalDate, DateTimeZone)
  nameWithType: UsageChartingService<T>.GetBorrowsByDayAsync(LocalDate, LocalDate, DateTimeZone)
  fullName: App.Data.EFCoreServices.UsageChartingService<T>.GetBorrowsByDayAsync(LocalDate, LocalDate, DateTimeZone)
  type: Method
  source:
    remote:
      path: App/Data/EFCoreServices/UsageChartingService.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: GetBorrowsByDayAsync
    path: ../App/Data/EFCoreServices/UsageChartingService.cs
    startLine: 66
  assemblies:
  - App
  namespace: App.Data.EFCoreServices
  summary: "\nReturns n. Borrows per day in range start-end.\nWhile the arguments might seems strange, this is the only way to\nenforce getting just date and timezone from the user.\n"
  example: []
  syntax:
    content: public Task<(LocalDate time, int value)[]> GetBorrowsByDayAsync(LocalDate start, LocalDate end, DateTimeZone tz)
    parameters:
    - id: start
      type: LocalDate
      description: ''
    - id: end
      type: LocalDate
      description: ''
    - id: tz
      type: DateTimeZone
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{LocalDate,System.Int32}[]}
      description: Borrows per day
    content.vb: Public Function GetBorrowsByDayAsync(start As LocalDate, [end] As LocalDate, tz As DateTimeZone) As Task(Of (time As LocalDate, value As Integer)())
  overload: App.Data.EFCoreServices.UsageChartingService`1.GetBorrowsByDayAsync*
  implements:
  - App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByDayAsync(LocalDate,LocalDate,DateTimeZone)
  nameWithType.vb: UsageChartingService(Of T).GetBorrowsByDayAsync(LocalDate, LocalDate, DateTimeZone)
  fullName.vb: App.Data.EFCoreServices.UsageChartingService(Of T).GetBorrowsByDayAsync(LocalDate, LocalDate, DateTimeZone)
- uid: App.Data.EFCoreServices.UsageChartingService`1.GetWeekUsageAsync(DateTimeZone)
  commentId: M:App.Data.EFCoreServices.UsageChartingService`1.GetWeekUsageAsync(DateTimeZone)
  id: GetWeekUsageAsync(DateTimeZone)
  parent: App.Data.EFCoreServices.UsageChartingService`1
  langs:
  - csharp
  - vb
  name: GetWeekUsageAsync(DateTimeZone)
  nameWithType: UsageChartingService<T>.GetWeekUsageAsync(DateTimeZone)
  fullName: App.Data.EFCoreServices.UsageChartingService<T>.GetWeekUsageAsync(DateTimeZone)
  type: Method
  source:
    remote:
      path: App/Data/EFCoreServices/UsageChartingService.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: GetWeekUsageAsync
    path: ../App/Data/EFCoreServices/UsageChartingService.cs
    startLine: 104
  assemblies:
  - App
  namespace: App.Data.EFCoreServices
  summary: "\nGets average number of borrows per weekday.\nIn specified timezone.\n"
  example: []
  syntax:
    content: public Task<(IsoDayOfWeek dayOfWeek, double value)[]> GetWeekUsageAsync(DateTimeZone tz)
    parameters:
    - id: tz
      type: DateTimeZone
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{IsoDayOfWeek,System.Double}[]}
      description: Average number of borrows
    content.vb: Public Function GetWeekUsageAsync(tz As DateTimeZone) As Task(Of (dayOfWeek As IsoDayOfWeek, value As Double)())
  overload: App.Data.EFCoreServices.UsageChartingService`1.GetWeekUsageAsync*
  implements:
  - App.Data.ServiceInterfaces.IUsageChartingService.GetWeekUsageAsync(DateTimeZone)
  nameWithType.vb: UsageChartingService(Of T).GetWeekUsageAsync(DateTimeZone)
  fullName.vb: App.Data.EFCoreServices.UsageChartingService(Of T).GetWeekUsageAsync(DateTimeZone)
- uid: App.Data.EFCoreServices.UsageChartingService`1.GetHourlyUsageAsync(IsoDayOfWeek,DateTimeZone)
  commentId: M:App.Data.EFCoreServices.UsageChartingService`1.GetHourlyUsageAsync(IsoDayOfWeek,DateTimeZone)
  id: GetHourlyUsageAsync(IsoDayOfWeek,DateTimeZone)
  parent: App.Data.EFCoreServices.UsageChartingService`1
  langs:
  - csharp
  - vb
  name: GetHourlyUsageAsync(IsoDayOfWeek, DateTimeZone)
  nameWithType: UsageChartingService<T>.GetHourlyUsageAsync(IsoDayOfWeek, DateTimeZone)
  fullName: App.Data.EFCoreServices.UsageChartingService<T>.GetHourlyUsageAsync(IsoDayOfWeek, DateTimeZone)
  type: Method
  source:
    remote:
      path: App/Data/EFCoreServices/UsageChartingService.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: GetHourlyUsageAsync
    path: ../App/Data/EFCoreServices/UsageChartingService.cs
    startLine: 157
  assemblies:
  - App
  namespace: App.Data.EFCoreServices
  summary: "\nGets average number of borrows per hour in specified day of week.\n"
  example: []
  syntax:
    content: public Task<(LocalTime hour, double value)[]> GetHourlyUsageAsync(IsoDayOfWeek dayOfWeek, DateTimeZone tz)
    parameters:
    - id: dayOfWeek
      type: IsoDayOfWeek
      description: ''
    - id: tz
      type: DateTimeZone
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{LocalTime,System.Double}[]}
      description: Average number of borrows
    content.vb: Public Function GetHourlyUsageAsync(dayOfWeek As IsoDayOfWeek, tz As DateTimeZone) As Task(Of (hour As LocalTime, value As Double)())
  overload: App.Data.EFCoreServices.UsageChartingService`1.GetHourlyUsageAsync*
  implements:
  - App.Data.ServiceInterfaces.IUsageChartingService.GetHourlyUsageAsync(IsoDayOfWeek,DateTimeZone)
  nameWithType.vb: UsageChartingService(Of T).GetHourlyUsageAsync(IsoDayOfWeek, DateTimeZone)
  fullName.vb: App.Data.EFCoreServices.UsageChartingService(Of T).GetHourlyUsageAsync(IsoDayOfWeek, DateTimeZone)
- uid: App.Data.EFCoreServices.UsageChartingService`1.GetAvgHourlyUsageAsync(DateTimeZone)
  commentId: M:App.Data.EFCoreServices.UsageChartingService`1.GetAvgHourlyUsageAsync(DateTimeZone)
  id: GetAvgHourlyUsageAsync(DateTimeZone)
  parent: App.Data.EFCoreServices.UsageChartingService`1
  langs:
  - csharp
  - vb
  name: GetAvgHourlyUsageAsync(DateTimeZone)
  nameWithType: UsageChartingService<T>.GetAvgHourlyUsageAsync(DateTimeZone)
  fullName: App.Data.EFCoreServices.UsageChartingService<T>.GetAvgHourlyUsageAsync(DateTimeZone)
  type: Method
  source:
    remote:
      path: App/Data/EFCoreServices/UsageChartingService.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: GetAvgHourlyUsageAsync
    path: ../App/Data/EFCoreServices/UsageChartingService.cs
    startLine: 181
  assemblies:
  - App
  namespace: App.Data.EFCoreServices
  summary: "\nGets average number of borrows per hour over all of week days.\nIn specified timezone.\n"
  example: []
  syntax:
    content: public Task<(LocalTime hour, double value)[]> GetAvgHourlyUsageAsync(DateTimeZone tz)
    parameters:
    - id: tz
      type: DateTimeZone
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{LocalTime,System.Double}[]}
      description: Average number of borrows
    content.vb: Public Function GetAvgHourlyUsageAsync(tz As DateTimeZone) As Task(Of (hour As LocalTime, value As Double)())
  overload: App.Data.EFCoreServices.UsageChartingService`1.GetAvgHourlyUsageAsync*
  implements:
  - App.Data.ServiceInterfaces.IUsageChartingService.GetAvgHourlyUsageAsync(DateTimeZone)
  nameWithType.vb: UsageChartingService(Of T).GetAvgHourlyUsageAsync(DateTimeZone)
  fullName.vb: App.Data.EFCoreServices.UsageChartingService(Of T).GetAvgHourlyUsageAsync(DateTimeZone)
references:
- uid: App.Data.ServiceInterfaces.IUsageChartingService`1
  commentId: T:App.Data.ServiceInterfaces.IUsageChartingService`1
  name: IUsageChartingService<T>
  nameWithType: IUsageChartingService<T>
  fullName: App.Data.ServiceInterfaces.IUsageChartingService<T>
  nameWithType.vb: IUsageChartingService(Of T)
  fullName.vb: App.Data.ServiceInterfaces.IUsageChartingService(Of T)
  name.vb: IUsageChartingService(Of T)
  spec.csharp:
  - uid: App.Data.ServiceInterfaces.IUsageChartingService`1
    name: IUsageChartingService
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: App.Data.ServiceInterfaces.IUsageChartingService`1
    name: IUsageChartingService
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: App.Data.EFCoreServices
  commentId: N:App.Data.EFCoreServices
  name: App.Data.EFCoreServices
  nameWithType: App.Data.EFCoreServices
  fullName: App.Data.EFCoreServices
  spec.csharp:
  - uid: App
    name: App
  - name: .
  - uid: App.Data
    name: Data
  - name: .
  - uid: App.Data.EFCoreServices
    name: EFCoreServices
  spec.vb:
  - uid: App
    name: App
  - name: .
  - uid: App.Data
    name: Data
  - name: .
  - uid: App.Data.EFCoreServices
    name: EFCoreServices
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: App.Data.ServiceInterfaces.IUsageChartingService{{T}}
  commentId: T:App.Data.ServiceInterfaces.IUsageChartingService{`0}
  parent: App.Data.ServiceInterfaces
  definition: App.Data.ServiceInterfaces.IUsageChartingService`1
  name: IUsageChartingService<T>
  nameWithType: IUsageChartingService<T>
  fullName: App.Data.ServiceInterfaces.IUsageChartingService<T>
  nameWithType.vb: IUsageChartingService(Of T)
  fullName.vb: App.Data.ServiceInterfaces.IUsageChartingService(Of T)
  name.vb: IUsageChartingService(Of T)
  spec.csharp:
  - uid: App.Data.ServiceInterfaces.IUsageChartingService`1
    name: IUsageChartingService
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: App.Data.ServiceInterfaces.IUsageChartingService`1
    name: IUsageChartingService
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: App.Data.ServiceInterfaces.IUsageChartingService
  commentId: T:App.Data.ServiceInterfaces.IUsageChartingService
  parent: App.Data.ServiceInterfaces
  name: IUsageChartingService
  nameWithType: IUsageChartingService
  fullName: App.Data.ServiceInterfaces.IUsageChartingService
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: App.Data.EFCoreServices.UsageChartingService`1.App.Utils.ReflectionExtensions.GetPropertyExpression``1(System.Reflection.PropertyInfo,System.Type)
  commentId: M:App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
  parent: App.Utils.ReflectionExtensions
  definition: App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
  name: GetPropertyExpression<UsageChartingService<T>>(UsageChartingService<T>, PropertyInfo, Type)
  nameWithType: ReflectionExtensions.GetPropertyExpression<UsageChartingService<T>>(UsageChartingService<T>, PropertyInfo, Type)
  fullName: App.Utils.ReflectionExtensions.GetPropertyExpression<App.Data.EFCoreServices.UsageChartingService<T>>(App.Data.EFCoreServices.UsageChartingService<T>, System.Reflection.PropertyInfo, System.Type)
  nameWithType.vb: ReflectionExtensions.GetPropertyExpression(Of UsageChartingService(Of T))(UsageChartingService(Of T), PropertyInfo, Type)
  fullName.vb: App.Utils.ReflectionExtensions.GetPropertyExpression(Of App.Data.EFCoreServices.UsageChartingService(Of T))(App.Data.EFCoreServices.UsageChartingService(Of T), System.Reflection.PropertyInfo, System.Type)
  name.vb: GetPropertyExpression(Of UsageChartingService(Of T))(UsageChartingService(Of T), PropertyInfo, Type)
  spec.csharp:
  - uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(App.Data.EFCoreServices.UsageChartingService{`0},System.Reflection.PropertyInfo,System.Type)
    name: GetPropertyExpression
  - name: <
  - uid: App.Data.EFCoreServices.UsageChartingService`1
    name: UsageChartingService
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  - name: (
  - uid: App.Data.EFCoreServices.UsageChartingService`1
    name: UsageChartingService
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(App.Data.EFCoreServices.UsageChartingService{`0},System.Reflection.PropertyInfo,System.Type)
    name: GetPropertyExpression
  - name: (
  - name: Of
  - name: " "
  - uid: App.Data.EFCoreServices.UsageChartingService`1
    name: UsageChartingService
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
  - name: (
  - uid: App.Data.EFCoreServices.UsageChartingService`1
    name: UsageChartingService
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: App.Data.EFCoreServices.UsageChartingService`1.App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(System.Object,System.Reflection.PropertyInfo,System.Type)
  commentId: M:App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
  parent: App.Utils.ReflectionExtensions
  definition: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
  name: GetSetPropertyEventCallback<UsageChartingService<T>>(UsageChartingService<T>, object, PropertyInfo, Type)
  nameWithType: ReflectionExtensions.GetSetPropertyEventCallback<UsageChartingService<T>>(UsageChartingService<T>, object, PropertyInfo, Type)
  fullName: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback<App.Data.EFCoreServices.UsageChartingService<T>>(App.Data.EFCoreServices.UsageChartingService<T>, object, System.Reflection.PropertyInfo, System.Type)
  nameWithType.vb: ReflectionExtensions.GetSetPropertyEventCallback(Of UsageChartingService(Of T))(UsageChartingService(Of T), Object, PropertyInfo, Type)
  fullName.vb: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback(Of App.Data.EFCoreServices.UsageChartingService(Of T))(App.Data.EFCoreServices.UsageChartingService(Of T), Object, System.Reflection.PropertyInfo, System.Type)
  name.vb: GetSetPropertyEventCallback(Of UsageChartingService(Of T))(UsageChartingService(Of T), Object, PropertyInfo, Type)
  spec.csharp:
  - uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(App.Data.EFCoreServices.UsageChartingService{`0},System.Object,System.Reflection.PropertyInfo,System.Type)
    name: GetSetPropertyEventCallback
  - name: <
  - uid: App.Data.EFCoreServices.UsageChartingService`1
    name: UsageChartingService
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  - name: (
  - uid: App.Data.EFCoreServices.UsageChartingService`1
    name: UsageChartingService
  - name: <
  - name: T
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(App.Data.EFCoreServices.UsageChartingService{`0},System.Object,System.Reflection.PropertyInfo,System.Type)
    name: GetSetPropertyEventCallback
  - name: (
  - name: Of
  - name: " "
  - uid: App.Data.EFCoreServices.UsageChartingService`1
    name: UsageChartingService
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
  - name: (
  - uid: App.Data.EFCoreServices.UsageChartingService`1
    name: UsageChartingService
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: App.Data.ServiceInterfaces
  commentId: N:App.Data.ServiceInterfaces
  name: App.Data.ServiceInterfaces
  nameWithType: App.Data.ServiceInterfaces
  fullName: App.Data.ServiceInterfaces
  spec.csharp:
  - uid: App
    name: App
  - name: .
  - uid: App.Data
    name: Data
  - name: .
  - uid: App.Data.ServiceInterfaces
    name: ServiceInterfaces
  spec.vb:
  - uid: App
    name: App
  - name: .
  - uid: App.Data
    name: Data
  - name: .
  - uid: App.Data.ServiceInterfaces
    name: ServiceInterfaces
- uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
  commentId: M:App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
  isExternal: true
  name: GetPropertyExpression<T>(T, PropertyInfo, Type)
  nameWithType: ReflectionExtensions.GetPropertyExpression<T>(T, PropertyInfo, Type)
  fullName: App.Utils.ReflectionExtensions.GetPropertyExpression<T>(T, System.Reflection.PropertyInfo, System.Type)
  nameWithType.vb: ReflectionExtensions.GetPropertyExpression(Of T)(T, PropertyInfo, Type)
  fullName.vb: App.Utils.ReflectionExtensions.GetPropertyExpression(Of T)(T, System.Reflection.PropertyInfo, System.Type)
  name.vb: GetPropertyExpression(Of T)(T, PropertyInfo, Type)
  spec.csharp:
  - uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
    name: GetPropertyExpression
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
    name: GetPropertyExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: App.Utils.ReflectionExtensions
  commentId: T:App.Utils.ReflectionExtensions
  parent: App.Utils
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: App.Utils.ReflectionExtensions
- uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
  commentId: M:App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
  isExternal: true
  name: GetSetPropertyEventCallback<T>(T, object, PropertyInfo, Type)
  nameWithType: ReflectionExtensions.GetSetPropertyEventCallback<T>(T, object, PropertyInfo, Type)
  fullName: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback<T>(T, object, System.Reflection.PropertyInfo, System.Type)
  nameWithType.vb: ReflectionExtensions.GetSetPropertyEventCallback(Of T)(T, Object, PropertyInfo, Type)
  fullName.vb: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback(Of T)(T, Object, System.Reflection.PropertyInfo, System.Type)
  name.vb: GetSetPropertyEventCallback(Of T)(T, Object, PropertyInfo, Type)
  spec.csharp:
  - uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
    name: GetSetPropertyEventCallback
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
    name: GetSetPropertyEventCallback
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: App.Utils
  commentId: N:App.Utils
  name: App.Utils
  nameWithType: App.Utils
  fullName: App.Utils
  spec.csharp:
  - uid: App
    name: App
  - name: .
  - uid: App.Utils
    name: Utils
  spec.vb:
  - uid: App
    name: App
  - name: .
  - uid: App.Utils
    name: Utils
- uid: App.Data.EFCoreServices.UsageChartingService`1.#ctor*
  commentId: Overload:App.Data.EFCoreServices.UsageChartingService`1.#ctor
  name: UsageChartingService
  nameWithType: UsageChartingService<T>.UsageChartingService
  fullName: App.Data.EFCoreServices.UsageChartingService<T>.UsageChartingService
  nameWithType.vb: UsageChartingService(Of T).New
  fullName.vb: App.Data.EFCoreServices.UsageChartingService(Of T).New
  name.vb: New
- uid: IDbContextFactory{App.Data.ApplicationDbContext}
  commentId: '!:IDbContextFactory{App.Data.ApplicationDbContext}'
  definition: IDbContextFactory`1
  name: IDbContextFactory<ApplicationDbContext>
  nameWithType: IDbContextFactory<ApplicationDbContext>
  fullName: IDbContextFactory<App.Data.ApplicationDbContext>
  nameWithType.vb: IDbContextFactory(Of ApplicationDbContext)
  fullName.vb: IDbContextFactory(Of App.Data.ApplicationDbContext)
  name.vb: IDbContextFactory(Of ApplicationDbContext)
  spec.csharp:
  - uid: IDbContextFactory`1
    name: IDbContextFactory
    isExternal: true
  - name: <
  - uid: App.Data.ApplicationDbContext
    name: ApplicationDbContext
  - name: '>'
  spec.vb:
  - uid: IDbContextFactory`1
    name: IDbContextFactory
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: App.Data.ApplicationDbContext
    name: ApplicationDbContext
  - name: )
- uid: App.Data.Constants.IUsageConstants
  commentId: T:App.Data.Constants.IUsageConstants
  parent: App.Data.Constants
  name: IUsageConstants
  nameWithType: IUsageConstants
  fullName: App.Data.Constants.IUsageConstants
- uid: IClock
  isExternal: true
  name: IClock
  nameWithType: IClock
  fullName: IClock
- uid: IDbContextFactory`1
  isExternal: true
  name: IDbContextFactory<>
  nameWithType: IDbContextFactory<>
  fullName: IDbContextFactory<>
  nameWithType.vb: IDbContextFactory(Of )
  fullName.vb: IDbContextFactory(Of )
  name.vb: IDbContextFactory(Of )
  spec.csharp:
  - uid: IDbContextFactory`1
    name: IDbContextFactory
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: IDbContextFactory`1
    name: IDbContextFactory
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: App.Data.Constants
  commentId: N:App.Data.Constants
  name: App.Data.Constants
  nameWithType: App.Data.Constants
  fullName: App.Data.Constants
  spec.csharp:
  - uid: App
    name: App
  - name: .
  - uid: App.Data
    name: Data
  - name: .
  - uid: App.Data.Constants
    name: Constants
  spec.vb:
  - uid: App
    name: App
  - name: .
  - uid: App.Data
    name: Data
  - name: .
  - uid: App.Data.Constants
    name: Constants
- uid: App.Data.EFCoreServices.UsageChartingService`1.GetBorrowsByHourAsync*
  commentId: Overload:App.Data.EFCoreServices.UsageChartingService`1.GetBorrowsByHourAsync
  name: GetBorrowsByHourAsync
  nameWithType: UsageChartingService<T>.GetBorrowsByHourAsync
  fullName: App.Data.EFCoreServices.UsageChartingService<T>.GetBorrowsByHourAsync
  nameWithType.vb: UsageChartingService(Of T).GetBorrowsByHourAsync
  fullName.vb: App.Data.EFCoreServices.UsageChartingService(Of T).GetBorrowsByHourAsync
- uid: App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByHourAsync(LocalDate,DateTimeZone)
  commentId: M:App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByHourAsync(LocalDate,DateTimeZone)
  parent: App.Data.ServiceInterfaces.IUsageChartingService
  isExternal: true
  name: GetBorrowsByHourAsync(LocalDate, DateTimeZone)
  nameWithType: IUsageChartingService.GetBorrowsByHourAsync(LocalDate, DateTimeZone)
  fullName: App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByHourAsync(LocalDate, DateTimeZone)
  spec.csharp:
  - uid: App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByHourAsync(LocalDate,DateTimeZone)
    name: GetBorrowsByHourAsync
  - name: (
  - uid: LocalDate
    name: LocalDate
    isExternal: true
  - name: ','
  - name: " "
  - uid: DateTimeZone
    name: DateTimeZone
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByHourAsync(LocalDate,DateTimeZone)
    name: GetBorrowsByHourAsync
  - name: (
  - uid: LocalDate
    name: LocalDate
    isExternal: true
  - name: ','
  - name: " "
  - uid: DateTimeZone
    name: DateTimeZone
    isExternal: true
  - name: )
- uid: LocalDate
  isExternal: true
  name: LocalDate
  nameWithType: LocalDate
  fullName: LocalDate
- uid: DateTimeZone
  isExternal: true
  name: DateTimeZone
  nameWithType: DateTimeZone
  fullName: DateTimeZone
- uid: System.Threading.Tasks.Task{System.ValueTuple{LocalTime,System.Int32}[]}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{LocalTime,System.Int32}[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<(LocalTime hour, int value)[]>
  nameWithType: Task<(LocalTime hour, int value)[]>
  fullName: System.Threading.Tasks.Task<(LocalTime hour, int value)[]>
  nameWithType.vb: Task(Of (hour As LocalTime, value As Integer)())
  fullName.vb: System.Threading.Tasks.Task(Of (hour As LocalTime, value As Integer)())
  name.vb: Task(Of (hour As LocalTime, value As Integer)())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: (
  - uid: LocalTime
    name: LocalTime
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{LocalTime,System.Int32}.hour
    name: hour
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{LocalTime,System.Int32}.value
    name: value
  - name: )
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{LocalTime,System.Int32}.hour
    name: hour
  - name: " "
  - name: As
  - name: " "
  - uid: LocalTime
    name: LocalTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.ValueTuple{LocalTime,System.Int32}.value
    name: value
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: (
  - name: )
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
- uid: App.Data.EFCoreServices.UsageChartingService`1.GetBorrowsByDayAsync*
  commentId: Overload:App.Data.EFCoreServices.UsageChartingService`1.GetBorrowsByDayAsync
  name: GetBorrowsByDayAsync
  nameWithType: UsageChartingService<T>.GetBorrowsByDayAsync
  fullName: App.Data.EFCoreServices.UsageChartingService<T>.GetBorrowsByDayAsync
  nameWithType.vb: UsageChartingService(Of T).GetBorrowsByDayAsync
  fullName.vb: App.Data.EFCoreServices.UsageChartingService(Of T).GetBorrowsByDayAsync
- uid: App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByDayAsync(LocalDate,LocalDate,DateTimeZone)
  commentId: M:App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByDayAsync(LocalDate,LocalDate,DateTimeZone)
  parent: App.Data.ServiceInterfaces.IUsageChartingService
  isExternal: true
  name: GetBorrowsByDayAsync(LocalDate, LocalDate, DateTimeZone)
  nameWithType: IUsageChartingService.GetBorrowsByDayAsync(LocalDate, LocalDate, DateTimeZone)
  fullName: App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByDayAsync(LocalDate, LocalDate, DateTimeZone)
  spec.csharp:
  - uid: App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByDayAsync(LocalDate,LocalDate,DateTimeZone)
    name: GetBorrowsByDayAsync
  - name: (
  - uid: LocalDate
    name: LocalDate
    isExternal: true
  - name: ','
  - name: " "
  - uid: LocalDate
    name: LocalDate
    isExternal: true
  - name: ','
  - name: " "
  - uid: DateTimeZone
    name: DateTimeZone
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByDayAsync(LocalDate,LocalDate,DateTimeZone)
    name: GetBorrowsByDayAsync
  - name: (
  - uid: LocalDate
    name: LocalDate
    isExternal: true
  - name: ','
  - name: " "
  - uid: LocalDate
    name: LocalDate
    isExternal: true
  - name: ','
  - name: " "
  - uid: DateTimeZone
    name: DateTimeZone
    isExternal: true
  - name: )
- uid: System.Threading.Tasks.Task{System.ValueTuple{LocalDate,System.Int32}[]}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{LocalDate,System.Int32}[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<(LocalDate time, int value)[]>
  nameWithType: Task<(LocalDate time, int value)[]>
  fullName: System.Threading.Tasks.Task<(LocalDate time, int value)[]>
  nameWithType.vb: Task(Of (time As LocalDate, value As Integer)())
  fullName.vb: System.Threading.Tasks.Task(Of (time As LocalDate, value As Integer)())
  name.vb: Task(Of (time As LocalDate, value As Integer)())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: (
  - uid: LocalDate
    name: LocalDate
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{LocalDate,System.Int32}.time
    name: time
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{LocalDate,System.Int32}.value
    name: value
  - name: )
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{LocalDate,System.Int32}.time
    name: time
  - name: " "
  - name: As
  - name: " "
  - uid: LocalDate
    name: LocalDate
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.ValueTuple{LocalDate,System.Int32}.value
    name: value
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: (
  - name: )
  - name: )
- uid: App.Data.EFCoreServices.UsageChartingService`1.GetWeekUsageAsync*
  commentId: Overload:App.Data.EFCoreServices.UsageChartingService`1.GetWeekUsageAsync
  name: GetWeekUsageAsync
  nameWithType: UsageChartingService<T>.GetWeekUsageAsync
  fullName: App.Data.EFCoreServices.UsageChartingService<T>.GetWeekUsageAsync
  nameWithType.vb: UsageChartingService(Of T).GetWeekUsageAsync
  fullName.vb: App.Data.EFCoreServices.UsageChartingService(Of T).GetWeekUsageAsync
- uid: App.Data.ServiceInterfaces.IUsageChartingService.GetWeekUsageAsync(DateTimeZone)
  commentId: M:App.Data.ServiceInterfaces.IUsageChartingService.GetWeekUsageAsync(DateTimeZone)
  parent: App.Data.ServiceInterfaces.IUsageChartingService
  isExternal: true
  name: GetWeekUsageAsync(DateTimeZone)
  nameWithType: IUsageChartingService.GetWeekUsageAsync(DateTimeZone)
  fullName: App.Data.ServiceInterfaces.IUsageChartingService.GetWeekUsageAsync(DateTimeZone)
  spec.csharp:
  - uid: App.Data.ServiceInterfaces.IUsageChartingService.GetWeekUsageAsync(DateTimeZone)
    name: GetWeekUsageAsync
  - name: (
  - uid: DateTimeZone
    name: DateTimeZone
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Data.ServiceInterfaces.IUsageChartingService.GetWeekUsageAsync(DateTimeZone)
    name: GetWeekUsageAsync
  - name: (
  - uid: DateTimeZone
    name: DateTimeZone
    isExternal: true
  - name: )
- uid: System.Threading.Tasks.Task{System.ValueTuple{IsoDayOfWeek,System.Double}[]}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{IsoDayOfWeek,System.Double}[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<(IsoDayOfWeek dayOfWeek, double value)[]>
  nameWithType: Task<(IsoDayOfWeek dayOfWeek, double value)[]>
  fullName: System.Threading.Tasks.Task<(IsoDayOfWeek dayOfWeek, double value)[]>
  nameWithType.vb: Task(Of (dayOfWeek As IsoDayOfWeek, value As Double)())
  fullName.vb: System.Threading.Tasks.Task(Of (dayOfWeek As IsoDayOfWeek, value As Double)())
  name.vb: Task(Of (dayOfWeek As IsoDayOfWeek, value As Double)())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: (
  - uid: IsoDayOfWeek
    name: IsoDayOfWeek
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{IsoDayOfWeek,System.Double}.dayOfWeek
    name: dayOfWeek
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{IsoDayOfWeek,System.Double}.value
    name: value
  - name: )
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{IsoDayOfWeek,System.Double}.dayOfWeek
    name: dayOfWeek
  - name: " "
  - name: As
  - name: " "
  - uid: IsoDayOfWeek
    name: IsoDayOfWeek
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.ValueTuple{IsoDayOfWeek,System.Double}.value
    name: value
  - name: " "
  - name: As
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: )
  - name: (
  - name: )
  - name: )
- uid: App.Data.EFCoreServices.UsageChartingService`1.GetHourlyUsageAsync*
  commentId: Overload:App.Data.EFCoreServices.UsageChartingService`1.GetHourlyUsageAsync
  name: GetHourlyUsageAsync
  nameWithType: UsageChartingService<T>.GetHourlyUsageAsync
  fullName: App.Data.EFCoreServices.UsageChartingService<T>.GetHourlyUsageAsync
  nameWithType.vb: UsageChartingService(Of T).GetHourlyUsageAsync
  fullName.vb: App.Data.EFCoreServices.UsageChartingService(Of T).GetHourlyUsageAsync
- uid: App.Data.ServiceInterfaces.IUsageChartingService.GetHourlyUsageAsync(IsoDayOfWeek,DateTimeZone)
  commentId: M:App.Data.ServiceInterfaces.IUsageChartingService.GetHourlyUsageAsync(IsoDayOfWeek,DateTimeZone)
  parent: App.Data.ServiceInterfaces.IUsageChartingService
  isExternal: true
  name: GetHourlyUsageAsync(IsoDayOfWeek, DateTimeZone)
  nameWithType: IUsageChartingService.GetHourlyUsageAsync(IsoDayOfWeek, DateTimeZone)
  fullName: App.Data.ServiceInterfaces.IUsageChartingService.GetHourlyUsageAsync(IsoDayOfWeek, DateTimeZone)
  spec.csharp:
  - uid: App.Data.ServiceInterfaces.IUsageChartingService.GetHourlyUsageAsync(IsoDayOfWeek,DateTimeZone)
    name: GetHourlyUsageAsync
  - name: (
  - uid: IsoDayOfWeek
    name: IsoDayOfWeek
    isExternal: true
  - name: ','
  - name: " "
  - uid: DateTimeZone
    name: DateTimeZone
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Data.ServiceInterfaces.IUsageChartingService.GetHourlyUsageAsync(IsoDayOfWeek,DateTimeZone)
    name: GetHourlyUsageAsync
  - name: (
  - uid: IsoDayOfWeek
    name: IsoDayOfWeek
    isExternal: true
  - name: ','
  - name: " "
  - uid: DateTimeZone
    name: DateTimeZone
    isExternal: true
  - name: )
- uid: IsoDayOfWeek
  isExternal: true
  name: IsoDayOfWeek
  nameWithType: IsoDayOfWeek
  fullName: IsoDayOfWeek
- uid: System.Threading.Tasks.Task{System.ValueTuple{LocalTime,System.Double}[]}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{LocalTime,System.Double}[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<(LocalTime hour, double value)[]>
  nameWithType: Task<(LocalTime hour, double value)[]>
  fullName: System.Threading.Tasks.Task<(LocalTime hour, double value)[]>
  nameWithType.vb: Task(Of (hour As LocalTime, value As Double)())
  fullName.vb: System.Threading.Tasks.Task(Of (hour As LocalTime, value As Double)())
  name.vb: Task(Of (hour As LocalTime, value As Double)())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: (
  - uid: LocalTime
    name: LocalTime
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{LocalTime,System.Double}.hour
    name: hour
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{LocalTime,System.Double}.value
    name: value
  - name: )
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{LocalTime,System.Double}.hour
    name: hour
  - name: " "
  - name: As
  - name: " "
  - uid: LocalTime
    name: LocalTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.ValueTuple{LocalTime,System.Double}.value
    name: value
  - name: " "
  - name: As
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: )
  - name: (
  - name: )
  - name: )
- uid: App.Data.EFCoreServices.UsageChartingService`1.GetAvgHourlyUsageAsync*
  commentId: Overload:App.Data.EFCoreServices.UsageChartingService`1.GetAvgHourlyUsageAsync
  name: GetAvgHourlyUsageAsync
  nameWithType: UsageChartingService<T>.GetAvgHourlyUsageAsync
  fullName: App.Data.EFCoreServices.UsageChartingService<T>.GetAvgHourlyUsageAsync
  nameWithType.vb: UsageChartingService(Of T).GetAvgHourlyUsageAsync
  fullName.vb: App.Data.EFCoreServices.UsageChartingService(Of T).GetAvgHourlyUsageAsync
- uid: App.Data.ServiceInterfaces.IUsageChartingService.GetAvgHourlyUsageAsync(DateTimeZone)
  commentId: M:App.Data.ServiceInterfaces.IUsageChartingService.GetAvgHourlyUsageAsync(DateTimeZone)
  parent: App.Data.ServiceInterfaces.IUsageChartingService
  isExternal: true
  name: GetAvgHourlyUsageAsync(DateTimeZone)
  nameWithType: IUsageChartingService.GetAvgHourlyUsageAsync(DateTimeZone)
  fullName: App.Data.ServiceInterfaces.IUsageChartingService.GetAvgHourlyUsageAsync(DateTimeZone)
  spec.csharp:
  - uid: App.Data.ServiceInterfaces.IUsageChartingService.GetAvgHourlyUsageAsync(DateTimeZone)
    name: GetAvgHourlyUsageAsync
  - name: (
  - uid: DateTimeZone
    name: DateTimeZone
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Data.ServiceInterfaces.IUsageChartingService.GetAvgHourlyUsageAsync(DateTimeZone)
    name: GetAvgHourlyUsageAsync
  - name: (
  - uid: DateTimeZone
    name: DateTimeZone
    isExternal: true
  - name: )
