### YamlMime:ManagedReference
items:
- uid: App.Utils.GenericUtils
  commentId: T:App.Utils.GenericUtils
  id: GenericUtils
  parent: App.Utils
  children:
  - App.Utils.GenericUtils.ChangeType``1(System.Object)
  - App.Utils.GenericUtils.DisplayName(System.Reflection.PropertyInfo)
  - App.Utils.GenericUtils.DisplayName(System.Type)
  - App.Utils.GenericUtils.FireAndForget(System.Threading.Tasks.Task)
  langs:
  - csharp
  - vb
  name: GenericUtils
  nameWithType: GenericUtils
  fullName: App.Utils.GenericUtils
  type: Class
  source:
    remote:
      path: App/Utils/GenericUtils.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: GenericUtils
    path: ../App/Utils/GenericUtils.cs
    startLine: 10
  assemblies:
  - App
  namespace: App.Utils
  summary: "\nExtension methods without a home\n"
  example: []
  syntax:
    content: public static class GenericUtils
    content.vb: Public Module GenericUtils
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: App.Utils.GenericUtils.FireAndForget(System.Threading.Tasks.Task)
  commentId: M:App.Utils.GenericUtils.FireAndForget(System.Threading.Tasks.Task)
  id: FireAndForget(System.Threading.Tasks.Task)
  isExtensionMethod: true
  parent: App.Utils.GenericUtils
  langs:
  - csharp
  - vb
  name: FireAndForget(Task)
  nameWithType: GenericUtils.FireAndForget(Task)
  fullName: App.Utils.GenericUtils.FireAndForget(System.Threading.Tasks.Task)
  type: Method
  source:
    remote:
      path: App/Utils/GenericUtils.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: FireAndForget
    path: ../App/Utils/GenericUtils.cs
    startLine: 16
  assemblies:
  - App
  namespace: App.Utils
  summary: "\nAwaits given task and write exception to console\n"
  example: []
  syntax:
    content: public static void FireAndForget(this Task task)
    parameters:
    - id: task
      type: System.Threading.Tasks.Task
      description: Task to be awaited
    content.vb: Public Shared Sub FireAndForget(task As Task)
  overload: App.Utils.GenericUtils.FireAndForget*
- uid: App.Utils.GenericUtils.ChangeType``1(System.Object)
  commentId: M:App.Utils.GenericUtils.ChangeType``1(System.Object)
  id: ChangeType``1(System.Object)
  parent: App.Utils.GenericUtils
  langs:
  - csharp
  - vb
  name: ChangeType<T>(object?)
  nameWithType: GenericUtils.ChangeType<T>(object?)
  fullName: App.Utils.GenericUtils.ChangeType<T>(object?)
  type: Method
  source:
    remote:
      path: App/Utils/GenericUtils.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: ChangeType
    path: ../App/Utils/GenericUtils.cs
    startLine: 30
  assemblies:
  - App
  namespace: App.Utils
  summary: "\nChanges the type of the object to the given type\nWorks with nullable value/ref types\n"
  example: []
  syntax:
    content: public static T? ChangeType<T>(object? value)
    parameters:
    - id: value
      type: System.Object
      description: ''
    typeParameters:
    - id: T
      description: Type to convert to
    return:
      type: '{T}'
      description: ''
    content.vb: Public Shared Function ChangeType(Of T)(value As Object) As T
  overload: App.Utils.GenericUtils.ChangeType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: throws if unable to detect type to convert to
  nameWithType.vb: GenericUtils.ChangeType(Of T)(Object)
  fullName.vb: App.Utils.GenericUtils.ChangeType(Of T)(Object)
  name.vb: ChangeType(Of T)(Object)
- uid: App.Utils.GenericUtils.DisplayName(System.Type)
  commentId: M:App.Utils.GenericUtils.DisplayName(System.Type)
  id: DisplayName(System.Type)
  isExtensionMethod: true
  parent: App.Utils.GenericUtils
  langs:
  - csharp
  - vb
  name: DisplayName(Type)
  nameWithType: GenericUtils.DisplayName(Type)
  fullName: App.Utils.GenericUtils.DisplayName(System.Type)
  type: Method
  source:
    remote:
      path: App/Utils/GenericUtils.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: DisplayName
    path: ../App/Utils/GenericUtils.cs
    startLine: 65
  assemblies:
  - App
  namespace: App.Utils
  summary: "\nGets the display name of type certain type based on the DisplayNameAttribute\n"
  example: []
  syntax:
    content: public static string DisplayName(this Type type)
    parameters:
    - id: type
      type: System.Type
      description: ''
    return:
      type: System.String
      description: display name
    content.vb: Public Shared Function DisplayName(type As Type) As String
  overload: App.Utils.GenericUtils.DisplayName*
- uid: App.Utils.GenericUtils.DisplayName(System.Reflection.PropertyInfo)
  commentId: M:App.Utils.GenericUtils.DisplayName(System.Reflection.PropertyInfo)
  id: DisplayName(System.Reflection.PropertyInfo)
  isExtensionMethod: true
  parent: App.Utils.GenericUtils
  langs:
  - csharp
  - vb
  name: DisplayName(PropertyInfo)
  nameWithType: GenericUtils.DisplayName(PropertyInfo)
  fullName: App.Utils.GenericUtils.DisplayName(System.Reflection.PropertyInfo)
  type: Method
  source:
    remote:
      path: App/Utils/GenericUtils.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: DisplayName
    path: ../App/Utils/GenericUtils.cs
    startLine: 76
  assemblies:
  - App
  namespace: App.Utils
  summary: "\nGets the display property based on DisplayAttribute/DisplayNameAttribute\n"
  example: []
  syntax:
    content: public static string DisplayName(this PropertyInfo property)
    parameters:
    - id: property
      type: System.Reflection.PropertyInfo
      description: ''
    return:
      type: System.String
      description: Display Name
    content.vb: Public Shared Function DisplayName([property] As PropertyInfo) As String
  overload: App.Utils.GenericUtils.DisplayName*
references:
- uid: App.Utils
  commentId: N:App.Utils
  name: App.Utils
  nameWithType: App.Utils
  fullName: App.Utils
  spec.csharp:
  - uid: App
    name: App
  - name: .
  - uid: App.Utils
    name: Utils
  spec.vb:
  - uid: App
    name: App
  - name: .
  - uid: App.Utils
    name: Utils
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: App.Utils.GenericUtils.FireAndForget*
  commentId: Overload:App.Utils.GenericUtils.FireAndForget
  name: FireAndForget
  nameWithType: GenericUtils.FireAndForget
  fullName: App.Utils.GenericUtils.FireAndForget
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: App.Utils.GenericUtils.ChangeType*
  commentId: Overload:App.Utils.GenericUtils.ChangeType
  name: ChangeType
  nameWithType: GenericUtils.ChangeType
  fullName: App.Utils.GenericUtils.ChangeType
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: App.Utils.GenericUtils.DisplayName*
  commentId: Overload:App.Utils.GenericUtils.DisplayName
  name: DisplayName
  nameWithType: GenericUtils.DisplayName
  fullName: App.Utils.GenericUtils.DisplayName
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Reflection.PropertyInfo
  commentId: T:System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Reflection
    name: Reflection
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Reflection
    name: Reflection
    isExternal: true
