### YamlMime:ManagedReference
items:
- uid: App.Data.ServiceInterfaces.IUsageChartingService
  commentId: T:App.Data.ServiceInterfaces.IUsageChartingService
  id: IUsageChartingService
  parent: App.Data.ServiceInterfaces
  children:
  - App.Data.ServiceInterfaces.IUsageChartingService.GetAvgHourlyUsageAsync(DateTimeZone)
  - App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByDayAsync(LocalDate,LocalDate,DateTimeZone)
  - App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByHourAsync(LocalDate,DateTimeZone)
  - App.Data.ServiceInterfaces.IUsageChartingService.GetHourlyUsageAsync(IsoDayOfWeek,DateTimeZone)
  - App.Data.ServiceInterfaces.IUsageChartingService.GetWeekUsageAsync(DateTimeZone)
  langs:
  - csharp
  - vb
  name: IUsageChartingService
  nameWithType: IUsageChartingService
  fullName: App.Data.ServiceInterfaces.IUsageChartingService
  type: Interface
  source:
    remote:
      path: App/Data/ServiceInterfaces/IUsageChartingService.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: IUsageChartingService
    path: ../App/Data/ServiceInterfaces/IUsageChartingService.cs
    startLine: 7
  assemblies:
  - App
  namespace: App.Data.ServiceInterfaces
  summary: "\nInterface for the service that handles querying UsageData for charting\n"
  example: []
  syntax:
    content: public interface IUsageChartingService
    content.vb: Public Interface IUsageChartingService
  extensionMethods:
  - App.Data.ServiceInterfaces.IUsageChartingService.App.Utils.ReflectionExtensions.GetPropertyExpression``1(System.Reflection.PropertyInfo,System.Type)
  - App.Data.ServiceInterfaces.IUsageChartingService.App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(System.Object,System.Reflection.PropertyInfo,System.Type)
- uid: App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByHourAsync(LocalDate,DateTimeZone)
  commentId: M:App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByHourAsync(LocalDate,DateTimeZone)
  id: GetBorrowsByHourAsync(LocalDate,DateTimeZone)
  parent: App.Data.ServiceInterfaces.IUsageChartingService
  langs:
  - csharp
  - vb
  name: GetBorrowsByHourAsync(LocalDate, DateTimeZone)
  nameWithType: IUsageChartingService.GetBorrowsByHourAsync(LocalDate, DateTimeZone)
  fullName: App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByHourAsync(LocalDate, DateTimeZone)
  type: Method
  source:
    remote:
      path: App/Data/ServiceInterfaces/IUsageChartingService.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: GetBorrowsByHourAsync
    path: ../App/Data/ServiceInterfaces/IUsageChartingService.cs
    startLine: 17
  assemblies:
  - App
  namespace: App.Data.ServiceInterfaces
  summary: "\nReturns n. Borrows per hour in specified date.\nWhile the arguments might seems strange, this is the only way to\nenforce getting just date and timezone from the user.\n"
  example: []
  syntax:
    content: Task<(LocalTime hour, int value)[]> GetBorrowsByHourAsync(LocalDate day, DateTimeZone tz)
    parameters:
    - id: day
      type: LocalDate
      description: ''
    - id: tz
      type: DateTimeZone
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{LocalTime,System.Int32}[]}
      description: Borrows per hour
    content.vb: Function GetBorrowsByHourAsync(day As LocalDate, tz As DateTimeZone) As Task(Of (hour As LocalTime, value As Integer)())
  overload: App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByHourAsync*
- uid: App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByDayAsync(LocalDate,LocalDate,DateTimeZone)
  commentId: M:App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByDayAsync(LocalDate,LocalDate,DateTimeZone)
  id: GetBorrowsByDayAsync(LocalDate,LocalDate,DateTimeZone)
  parent: App.Data.ServiceInterfaces.IUsageChartingService
  langs:
  - csharp
  - vb
  name: GetBorrowsByDayAsync(LocalDate, LocalDate, DateTimeZone)
  nameWithType: IUsageChartingService.GetBorrowsByDayAsync(LocalDate, LocalDate, DateTimeZone)
  fullName: App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByDayAsync(LocalDate, LocalDate, DateTimeZone)
  type: Method
  source:
    remote:
      path: App/Data/ServiceInterfaces/IUsageChartingService.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: GetBorrowsByDayAsync
    path: ../App/Data/ServiceInterfaces/IUsageChartingService.cs
    startLine: 29
  assemblies:
  - App
  namespace: App.Data.ServiceInterfaces
  summary: "\nReturns n. Borrows per day in range start-end.\nWhile the arguments might seems strange, this is the only way to\nenforce getting just date and timezone from the user.\n"
  example: []
  syntax:
    content: Task<(LocalDate time, int value)[]> GetBorrowsByDayAsync(LocalDate start, LocalDate end, DateTimeZone tz)
    parameters:
    - id: start
      type: LocalDate
      description: ''
    - id: end
      type: LocalDate
      description: ''
    - id: tz
      type: DateTimeZone
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{LocalDate,System.Int32}[]}
      description: Borrows per day
    content.vb: Function GetBorrowsByDayAsync(start As LocalDate, [end] As LocalDate, tz As DateTimeZone) As Task(Of (time As LocalDate, value As Integer)())
  overload: App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByDayAsync*
- uid: App.Data.ServiceInterfaces.IUsageChartingService.GetHourlyUsageAsync(IsoDayOfWeek,DateTimeZone)
  commentId: M:App.Data.ServiceInterfaces.IUsageChartingService.GetHourlyUsageAsync(IsoDayOfWeek,DateTimeZone)
  id: GetHourlyUsageAsync(IsoDayOfWeek,DateTimeZone)
  parent: App.Data.ServiceInterfaces.IUsageChartingService
  langs:
  - csharp
  - vb
  name: GetHourlyUsageAsync(IsoDayOfWeek, DateTimeZone)
  nameWithType: IUsageChartingService.GetHourlyUsageAsync(IsoDayOfWeek, DateTimeZone)
  fullName: App.Data.ServiceInterfaces.IUsageChartingService.GetHourlyUsageAsync(IsoDayOfWeek, DateTimeZone)
  type: Method
  source:
    remote:
      path: App/Data/ServiceInterfaces/IUsageChartingService.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: GetHourlyUsageAsync
    path: ../App/Data/ServiceInterfaces/IUsageChartingService.cs
    startLine: 40
  assemblies:
  - App
  namespace: App.Data.ServiceInterfaces
  summary: "\nGets average number of borrows per hour in specified day of week.\n"
  example: []
  syntax:
    content: Task<(LocalTime hour, double value)[]> GetHourlyUsageAsync(IsoDayOfWeek dayOfWeek, DateTimeZone tz)
    parameters:
    - id: dayOfWeek
      type: IsoDayOfWeek
      description: ''
    - id: tz
      type: DateTimeZone
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{LocalTime,System.Double}[]}
      description: Average number of borrows
    content.vb: Function GetHourlyUsageAsync(dayOfWeek As IsoDayOfWeek, tz As DateTimeZone) As Task(Of (hour As LocalTime, value As Double)())
  overload: App.Data.ServiceInterfaces.IUsageChartingService.GetHourlyUsageAsync*
- uid: App.Data.ServiceInterfaces.IUsageChartingService.GetAvgHourlyUsageAsync(DateTimeZone)
  commentId: M:App.Data.ServiceInterfaces.IUsageChartingService.GetAvgHourlyUsageAsync(DateTimeZone)
  id: GetAvgHourlyUsageAsync(DateTimeZone)
  parent: App.Data.ServiceInterfaces.IUsageChartingService
  langs:
  - csharp
  - vb
  name: GetAvgHourlyUsageAsync(DateTimeZone)
  nameWithType: IUsageChartingService.GetAvgHourlyUsageAsync(DateTimeZone)
  fullName: App.Data.ServiceInterfaces.IUsageChartingService.GetAvgHourlyUsageAsync(DateTimeZone)
  type: Method
  source:
    remote:
      path: App/Data/ServiceInterfaces/IUsageChartingService.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: GetAvgHourlyUsageAsync
    path: ../App/Data/ServiceInterfaces/IUsageChartingService.cs
    startLine: 49
  assemblies:
  - App
  namespace: App.Data.ServiceInterfaces
  summary: "\nGets average number of borrows per hour over all of week days.\nIn specified timezone.\n"
  example: []
  syntax:
    content: Task<(LocalTime hour, double value)[]> GetAvgHourlyUsageAsync(DateTimeZone tz)
    parameters:
    - id: tz
      type: DateTimeZone
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{LocalTime,System.Double}[]}
      description: Average number of borrows
    content.vb: Function GetAvgHourlyUsageAsync(tz As DateTimeZone) As Task(Of (hour As LocalTime, value As Double)())
  overload: App.Data.ServiceInterfaces.IUsageChartingService.GetAvgHourlyUsageAsync*
- uid: App.Data.ServiceInterfaces.IUsageChartingService.GetWeekUsageAsync(DateTimeZone)
  commentId: M:App.Data.ServiceInterfaces.IUsageChartingService.GetWeekUsageAsync(DateTimeZone)
  id: GetWeekUsageAsync(DateTimeZone)
  parent: App.Data.ServiceInterfaces.IUsageChartingService
  langs:
  - csharp
  - vb
  name: GetWeekUsageAsync(DateTimeZone)
  nameWithType: IUsageChartingService.GetWeekUsageAsync(DateTimeZone)
  fullName: App.Data.ServiceInterfaces.IUsageChartingService.GetWeekUsageAsync(DateTimeZone)
  type: Method
  source:
    remote:
      path: App/Data/ServiceInterfaces/IUsageChartingService.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: GetWeekUsageAsync
    path: ../App/Data/ServiceInterfaces/IUsageChartingService.cs
    startLine: 57
  assemblies:
  - App
  namespace: App.Data.ServiceInterfaces
  summary: "\nGets average number of borrows per weekday.\nIn specified timezone.\n"
  example: []
  syntax:
    content: Task<(IsoDayOfWeek dayOfWeek, double value)[]> GetWeekUsageAsync(DateTimeZone tz)
    parameters:
    - id: tz
      type: DateTimeZone
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{IsoDayOfWeek,System.Double}[]}
      description: Average number of borrows
    content.vb: Function GetWeekUsageAsync(tz As DateTimeZone) As Task(Of (dayOfWeek As IsoDayOfWeek, value As Double)())
  overload: App.Data.ServiceInterfaces.IUsageChartingService.GetWeekUsageAsync*
references:
- uid: App.Data.ServiceInterfaces
  commentId: N:App.Data.ServiceInterfaces
  name: App.Data.ServiceInterfaces
  nameWithType: App.Data.ServiceInterfaces
  fullName: App.Data.ServiceInterfaces
  spec.csharp:
  - uid: App
    name: App
  - name: .
  - uid: App.Data
    name: Data
  - name: .
  - uid: App.Data.ServiceInterfaces
    name: ServiceInterfaces
  spec.vb:
  - uid: App
    name: App
  - name: .
  - uid: App.Data
    name: Data
  - name: .
  - uid: App.Data.ServiceInterfaces
    name: ServiceInterfaces
- uid: App.Data.ServiceInterfaces.IUsageChartingService.App.Utils.ReflectionExtensions.GetPropertyExpression``1(System.Reflection.PropertyInfo,System.Type)
  commentId: M:App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
  parent: App.Utils.ReflectionExtensions
  definition: App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
  name: GetPropertyExpression<IUsageChartingService>(IUsageChartingService, PropertyInfo, Type)
  nameWithType: ReflectionExtensions.GetPropertyExpression<IUsageChartingService>(IUsageChartingService, PropertyInfo, Type)
  fullName: App.Utils.ReflectionExtensions.GetPropertyExpression<App.Data.ServiceInterfaces.IUsageChartingService>(App.Data.ServiceInterfaces.IUsageChartingService, System.Reflection.PropertyInfo, System.Type)
  nameWithType.vb: ReflectionExtensions.GetPropertyExpression(Of IUsageChartingService)(IUsageChartingService, PropertyInfo, Type)
  fullName.vb: App.Utils.ReflectionExtensions.GetPropertyExpression(Of App.Data.ServiceInterfaces.IUsageChartingService)(App.Data.ServiceInterfaces.IUsageChartingService, System.Reflection.PropertyInfo, System.Type)
  name.vb: GetPropertyExpression(Of IUsageChartingService)(IUsageChartingService, PropertyInfo, Type)
  spec.csharp:
  - uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(App.Data.ServiceInterfaces.IUsageChartingService,System.Reflection.PropertyInfo,System.Type)
    name: GetPropertyExpression
  - name: <
  - uid: App.Data.ServiceInterfaces.IUsageChartingService
    name: IUsageChartingService
  - name: '>'
  - name: (
  - uid: App.Data.ServiceInterfaces.IUsageChartingService
    name: IUsageChartingService
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(App.Data.ServiceInterfaces.IUsageChartingService,System.Reflection.PropertyInfo,System.Type)
    name: GetPropertyExpression
  - name: (
  - name: Of
  - name: " "
  - uid: App.Data.ServiceInterfaces.IUsageChartingService
    name: IUsageChartingService
  - name: )
  - name: (
  - uid: App.Data.ServiceInterfaces.IUsageChartingService
    name: IUsageChartingService
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: App.Data.ServiceInterfaces.IUsageChartingService.App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(System.Object,System.Reflection.PropertyInfo,System.Type)
  commentId: M:App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
  parent: App.Utils.ReflectionExtensions
  definition: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
  name: GetSetPropertyEventCallback<IUsageChartingService>(IUsageChartingService, object, PropertyInfo, Type)
  nameWithType: ReflectionExtensions.GetSetPropertyEventCallback<IUsageChartingService>(IUsageChartingService, object, PropertyInfo, Type)
  fullName: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback<App.Data.ServiceInterfaces.IUsageChartingService>(App.Data.ServiceInterfaces.IUsageChartingService, object, System.Reflection.PropertyInfo, System.Type)
  nameWithType.vb: ReflectionExtensions.GetSetPropertyEventCallback(Of IUsageChartingService)(IUsageChartingService, Object, PropertyInfo, Type)
  fullName.vb: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback(Of App.Data.ServiceInterfaces.IUsageChartingService)(App.Data.ServiceInterfaces.IUsageChartingService, Object, System.Reflection.PropertyInfo, System.Type)
  name.vb: GetSetPropertyEventCallback(Of IUsageChartingService)(IUsageChartingService, Object, PropertyInfo, Type)
  spec.csharp:
  - uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(App.Data.ServiceInterfaces.IUsageChartingService,System.Object,System.Reflection.PropertyInfo,System.Type)
    name: GetSetPropertyEventCallback
  - name: <
  - uid: App.Data.ServiceInterfaces.IUsageChartingService
    name: IUsageChartingService
  - name: '>'
  - name: (
  - uid: App.Data.ServiceInterfaces.IUsageChartingService
    name: IUsageChartingService
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(App.Data.ServiceInterfaces.IUsageChartingService,System.Object,System.Reflection.PropertyInfo,System.Type)
    name: GetSetPropertyEventCallback
  - name: (
  - name: Of
  - name: " "
  - uid: App.Data.ServiceInterfaces.IUsageChartingService
    name: IUsageChartingService
  - name: )
  - name: (
  - uid: App.Data.ServiceInterfaces.IUsageChartingService
    name: IUsageChartingService
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
  commentId: M:App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
  isExternal: true
  name: GetPropertyExpression<T>(T, PropertyInfo, Type)
  nameWithType: ReflectionExtensions.GetPropertyExpression<T>(T, PropertyInfo, Type)
  fullName: App.Utils.ReflectionExtensions.GetPropertyExpression<T>(T, System.Reflection.PropertyInfo, System.Type)
  nameWithType.vb: ReflectionExtensions.GetPropertyExpression(Of T)(T, PropertyInfo, Type)
  fullName.vb: App.Utils.ReflectionExtensions.GetPropertyExpression(Of T)(T, System.Reflection.PropertyInfo, System.Type)
  name.vb: GetPropertyExpression(Of T)(T, PropertyInfo, Type)
  spec.csharp:
  - uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
    name: GetPropertyExpression
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
    name: GetPropertyExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: App.Utils.ReflectionExtensions
  commentId: T:App.Utils.ReflectionExtensions
  parent: App.Utils
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: App.Utils.ReflectionExtensions
- uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
  commentId: M:App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
  isExternal: true
  name: GetSetPropertyEventCallback<T>(T, object, PropertyInfo, Type)
  nameWithType: ReflectionExtensions.GetSetPropertyEventCallback<T>(T, object, PropertyInfo, Type)
  fullName: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback<T>(T, object, System.Reflection.PropertyInfo, System.Type)
  nameWithType.vb: ReflectionExtensions.GetSetPropertyEventCallback(Of T)(T, Object, PropertyInfo, Type)
  fullName.vb: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback(Of T)(T, Object, System.Reflection.PropertyInfo, System.Type)
  name.vb: GetSetPropertyEventCallback(Of T)(T, Object, PropertyInfo, Type)
  spec.csharp:
  - uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
    name: GetSetPropertyEventCallback
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
    name: GetSetPropertyEventCallback
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: App.Utils
  commentId: N:App.Utils
  name: App.Utils
  nameWithType: App.Utils
  fullName: App.Utils
  spec.csharp:
  - uid: App
    name: App
  - name: .
  - uid: App.Utils
    name: Utils
  spec.vb:
  - uid: App
    name: App
  - name: .
  - uid: App.Utils
    name: Utils
- uid: App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByHourAsync*
  commentId: Overload:App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByHourAsync
  name: GetBorrowsByHourAsync
  nameWithType: IUsageChartingService.GetBorrowsByHourAsync
  fullName: App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByHourAsync
- uid: LocalDate
  isExternal: true
  name: LocalDate
  nameWithType: LocalDate
  fullName: LocalDate
- uid: DateTimeZone
  isExternal: true
  name: DateTimeZone
  nameWithType: DateTimeZone
  fullName: DateTimeZone
- uid: System.Threading.Tasks.Task{System.ValueTuple{LocalTime,System.Int32}[]}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{LocalTime,System.Int32}[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<(LocalTime hour, int value)[]>
  nameWithType: Task<(LocalTime hour, int value)[]>
  fullName: System.Threading.Tasks.Task<(LocalTime hour, int value)[]>
  nameWithType.vb: Task(Of (hour As LocalTime, value As Integer)())
  fullName.vb: System.Threading.Tasks.Task(Of (hour As LocalTime, value As Integer)())
  name.vb: Task(Of (hour As LocalTime, value As Integer)())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: (
  - uid: LocalTime
    name: LocalTime
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{LocalTime,System.Int32}.hour
    name: hour
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{LocalTime,System.Int32}.value
    name: value
  - name: )
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{LocalTime,System.Int32}.hour
    name: hour
  - name: " "
  - name: As
  - name: " "
  - uid: LocalTime
    name: LocalTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.ValueTuple{LocalTime,System.Int32}.value
    name: value
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: (
  - name: )
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
- uid: App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByDayAsync*
  commentId: Overload:App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByDayAsync
  name: GetBorrowsByDayAsync
  nameWithType: IUsageChartingService.GetBorrowsByDayAsync
  fullName: App.Data.ServiceInterfaces.IUsageChartingService.GetBorrowsByDayAsync
- uid: System.Threading.Tasks.Task{System.ValueTuple{LocalDate,System.Int32}[]}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{LocalDate,System.Int32}[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<(LocalDate time, int value)[]>
  nameWithType: Task<(LocalDate time, int value)[]>
  fullName: System.Threading.Tasks.Task<(LocalDate time, int value)[]>
  nameWithType.vb: Task(Of (time As LocalDate, value As Integer)())
  fullName.vb: System.Threading.Tasks.Task(Of (time As LocalDate, value As Integer)())
  name.vb: Task(Of (time As LocalDate, value As Integer)())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: (
  - uid: LocalDate
    name: LocalDate
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{LocalDate,System.Int32}.time
    name: time
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{LocalDate,System.Int32}.value
    name: value
  - name: )
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{LocalDate,System.Int32}.time
    name: time
  - name: " "
  - name: As
  - name: " "
  - uid: LocalDate
    name: LocalDate
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.ValueTuple{LocalDate,System.Int32}.value
    name: value
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
  - name: (
  - name: )
  - name: )
- uid: App.Data.ServiceInterfaces.IUsageChartingService.GetHourlyUsageAsync*
  commentId: Overload:App.Data.ServiceInterfaces.IUsageChartingService.GetHourlyUsageAsync
  name: GetHourlyUsageAsync
  nameWithType: IUsageChartingService.GetHourlyUsageAsync
  fullName: App.Data.ServiceInterfaces.IUsageChartingService.GetHourlyUsageAsync
- uid: IsoDayOfWeek
  isExternal: true
  name: IsoDayOfWeek
  nameWithType: IsoDayOfWeek
  fullName: IsoDayOfWeek
- uid: System.Threading.Tasks.Task{System.ValueTuple{LocalTime,System.Double}[]}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{LocalTime,System.Double}[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<(LocalTime hour, double value)[]>
  nameWithType: Task<(LocalTime hour, double value)[]>
  fullName: System.Threading.Tasks.Task<(LocalTime hour, double value)[]>
  nameWithType.vb: Task(Of (hour As LocalTime, value As Double)())
  fullName.vb: System.Threading.Tasks.Task(Of (hour As LocalTime, value As Double)())
  name.vb: Task(Of (hour As LocalTime, value As Double)())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: (
  - uid: LocalTime
    name: LocalTime
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{LocalTime,System.Double}.hour
    name: hour
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{LocalTime,System.Double}.value
    name: value
  - name: )
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{LocalTime,System.Double}.hour
    name: hour
  - name: " "
  - name: As
  - name: " "
  - uid: LocalTime
    name: LocalTime
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.ValueTuple{LocalTime,System.Double}.value
    name: value
  - name: " "
  - name: As
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: )
  - name: (
  - name: )
  - name: )
- uid: App.Data.ServiceInterfaces.IUsageChartingService.GetAvgHourlyUsageAsync*
  commentId: Overload:App.Data.ServiceInterfaces.IUsageChartingService.GetAvgHourlyUsageAsync
  name: GetAvgHourlyUsageAsync
  nameWithType: IUsageChartingService.GetAvgHourlyUsageAsync
  fullName: App.Data.ServiceInterfaces.IUsageChartingService.GetAvgHourlyUsageAsync
- uid: App.Data.ServiceInterfaces.IUsageChartingService.GetWeekUsageAsync*
  commentId: Overload:App.Data.ServiceInterfaces.IUsageChartingService.GetWeekUsageAsync
  name: GetWeekUsageAsync
  nameWithType: IUsageChartingService.GetWeekUsageAsync
  fullName: App.Data.ServiceInterfaces.IUsageChartingService.GetWeekUsageAsync
- uid: System.Threading.Tasks.Task{System.ValueTuple{IsoDayOfWeek,System.Double}[]}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{IsoDayOfWeek,System.Double}[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<(IsoDayOfWeek dayOfWeek, double value)[]>
  nameWithType: Task<(IsoDayOfWeek dayOfWeek, double value)[]>
  fullName: System.Threading.Tasks.Task<(IsoDayOfWeek dayOfWeek, double value)[]>
  nameWithType.vb: Task(Of (dayOfWeek As IsoDayOfWeek, value As Double)())
  fullName.vb: System.Threading.Tasks.Task(Of (dayOfWeek As IsoDayOfWeek, value As Double)())
  name.vb: Task(Of (dayOfWeek As IsoDayOfWeek, value As Double)())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: (
  - uid: IsoDayOfWeek
    name: IsoDayOfWeek
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{IsoDayOfWeek,System.Double}.dayOfWeek
    name: dayOfWeek
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{IsoDayOfWeek,System.Double}.value
    name: value
  - name: )
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{IsoDayOfWeek,System.Double}.dayOfWeek
    name: dayOfWeek
  - name: " "
  - name: As
  - name: " "
  - uid: IsoDayOfWeek
    name: IsoDayOfWeek
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.ValueTuple{IsoDayOfWeek,System.Double}.value
    name: value
  - name: " "
  - name: As
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
  - name: )
  - name: (
  - name: )
  - name: )
