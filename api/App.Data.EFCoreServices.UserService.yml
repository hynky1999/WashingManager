### YamlMime:ManagedReference
items:
- uid: App.Data.EFCoreServices.UserService
  commentId: T:App.Data.EFCoreServices.UserService
  id: UserService
  parent: App.Data.EFCoreServices
  children:
  - App.Data.EFCoreServices.UserService.#ctor(IDbContextFactory{App.Data.ApplicationDbContext},App.Data.Constants.IRates,App.Data.ServiceInterfaces.ICurrencyService)
  - App.Data.EFCoreServices.UserService.GetNameAndSurname(System.Security.Claims.ClaimsPrincipal)
  - App.Data.EFCoreServices.UserService.GetUserCashAsync(System.Security.Claims.ClaimsPrincipal)
  - App.Data.EFCoreServices.UserService.ModifyUserCashAsync(App.Data.ApplicationDbContext,System.Int32,App.Data.Constants.Money)
  - App.Data.EFCoreServices.UserService.ModifyUserCashAsync(System.Int32,App.Data.Constants.Money)
  langs:
  - csharp
  - vb
  name: UserService
  nameWithType: UserService
  fullName: App.Data.EFCoreServices.UserService
  type: Class
  source:
    remote:
      path: App/Data/EFCoreServices/UserService.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: UserService
    path: ../App/Data/EFCoreServices/UserService.cs
    startLine: 12
  assemblies:
  - App
  namespace: App.Data.EFCoreServices
  summary: "\nEF Core implementation of <xref href=\"App.Data.ServiceInterfaces.IUserService\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class UserService : IUserService'
    content.vb: Public Class UserService Implements IUserService
  inheritance:
  - System.Object
  implements:
  - App.Data.ServiceInterfaces.IUserService
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - App.Data.EFCoreServices.UserService.App.Utils.ReflectionExtensions.GetPropertyExpression``1(System.Reflection.PropertyInfo,System.Type)
  - App.Data.EFCoreServices.UserService.App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(System.Object,System.Reflection.PropertyInfo,System.Type)
- uid: App.Data.EFCoreServices.UserService.#ctor(IDbContextFactory{App.Data.ApplicationDbContext},App.Data.Constants.IRates,App.Data.ServiceInterfaces.ICurrencyService)
  commentId: M:App.Data.EFCoreServices.UserService.#ctor(IDbContextFactory{App.Data.ApplicationDbContext},App.Data.Constants.IRates,App.Data.ServiceInterfaces.ICurrencyService)
  id: '#ctor(IDbContextFactory{App.Data.ApplicationDbContext},App.Data.Constants.IRates,App.Data.ServiceInterfaces.ICurrencyService)'
  parent: App.Data.EFCoreServices.UserService
  langs:
  - csharp
  - vb
  name: UserService(IDbContextFactory<ApplicationDbContext>, IRates, ICurrencyService)
  nameWithType: UserService.UserService(IDbContextFactory<ApplicationDbContext>, IRates, ICurrencyService)
  fullName: App.Data.EFCoreServices.UserService.UserService(IDbContextFactory<App.Data.ApplicationDbContext>, App.Data.Constants.IRates, App.Data.ServiceInterfaces.ICurrencyService)
  type: Constructor
  source:
    remote:
      path: App/Data/EFCoreServices/UserService.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: .ctor
    path: ../App/Data/EFCoreServices/UserService.cs
    startLine: 25
  assemblies:
  - App
  namespace: App.Data.EFCoreServices
  summary: "\nConstructor.\n"
  example: []
  syntax:
    content: public UserService(IDbContextFactory<ApplicationDbContext> dbFactory, IRates rates, ICurrencyService currencyService)
    parameters:
    - id: dbFactory
      type: IDbContextFactory{App.Data.ApplicationDbContext}
      description: ''
    - id: rates
      type: App.Data.Constants.IRates
      description: ''
    - id: currencyService
      type: App.Data.ServiceInterfaces.ICurrencyService
      description: ''
    content.vb: Public Sub New(dbFactory As IDbContextFactory(Of ApplicationDbContext), rates As IRates, currencyService As ICurrencyService)
  overload: App.Data.EFCoreServices.UserService.#ctor*
  nameWithType.vb: UserService.New(IDbContextFactory(Of ApplicationDbContext), IRates, ICurrencyService)
  fullName.vb: App.Data.EFCoreServices.UserService.New(IDbContextFactory(Of App.Data.ApplicationDbContext), App.Data.Constants.IRates, App.Data.ServiceInterfaces.ICurrencyService)
  name.vb: New(IDbContextFactory(Of ApplicationDbContext), IRates, ICurrencyService)
- uid: App.Data.EFCoreServices.UserService.GetNameAndSurname(System.Security.Claims.ClaimsPrincipal)
  commentId: M:App.Data.EFCoreServices.UserService.GetNameAndSurname(System.Security.Claims.ClaimsPrincipal)
  id: GetNameAndSurname(System.Security.Claims.ClaimsPrincipal)
  parent: App.Data.EFCoreServices.UserService
  langs:
  - csharp
  - vb
  name: GetNameAndSurname(ClaimsPrincipal)
  nameWithType: UserService.GetNameAndSurname(ClaimsPrincipal)
  fullName: App.Data.EFCoreServices.UserService.GetNameAndSurname(System.Security.Claims.ClaimsPrincipal)
  type: Method
  source:
    remote:
      path: App/Data/EFCoreServices/UserService.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: GetNameAndSurname
    path: ../App/Data/EFCoreServices/UserService.cs
    startLine: 35
  assemblies:
  - App
  namespace: App.Data.EFCoreServices
  summary: "\nGets name and surname of the user\n"
  example: []
  syntax:
    content: public Task<(string name, string surname)?> GetNameAndSurname(ClaimsPrincipal user)
    parameters:
    - id: user
      type: System.Security.Claims.ClaimsPrincipal
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Nullable{System.ValueTuple{System.String,System.String}}}
      description: Name and surname if user found
    content.vb: Public Function GetNameAndSurname(user As ClaimsPrincipal) As Task(Of (name As String, surname As String)?)
  overload: App.Data.EFCoreServices.UserService.GetNameAndSurname*
  implements:
  - App.Data.ServiceInterfaces.IUserService.GetNameAndSurname(System.Security.Claims.ClaimsPrincipal)
- uid: App.Data.EFCoreServices.UserService.ModifyUserCashAsync(App.Data.ApplicationDbContext,System.Int32,App.Data.Constants.Money)
  commentId: M:App.Data.EFCoreServices.UserService.ModifyUserCashAsync(App.Data.ApplicationDbContext,System.Int32,App.Data.Constants.Money)
  id: ModifyUserCashAsync(App.Data.ApplicationDbContext,System.Int32,App.Data.Constants.Money)
  parent: App.Data.EFCoreServices.UserService
  langs:
  - csharp
  - vb
  name: ModifyUserCashAsync(ApplicationDbContext, int, Money)
  nameWithType: UserService.ModifyUserCashAsync(ApplicationDbContext, int, Money)
  fullName: App.Data.EFCoreServices.UserService.ModifyUserCashAsync(App.Data.ApplicationDbContext, int, App.Data.Constants.Money)
  type: Method
  source:
    remote:
      path: App/Data/EFCoreServices/UserService.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: ModifyUserCashAsync
    path: ../App/Data/EFCoreServices/UserService.cs
    startLine: 53
  assemblies:
  - App
  namespace: App.Data.EFCoreServices
  summary: "\n<xref href=\"App.Data.ServiceInterfaces.IUserService.ModifyUserCashAsync(System.Int32%2cApp.Data.Constants.Money)\" data-throw-if-not-resolved=\"false\"></xref>\nUnlike the other method, this just updates provided context\nGood for transactions\n"
  example: []
  syntax:
    content: public Task<Money> ModifyUserCashAsync(ApplicationDbContext db, int id, Money money)
    parameters:
    - id: db
      type: App.Data.ApplicationDbContext
      description: ''
    - id: id
      type: System.Int32
      description: ''
    - id: money
      type: App.Data.Constants.Money
      description: ''
    return:
      type: System.Threading.Tasks.Task{App.Data.Constants.Money}
      description: ''
    content.vb: Public Function ModifyUserCashAsync(db As ApplicationDbContext, id As Integer, money As Money) As Task(Of Money)
  overload: App.Data.EFCoreServices.UserService.ModifyUserCashAsync*
  implements:
  - App.Data.ServiceInterfaces.IUserService.ModifyUserCashAsync(App.Data.ApplicationDbContext,System.Int32,App.Data.Constants.Money)
  nameWithType.vb: UserService.ModifyUserCashAsync(ApplicationDbContext, Integer, Money)
  fullName.vb: App.Data.EFCoreServices.UserService.ModifyUserCashAsync(App.Data.ApplicationDbContext, Integer, App.Data.Constants.Money)
  name.vb: ModifyUserCashAsync(ApplicationDbContext, Integer, Money)
- uid: App.Data.EFCoreServices.UserService.ModifyUserCashAsync(System.Int32,App.Data.Constants.Money)
  commentId: M:App.Data.EFCoreServices.UserService.ModifyUserCashAsync(System.Int32,App.Data.Constants.Money)
  id: ModifyUserCashAsync(System.Int32,App.Data.Constants.Money)
  parent: App.Data.EFCoreServices.UserService
  langs:
  - csharp
  - vb
  name: ModifyUserCashAsync(int, Money)
  nameWithType: UserService.ModifyUserCashAsync(int, Money)
  fullName: App.Data.EFCoreServices.UserService.ModifyUserCashAsync(int, App.Data.Constants.Money)
  type: Method
  source:
    remote:
      path: App/Data/EFCoreServices/UserService.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: ModifyUserCashAsync
    path: ../App/Data/EFCoreServices/UserService.cs
    startLine: 86
  assemblies:
  - App
  namespace: App.Data.EFCoreServices
  summary: "\nModify user cash\n"
  example: []
  syntax:
    content: public Task<Money> ModifyUserCashAsync(int id, Money money)
    parameters:
    - id: id
      type: System.Int32
      description: ''
    - id: money
      type: App.Data.Constants.Money
      description: ''
    return:
      type: System.Threading.Tasks.Task{App.Data.Constants.Money}
      description: ''
    content.vb: Public Function ModifyUserCashAsync(id As Integer, money As Money) As Task(Of Money)
  overload: App.Data.EFCoreServices.UserService.ModifyUserCashAsync*
  implements:
  - App.Data.ServiceInterfaces.IUserService.ModifyUserCashAsync(System.Int32,App.Data.Constants.Money)
  nameWithType.vb: UserService.ModifyUserCashAsync(Integer, Money)
  fullName.vb: App.Data.EFCoreServices.UserService.ModifyUserCashAsync(Integer, App.Data.Constants.Money)
  name.vb: ModifyUserCashAsync(Integer, Money)
- uid: App.Data.EFCoreServices.UserService.GetUserCashAsync(System.Security.Claims.ClaimsPrincipal)
  commentId: M:App.Data.EFCoreServices.UserService.GetUserCashAsync(System.Security.Claims.ClaimsPrincipal)
  id: GetUserCashAsync(System.Security.Claims.ClaimsPrincipal)
  parent: App.Data.EFCoreServices.UserService
  langs:
  - csharp
  - vb
  name: GetUserCashAsync(ClaimsPrincipal)
  nameWithType: UserService.GetUserCashAsync(ClaimsPrincipal)
  fullName: App.Data.EFCoreServices.UserService.GetUserCashAsync(System.Security.Claims.ClaimsPrincipal)
  type: Method
  source:
    remote:
      path: App/Data/EFCoreServices/UserService.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: GetUserCashAsync
    path: ../App/Data/EFCoreServices/UserService.cs
    startLine: 95
  assemblies:
  - App
  namespace: App.Data.EFCoreServices
  summary: "\nReturns the user&apos;s cash\n"
  example: []
  syntax:
    content: public Task<Money> GetUserCashAsync(ClaimsPrincipal user)
    parameters:
    - id: user
      type: System.Security.Claims.ClaimsPrincipal
      description: ''
    return:
      type: System.Threading.Tasks.Task{App.Data.Constants.Money}
      description: ''
    content.vb: Public Function GetUserCashAsync(user As ClaimsPrincipal) As Task(Of Money)
  overload: App.Data.EFCoreServices.UserService.GetUserCashAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: If user doesn&apos;t exist
  implements:
  - App.Data.ServiceInterfaces.IUserService.GetUserCashAsync(System.Security.Claims.ClaimsPrincipal)
references:
- uid: App.Data.ServiceInterfaces.IUserService
  commentId: T:App.Data.ServiceInterfaces.IUserService
  parent: App.Data.ServiceInterfaces
  name: IUserService
  nameWithType: IUserService
  fullName: App.Data.ServiceInterfaces.IUserService
- uid: App.Data.EFCoreServices
  commentId: N:App.Data.EFCoreServices
  name: App.Data.EFCoreServices
  nameWithType: App.Data.EFCoreServices
  fullName: App.Data.EFCoreServices
  spec.csharp:
  - uid: App
    name: App
  - name: .
  - uid: App.Data
    name: Data
  - name: .
  - uid: App.Data.EFCoreServices
    name: EFCoreServices
  spec.vb:
  - uid: App
    name: App
  - name: .
  - uid: App.Data
    name: Data
  - name: .
  - uid: App.Data.EFCoreServices
    name: EFCoreServices
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: App.Data.EFCoreServices.UserService.App.Utils.ReflectionExtensions.GetPropertyExpression``1(System.Reflection.PropertyInfo,System.Type)
  commentId: M:App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
  parent: App.Utils.ReflectionExtensions
  definition: App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
  name: GetPropertyExpression<UserService>(UserService, PropertyInfo, Type)
  nameWithType: ReflectionExtensions.GetPropertyExpression<UserService>(UserService, PropertyInfo, Type)
  fullName: App.Utils.ReflectionExtensions.GetPropertyExpression<App.Data.EFCoreServices.UserService>(App.Data.EFCoreServices.UserService, System.Reflection.PropertyInfo, System.Type)
  nameWithType.vb: ReflectionExtensions.GetPropertyExpression(Of UserService)(UserService, PropertyInfo, Type)
  fullName.vb: App.Utils.ReflectionExtensions.GetPropertyExpression(Of App.Data.EFCoreServices.UserService)(App.Data.EFCoreServices.UserService, System.Reflection.PropertyInfo, System.Type)
  name.vb: GetPropertyExpression(Of UserService)(UserService, PropertyInfo, Type)
  spec.csharp:
  - uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(App.Data.EFCoreServices.UserService,System.Reflection.PropertyInfo,System.Type)
    name: GetPropertyExpression
  - name: <
  - uid: App.Data.EFCoreServices.UserService
    name: UserService
  - name: '>'
  - name: (
  - uid: App.Data.EFCoreServices.UserService
    name: UserService
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(App.Data.EFCoreServices.UserService,System.Reflection.PropertyInfo,System.Type)
    name: GetPropertyExpression
  - name: (
  - name: Of
  - name: " "
  - uid: App.Data.EFCoreServices.UserService
    name: UserService
  - name: )
  - name: (
  - uid: App.Data.EFCoreServices.UserService
    name: UserService
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: App.Data.EFCoreServices.UserService.App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(System.Object,System.Reflection.PropertyInfo,System.Type)
  commentId: M:App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
  parent: App.Utils.ReflectionExtensions
  definition: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
  name: GetSetPropertyEventCallback<UserService>(UserService, object, PropertyInfo, Type)
  nameWithType: ReflectionExtensions.GetSetPropertyEventCallback<UserService>(UserService, object, PropertyInfo, Type)
  fullName: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback<App.Data.EFCoreServices.UserService>(App.Data.EFCoreServices.UserService, object, System.Reflection.PropertyInfo, System.Type)
  nameWithType.vb: ReflectionExtensions.GetSetPropertyEventCallback(Of UserService)(UserService, Object, PropertyInfo, Type)
  fullName.vb: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback(Of App.Data.EFCoreServices.UserService)(App.Data.EFCoreServices.UserService, Object, System.Reflection.PropertyInfo, System.Type)
  name.vb: GetSetPropertyEventCallback(Of UserService)(UserService, Object, PropertyInfo, Type)
  spec.csharp:
  - uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(App.Data.EFCoreServices.UserService,System.Object,System.Reflection.PropertyInfo,System.Type)
    name: GetSetPropertyEventCallback
  - name: <
  - uid: App.Data.EFCoreServices.UserService
    name: UserService
  - name: '>'
  - name: (
  - uid: App.Data.EFCoreServices.UserService
    name: UserService
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(App.Data.EFCoreServices.UserService,System.Object,System.Reflection.PropertyInfo,System.Type)
    name: GetSetPropertyEventCallback
  - name: (
  - name: Of
  - name: " "
  - uid: App.Data.EFCoreServices.UserService
    name: UserService
  - name: )
  - name: (
  - uid: App.Data.EFCoreServices.UserService
    name: UserService
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: App.Data.ServiceInterfaces
  commentId: N:App.Data.ServiceInterfaces
  name: App.Data.ServiceInterfaces
  nameWithType: App.Data.ServiceInterfaces
  fullName: App.Data.ServiceInterfaces
  spec.csharp:
  - uid: App
    name: App
  - name: .
  - uid: App.Data
    name: Data
  - name: .
  - uid: App.Data.ServiceInterfaces
    name: ServiceInterfaces
  spec.vb:
  - uid: App
    name: App
  - name: .
  - uid: App.Data
    name: Data
  - name: .
  - uid: App.Data.ServiceInterfaces
    name: ServiceInterfaces
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
  commentId: M:App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
  isExternal: true
  name: GetPropertyExpression<T>(T, PropertyInfo, Type)
  nameWithType: ReflectionExtensions.GetPropertyExpression<T>(T, PropertyInfo, Type)
  fullName: App.Utils.ReflectionExtensions.GetPropertyExpression<T>(T, System.Reflection.PropertyInfo, System.Type)
  nameWithType.vb: ReflectionExtensions.GetPropertyExpression(Of T)(T, PropertyInfo, Type)
  fullName.vb: App.Utils.ReflectionExtensions.GetPropertyExpression(Of T)(T, System.Reflection.PropertyInfo, System.Type)
  name.vb: GetPropertyExpression(Of T)(T, PropertyInfo, Type)
  spec.csharp:
  - uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
    name: GetPropertyExpression
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
    name: GetPropertyExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: App.Utils.ReflectionExtensions
  commentId: T:App.Utils.ReflectionExtensions
  parent: App.Utils
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: App.Utils.ReflectionExtensions
- uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
  commentId: M:App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
  isExternal: true
  name: GetSetPropertyEventCallback<T>(T, object, PropertyInfo, Type)
  nameWithType: ReflectionExtensions.GetSetPropertyEventCallback<T>(T, object, PropertyInfo, Type)
  fullName: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback<T>(T, object, System.Reflection.PropertyInfo, System.Type)
  nameWithType.vb: ReflectionExtensions.GetSetPropertyEventCallback(Of T)(T, Object, PropertyInfo, Type)
  fullName.vb: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback(Of T)(T, Object, System.Reflection.PropertyInfo, System.Type)
  name.vb: GetSetPropertyEventCallback(Of T)(T, Object, PropertyInfo, Type)
  spec.csharp:
  - uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
    name: GetSetPropertyEventCallback
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
    name: GetSetPropertyEventCallback
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: App.Utils
  commentId: N:App.Utils
  name: App.Utils
  nameWithType: App.Utils
  fullName: App.Utils
  spec.csharp:
  - uid: App
    name: App
  - name: .
  - uid: App.Utils
    name: Utils
  spec.vb:
  - uid: App
    name: App
  - name: .
  - uid: App.Utils
    name: Utils
- uid: App.Data.EFCoreServices.UserService.#ctor*
  commentId: Overload:App.Data.EFCoreServices.UserService.#ctor
  name: UserService
  nameWithType: UserService.UserService
  fullName: App.Data.EFCoreServices.UserService.UserService
  nameWithType.vb: UserService.New
  fullName.vb: App.Data.EFCoreServices.UserService.New
  name.vb: New
- uid: IDbContextFactory{App.Data.ApplicationDbContext}
  commentId: '!:IDbContextFactory{App.Data.ApplicationDbContext}'
  definition: IDbContextFactory`1
  name: IDbContextFactory<ApplicationDbContext>
  nameWithType: IDbContextFactory<ApplicationDbContext>
  fullName: IDbContextFactory<App.Data.ApplicationDbContext>
  nameWithType.vb: IDbContextFactory(Of ApplicationDbContext)
  fullName.vb: IDbContextFactory(Of App.Data.ApplicationDbContext)
  name.vb: IDbContextFactory(Of ApplicationDbContext)
  spec.csharp:
  - uid: IDbContextFactory`1
    name: IDbContextFactory
    isExternal: true
  - name: <
  - uid: App.Data.ApplicationDbContext
    name: ApplicationDbContext
  - name: '>'
  spec.vb:
  - uid: IDbContextFactory`1
    name: IDbContextFactory
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: App.Data.ApplicationDbContext
    name: ApplicationDbContext
  - name: )
- uid: App.Data.Constants.IRates
  commentId: T:App.Data.Constants.IRates
  parent: App.Data.Constants
  name: IRates
  nameWithType: IRates
  fullName: App.Data.Constants.IRates
- uid: App.Data.ServiceInterfaces.ICurrencyService
  commentId: T:App.Data.ServiceInterfaces.ICurrencyService
  parent: App.Data.ServiceInterfaces
  name: ICurrencyService
  nameWithType: ICurrencyService
  fullName: App.Data.ServiceInterfaces.ICurrencyService
- uid: IDbContextFactory`1
  isExternal: true
  name: IDbContextFactory<>
  nameWithType: IDbContextFactory<>
  fullName: IDbContextFactory<>
  nameWithType.vb: IDbContextFactory(Of )
  fullName.vb: IDbContextFactory(Of )
  name.vb: IDbContextFactory(Of )
  spec.csharp:
  - uid: IDbContextFactory`1
    name: IDbContextFactory
    isExternal: true
  - name: <
  - name: ''
  - name: '>'
  spec.vb:
  - uid: IDbContextFactory`1
    name: IDbContextFactory
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ''
  - name: )
- uid: App.Data.Constants
  commentId: N:App.Data.Constants
  name: App.Data.Constants
  nameWithType: App.Data.Constants
  fullName: App.Data.Constants
  spec.csharp:
  - uid: App
    name: App
  - name: .
  - uid: App.Data
    name: Data
  - name: .
  - uid: App.Data.Constants
    name: Constants
  spec.vb:
  - uid: App
    name: App
  - name: .
  - uid: App.Data
    name: Data
  - name: .
  - uid: App.Data.Constants
    name: Constants
- uid: App.Data.EFCoreServices.UserService.GetNameAndSurname*
  commentId: Overload:App.Data.EFCoreServices.UserService.GetNameAndSurname
  name: GetNameAndSurname
  nameWithType: UserService.GetNameAndSurname
  fullName: App.Data.EFCoreServices.UserService.GetNameAndSurname
- uid: App.Data.ServiceInterfaces.IUserService.GetNameAndSurname(System.Security.Claims.ClaimsPrincipal)
  commentId: M:App.Data.ServiceInterfaces.IUserService.GetNameAndSurname(System.Security.Claims.ClaimsPrincipal)
  parent: App.Data.ServiceInterfaces.IUserService
  isExternal: true
  name: GetNameAndSurname(ClaimsPrincipal)
  nameWithType: IUserService.GetNameAndSurname(ClaimsPrincipal)
  fullName: App.Data.ServiceInterfaces.IUserService.GetNameAndSurname(System.Security.Claims.ClaimsPrincipal)
  spec.csharp:
  - uid: App.Data.ServiceInterfaces.IUserService.GetNameAndSurname(System.Security.Claims.ClaimsPrincipal)
    name: GetNameAndSurname
  - name: (
  - uid: System.Security.Claims.ClaimsPrincipal
    name: ClaimsPrincipal
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Data.ServiceInterfaces.IUserService.GetNameAndSurname(System.Security.Claims.ClaimsPrincipal)
    name: GetNameAndSurname
  - name: (
  - uid: System.Security.Claims.ClaimsPrincipal
    name: ClaimsPrincipal
    isExternal: true
  - name: )
- uid: System.Security.Claims.ClaimsPrincipal
  commentId: T:System.Security.Claims.ClaimsPrincipal
  parent: System.Security.Claims
  isExternal: true
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
- uid: System.Threading.Tasks.Task{System.Nullable{System.ValueTuple{System.String,System.String}}}
  commentId: T:System.Threading.Tasks.Task{System.Nullable{System.ValueTuple{System.String,System.String}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<(string name, string surname)?>
  nameWithType: Task<(string name, string surname)?>
  fullName: System.Threading.Tasks.Task<(string name, string surname)?>
  nameWithType.vb: Task(Of (name As String, surname As String)?)
  fullName.vb: System.Threading.Tasks.Task(Of (name As String, surname As String)?)
  name.vb: Task(Of (name As String, surname As String)?)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: (
  - uid: System.String
    name: string
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{System.String,System.String}.name
    name: name
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
  - name: " "
  - uid: System.ValueTuple{System.String,System.String}.surname
    name: surname
  - name: )
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{System.String,System.String}.name
    name: name
  - name: " "
  - name: As
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.String,System.String}.surname
    name: surname
  - name: " "
  - name: As
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
  - name: '?'
  - name: )
- uid: System.Security.Claims
  commentId: N:System.Security.Claims
  isExternal: true
  name: System.Security.Claims
  nameWithType: System.Security.Claims
  fullName: System.Security.Claims
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Security
    name: Security
    isExternal: true
  - name: .
  - uid: System.Security.Claims
    name: Claims
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Security
    name: Security
    isExternal: true
  - name: .
  - uid: System.Security.Claims
    name: Claims
    isExternal: true
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
- uid: App.Data.EFCoreServices.UserService.ModifyUserCashAsync*
  commentId: Overload:App.Data.EFCoreServices.UserService.ModifyUserCashAsync
  name: ModifyUserCashAsync
  nameWithType: UserService.ModifyUserCashAsync
  fullName: App.Data.EFCoreServices.UserService.ModifyUserCashAsync
- uid: App.Data.ServiceInterfaces.IUserService.ModifyUserCashAsync(App.Data.ApplicationDbContext,System.Int32,App.Data.Constants.Money)
  commentId: M:App.Data.ServiceInterfaces.IUserService.ModifyUserCashAsync(App.Data.ApplicationDbContext,System.Int32,App.Data.Constants.Money)
  parent: App.Data.ServiceInterfaces.IUserService
  isExternal: true
  name: ModifyUserCashAsync(ApplicationDbContext, int, Money)
  nameWithType: IUserService.ModifyUserCashAsync(ApplicationDbContext, int, Money)
  fullName: App.Data.ServiceInterfaces.IUserService.ModifyUserCashAsync(App.Data.ApplicationDbContext, int, App.Data.Constants.Money)
  nameWithType.vb: IUserService.ModifyUserCashAsync(ApplicationDbContext, Integer, Money)
  fullName.vb: App.Data.ServiceInterfaces.IUserService.ModifyUserCashAsync(App.Data.ApplicationDbContext, Integer, App.Data.Constants.Money)
  name.vb: ModifyUserCashAsync(ApplicationDbContext, Integer, Money)
  spec.csharp:
  - uid: App.Data.ServiceInterfaces.IUserService.ModifyUserCashAsync(App.Data.ApplicationDbContext,System.Int32,App.Data.Constants.Money)
    name: ModifyUserCashAsync
  - name: (
  - uid: App.Data.ApplicationDbContext
    name: ApplicationDbContext
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: App.Data.Constants.Money
    name: Money
  - name: )
  spec.vb:
  - uid: App.Data.ServiceInterfaces.IUserService.ModifyUserCashAsync(App.Data.ApplicationDbContext,System.Int32,App.Data.Constants.Money)
    name: ModifyUserCashAsync
  - name: (
  - uid: App.Data.ApplicationDbContext
    name: ApplicationDbContext
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: App.Data.Constants.Money
    name: Money
  - name: )
- uid: App.Data.ApplicationDbContext
  commentId: T:App.Data.ApplicationDbContext
  parent: App.Data
  name: ApplicationDbContext
  nameWithType: ApplicationDbContext
  fullName: App.Data.ApplicationDbContext
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: App.Data.Constants.Money
  commentId: T:App.Data.Constants.Money
  parent: App.Data.Constants
  name: Money
  nameWithType: Money
  fullName: App.Data.Constants.Money
- uid: System.Threading.Tasks.Task{App.Data.Constants.Money}
  commentId: T:System.Threading.Tasks.Task{App.Data.Constants.Money}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Money>
  nameWithType: Task<Money>
  fullName: System.Threading.Tasks.Task<App.Data.Constants.Money>
  nameWithType.vb: Task(Of Money)
  fullName.vb: System.Threading.Tasks.Task(Of App.Data.Constants.Money)
  name.vb: Task(Of Money)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - uid: App.Data.Constants.Money
    name: Money
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: App.Data.Constants.Money
    name: Money
  - name: )
- uid: App.Data
  commentId: N:App.Data
  name: App.Data
  nameWithType: App.Data
  fullName: App.Data
  spec.csharp:
  - uid: App
    name: App
  - name: .
  - uid: App.Data
    name: Data
  spec.vb:
  - uid: App
    name: App
  - name: .
  - uid: App.Data
    name: Data
- uid: App.Data.ServiceInterfaces.IUserService.ModifyUserCashAsync(System.Int32,App.Data.Constants.Money)
  commentId: M:App.Data.ServiceInterfaces.IUserService.ModifyUserCashAsync(System.Int32,App.Data.Constants.Money)
  parent: App.Data.ServiceInterfaces.IUserService
  isExternal: true
  name: ModifyUserCashAsync(int, Money)
  nameWithType: IUserService.ModifyUserCashAsync(int, Money)
  fullName: App.Data.ServiceInterfaces.IUserService.ModifyUserCashAsync(int, App.Data.Constants.Money)
  nameWithType.vb: IUserService.ModifyUserCashAsync(Integer, Money)
  fullName.vb: App.Data.ServiceInterfaces.IUserService.ModifyUserCashAsync(Integer, App.Data.Constants.Money)
  name.vb: ModifyUserCashAsync(Integer, Money)
  spec.csharp:
  - uid: App.Data.ServiceInterfaces.IUserService.ModifyUserCashAsync(System.Int32,App.Data.Constants.Money)
    name: ModifyUserCashAsync
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: ','
  - name: " "
  - uid: App.Data.Constants.Money
    name: Money
  - name: )
  spec.vb:
  - uid: App.Data.ServiceInterfaces.IUserService.ModifyUserCashAsync(System.Int32,App.Data.Constants.Money)
    name: ModifyUserCashAsync
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: ','
  - name: " "
  - uid: App.Data.Constants.Money
    name: Money
  - name: )
- uid: App.Data.EFCoreServices.UserService.GetUserCashAsync*
  commentId: Overload:App.Data.EFCoreServices.UserService.GetUserCashAsync
  name: GetUserCashAsync
  nameWithType: UserService.GetUserCashAsync
  fullName: App.Data.EFCoreServices.UserService.GetUserCashAsync
- uid: App.Data.ServiceInterfaces.IUserService.GetUserCashAsync(System.Security.Claims.ClaimsPrincipal)
  commentId: M:App.Data.ServiceInterfaces.IUserService.GetUserCashAsync(System.Security.Claims.ClaimsPrincipal)
  parent: App.Data.ServiceInterfaces.IUserService
  isExternal: true
  name: GetUserCashAsync(ClaimsPrincipal)
  nameWithType: IUserService.GetUserCashAsync(ClaimsPrincipal)
  fullName: App.Data.ServiceInterfaces.IUserService.GetUserCashAsync(System.Security.Claims.ClaimsPrincipal)
  spec.csharp:
  - uid: App.Data.ServiceInterfaces.IUserService.GetUserCashAsync(System.Security.Claims.ClaimsPrincipal)
    name: GetUserCashAsync
  - name: (
  - uid: System.Security.Claims.ClaimsPrincipal
    name: ClaimsPrincipal
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Data.ServiceInterfaces.IUserService.GetUserCashAsync(System.Security.Claims.ClaimsPrincipal)
    name: GetUserCashAsync
  - name: (
  - uid: System.Security.Claims.ClaimsPrincipal
    name: ClaimsPrincipal
    isExternal: true
  - name: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
