### YamlMime:ManagedReference
items:
- uid: App.Utils.EFExtensions
  commentId: T:App.Utils.EFExtensions
  id: EFExtensions
  parent: App.Utils
  children:
  - App.Utils.EFExtensions.FilterWithExpressions``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])
  - App.Utils.EFExtensions.MakeEager``1(System.Linq.IQueryable{``0},IEntityType,System.String)
  - App.Utils.EFExtensions.SaveChangeAsyncRethrow(DbContext)
  - App.Utils.EFExtensions.SortWithKeys``2(System.Linq.IQueryable{``0},App.Data.Utils.SortOption{``0,``1}[])
  - App.Utils.EFExtensions.TryNTimesAsync(System.Func{System.Threading.Tasks.Task},System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: EFExtensions
  nameWithType: EFExtensions
  fullName: App.Utils.EFExtensions
  type: Class
  source:
    remote:
      path: App/Utils/EFExtensions.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: EFExtensions
    path: ../App/Utils/EFExtensions.cs
    startLine: 14
  assemblies:
  - App
  namespace: App.Utils
  summary: "\nExtension methods for EF Core.\n"
  example: []
  syntax:
    content: public static class EFExtensions
    content.vb: Public Module EFExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: App.Utils.EFExtensions.MakeEager``1(System.Linq.IQueryable{``0},IEntityType,System.String)
  commentId: M:App.Utils.EFExtensions.MakeEager``1(System.Linq.IQueryable{``0},IEntityType,System.String)
  id: MakeEager``1(System.Linq.IQueryable{``0},IEntityType,System.String)
  isExtensionMethod: true
  parent: App.Utils.EFExtensions
  langs:
  - csharp
  - vb
  name: MakeEager<T>(IQueryable<T>, IEntityType, string?)
  nameWithType: EFExtensions.MakeEager<T>(IQueryable<T>, IEntityType, string?)
  fullName: App.Utils.EFExtensions.MakeEager<T>(System.Linq.IQueryable<T>, IEntityType, string?)
  type: Method
  source:
    remote:
      path: App/Utils/EFExtensions.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: MakeEager
    path: ../App/Utils/EFExtensions.cs
    startLine: 25
  assemblies:
  - App
  namespace: App.Utils
  summary: "\nMakes the query to take all related entities of passed entity.\nWill not work if there is a circular reference !\n"
  example: []
  syntax:
    content: 'public static IQueryable<T> MakeEager<T>(this IQueryable<T> query, IEntityType entity, string? parent = null) where T : class'
    parameters:
    - id: query
      type: System.Linq.IQueryable{{T}}
      description: 'Query '
    - id: entity
      type: IEntityType
      description: Entity to get eager
    - id: parent
      type: System.String
      description: parent of entity should be null
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Linq.IQueryable{{T}}
      description: Eager query
    content.vb: Public Shared Function MakeEager(Of T As Class)(query As IQueryable(Of T), entity As IEntityType, parent As String = Nothing) As IQueryable(Of T)
  overload: App.Utils.EFExtensions.MakeEager*
  nameWithType.vb: EFExtensions.MakeEager(Of T)(IQueryable(Of T), IEntityType, String)
  fullName.vb: App.Utils.EFExtensions.MakeEager(Of T)(System.Linq.IQueryable(Of T), IEntityType, String)
  name.vb: MakeEager(Of T)(IQueryable(Of T), IEntityType, String)
- uid: App.Utils.EFExtensions.FilterWithExpressions``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])
  commentId: M:App.Utils.EFExtensions.FilterWithExpressions``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])
  id: FilterWithExpressions``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])
  isExtensionMethod: true
  parent: App.Utils.EFExtensions
  langs:
  - csharp
  - vb
  name: FilterWithExpressions<T>(IQueryable<T>, Expression<Func<T, bool>>[])
  nameWithType: EFExtensions.FilterWithExpressions<T>(IQueryable<T>, Expression<Func<T, bool>>[])
  fullName: App.Utils.EFExtensions.FilterWithExpressions<T>(System.Linq.IQueryable<T>, System.Linq.Expressions.Expression<System.Func<T, bool>>[])
  type: Method
  source:
    remote:
      path: App/Utils/EFExtensions.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: FilterWithExpressions
    path: ../App/Utils/EFExtensions.cs
    startLine: 53
  assemblies:
  - App
  namespace: App.Utils
  summary: "\nFilters the query based on the passed filter.\n"
  example: []
  syntax:
    content: 'public static IQueryable<T> FilterWithExpressions<T>(this IQueryable<T> query, Expression<Func<T, bool>>[] filters) where T : class'
    parameters:
    - id: query
      type: System.Linq.IQueryable{{T}}
      description: Query to filter
    - id: filters
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}[]
      description: Function to filter by
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Linq.IQueryable{{T}}
      description: Filtered query
    content.vb: Public Shared Function FilterWithExpressions(Of T As Class)(query As IQueryable(Of T), filters As Expression(Of Func(Of T, Boolean))()) As IQueryable(Of T)
  overload: App.Utils.EFExtensions.FilterWithExpressions*
  nameWithType.vb: EFExtensions.FilterWithExpressions(Of T)(IQueryable(Of T), Expression(Of Func(Of T, Boolean))())
  fullName.vb: App.Utils.EFExtensions.FilterWithExpressions(Of T)(System.Linq.IQueryable(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean))())
  name.vb: FilterWithExpressions(Of T)(IQueryable(Of T), Expression(Of Func(Of T, Boolean))())
- uid: App.Utils.EFExtensions.SortWithKeys``2(System.Linq.IQueryable{``0},App.Data.Utils.SortOption{``0,``1}[])
  commentId: M:App.Utils.EFExtensions.SortWithKeys``2(System.Linq.IQueryable{``0},App.Data.Utils.SortOption{``0,``1}[])
  id: SortWithKeys``2(System.Linq.IQueryable{``0},App.Data.Utils.SortOption{``0,``1}[])
  isExtensionMethod: true
  parent: App.Utils.EFExtensions
  langs:
  - csharp
  - vb
  name: SortWithKeys<T, TKey>(IQueryable<T>, SortOption<T, TKey>[])
  nameWithType: EFExtensions.SortWithKeys<T, TKey>(IQueryable<T>, SortOption<T, TKey>[])
  fullName: App.Utils.EFExtensions.SortWithKeys<T, TKey>(System.Linq.IQueryable<T>, App.Data.Utils.SortOption<T, TKey>[])
  type: Method
  source:
    remote:
      path: App/Utils/EFExtensions.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: SortWithKeys
    path: ../App/Utils/EFExtensions.cs
    startLine: 70
  assemblies:
  - App
  namespace: App.Utils
  summary: "\nSorts the query based on the passed sorters.\n"
  example: []
  syntax:
    content: 'public static IQueryable<T> SortWithKeys<T, TKey>(this IQueryable<T> query, SortOption<T, TKey>[] sortKeys) where T : class'
    parameters:
    - id: query
      type: System.Linq.IQueryable{{T}}
      description: Query to sort
    - id: sortKeys
      type: App.Data.Utils.SortOption{{T},{TKey}}[]
      description: Sort options
    typeParameters:
    - id: T
      description: ''
    - id: TKey
      description: ''
    return:
      type: System.Linq.IQueryable{{T}}
      description: Sorted query
    content.vb: Public Shared Function SortWithKeys(Of T As Class, TKey)(query As IQueryable(Of T), sortKeys As SortOption(Of T, TKey)()) As IQueryable(Of T)
  overload: App.Utils.EFExtensions.SortWithKeys*
  nameWithType.vb: EFExtensions.SortWithKeys(Of T, TKey)(IQueryable(Of T), SortOption(Of T, TKey)())
  fullName.vb: App.Utils.EFExtensions.SortWithKeys(Of T, TKey)(System.Linq.IQueryable(Of T), App.Data.Utils.SortOption(Of T, TKey)())
  name.vb: SortWithKeys(Of T, TKey)(IQueryable(Of T), SortOption(Of T, TKey)())
- uid: App.Utils.EFExtensions.SaveChangeAsyncRethrow(DbContext)
  commentId: M:App.Utils.EFExtensions.SaveChangeAsyncRethrow(DbContext)
  id: SaveChangeAsyncRethrow(DbContext)
  isExtensionMethod: true
  parent: App.Utils.EFExtensions
  langs:
  - csharp
  - vb
  name: SaveChangeAsyncRethrow(DbContext)
  nameWithType: EFExtensions.SaveChangeAsyncRethrow(DbContext)
  fullName: App.Utils.EFExtensions.SaveChangeAsyncRethrow(DbContext)
  type: Method
  source:
    remote:
      path: App/Utils/EFExtensions.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: SaveChangeAsyncRethrow
    path: ../App/Utils/EFExtensions.cs
    startLine: 94
  assemblies:
  - App
  namespace: App.Utils
  summary: "\nSave changes and rethrows the exceptions that are compatible with frontend.\n"
  example: []
  syntax:
    content: public static Task SaveChangeAsyncRethrow(this DbContext context)
    parameters:
    - id: context
      type: DbContext
      description: ''
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Shared Function SaveChangeAsyncRethrow(context As DbContext) As Task
  overload: App.Utils.EFExtensions.SaveChangeAsyncRethrow*
  exceptions:
  - type: App.Errors.DbConcurrencyException
    commentId: T:App.Errors.DbConcurrencyException
- uid: App.Utils.EFExtensions.TryNTimesAsync(System.Func{System.Threading.Tasks.Task},System.Int32,System.Int32)
  commentId: M:App.Utils.EFExtensions.TryNTimesAsync(System.Func{System.Threading.Tasks.Task},System.Int32,System.Int32)
  id: TryNTimesAsync(System.Func{System.Threading.Tasks.Task},System.Int32,System.Int32)
  parent: App.Utils.EFExtensions
  langs:
  - csharp
  - vb
  name: TryNTimesAsync(Func<Task>, int, int)
  nameWithType: EFExtensions.TryNTimesAsync(Func<Task>, int, int)
  fullName: App.Utils.EFExtensions.TryNTimesAsync(System.Func<System.Threading.Tasks.Task>, int, int)
  type: Method
  source:
    remote:
      path: App/Utils/EFExtensions.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: TryNTimesAsync
    path: ../App/Utils/EFExtensions.cs
    startLine: 117
  assemblies:
  - App
  namespace: App.Utils
  summary: "\nCalls a method N times with delay between each call until not error thrown.\n"
  example: []
  syntax:
    content: public static Task TryNTimesAsync(Func<Task> action, int n = 10, int delay = 5000)
    parameters:
    - id: action
      type: System.Func{System.Threading.Tasks.Task}
      description: ''
    - id: n
      type: System.Int32
      description: ''
    - id: delay
      type: System.Int32
      description: ''
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Shared Function TryNTimesAsync(action As Func(Of Task), n As Integer = 10, delay As Integer = 5000) As Task
  overload: App.Utils.EFExtensions.TryNTimesAsync*
  nameWithType.vb: EFExtensions.TryNTimesAsync(Func(Of Task), Integer, Integer)
  fullName.vb: App.Utils.EFExtensions.TryNTimesAsync(System.Func(Of System.Threading.Tasks.Task), Integer, Integer)
  name.vb: TryNTimesAsync(Func(Of Task), Integer, Integer)
references:
- uid: App.Utils
  commentId: N:App.Utils
  name: App.Utils
  nameWithType: App.Utils
  fullName: App.Utils
  spec.csharp:
  - uid: App
    name: App
  - name: .
  - uid: App.Utils
    name: Utils
  spec.vb:
  - uid: App
    name: App
  - name: .
  - uid: App.Utils
    name: Utils
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: App.Utils.EFExtensions.MakeEager*
  commentId: Overload:App.Utils.EFExtensions.MakeEager
  name: MakeEager
  nameWithType: EFExtensions.MakeEager
  fullName: App.Utils.EFExtensions.MakeEager
- uid: System.Linq.IQueryable{{T}}
  commentId: T:System.Linq.IQueryable{``0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: IEntityType
  commentId: '!:IEntityType'
  isExternal: true
  name: IEntityType
  nameWithType: IEntityType
  fullName: IEntityType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Linq
    name: Linq
    isExternal: true
- uid: App.Utils.EFExtensions.FilterWithExpressions*
  commentId: Overload:App.Utils.EFExtensions.FilterWithExpressions
  name: FilterWithExpressions
  nameWithType: EFExtensions.FilterWithExpressions
  fullName: App.Utils.EFExtensions.FilterWithExpressions
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}[]
  isExternal: true
  name: Expression<Func<T, bool>>[]
  nameWithType: Expression<Func<T, bool>>[]
  fullName: System.Linq.Expressions.Expression<System.Func<T, bool>>[]
  nameWithType.vb: Expression(Of Func(Of T, Boolean))()
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, Boolean))()
  name.vb: Expression(Of Func(Of T, Boolean))()
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: <
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
  - name: '>'
  - name: '>'
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
  - name: )
  - name: )
  - name: (
  - name: )
- uid: App.Utils.EFExtensions.SortWithKeys*
  commentId: Overload:App.Utils.EFExtensions.SortWithKeys
  name: SortWithKeys
  nameWithType: EFExtensions.SortWithKeys
  fullName: App.Utils.EFExtensions.SortWithKeys
- uid: App.Data.Utils.SortOption{{T},{TKey}}[]
  isExternal: true
  name: SortOption<T, TKey>[]
  nameWithType: SortOption<T, TKey>[]
  fullName: App.Data.Utils.SortOption<T, TKey>[]
  nameWithType.vb: SortOption(Of T, TKey)()
  fullName.vb: App.Data.Utils.SortOption(Of T, TKey)()
  name.vb: SortOption(Of T, TKey)()
  spec.csharp:
  - uid: App.Data.Utils.SortOption`2
    name: SortOption
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  - name: '['
  - name: ']'
  spec.vb:
  - uid: App.Data.Utils.SortOption`2
    name: SortOption
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TKey
  - name: )
  - name: (
  - name: )
- uid: App.Errors.DbConcurrencyException
  commentId: T:App.Errors.DbConcurrencyException
  name: DbConcurrencyException
  nameWithType: DbConcurrencyException
  fullName: App.Errors.DbConcurrencyException
- uid: App.Utils.EFExtensions.SaveChangeAsyncRethrow*
  commentId: Overload:App.Utils.EFExtensions.SaveChangeAsyncRethrow
  name: SaveChangeAsyncRethrow
  nameWithType: EFExtensions.SaveChangeAsyncRethrow
  fullName: App.Utils.EFExtensions.SaveChangeAsyncRethrow
- uid: DbContext
  commentId: '!:DbContext'
  isExternal: true
  name: DbContext
  nameWithType: DbContext
  fullName: DbContext
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
- uid: App.Utils.EFExtensions.TryNTimesAsync*
  commentId: Overload:App.Utils.EFExtensions.TryNTimesAsync
  name: TryNTimesAsync
  nameWithType: EFExtensions.TryNTimesAsync
  fullName: App.Utils.EFExtensions.TryNTimesAsync
- uid: System.Func{System.Threading.Tasks.Task}
  commentId: T:System.Func{System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`1
  name: Func<Task>
  nameWithType: Func<Task>
  fullName: System.Func<System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of Task)
  fullName.vb: System.Func(Of System.Threading.Tasks.Task)
  name.vb: Func(Of Task)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: <
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
