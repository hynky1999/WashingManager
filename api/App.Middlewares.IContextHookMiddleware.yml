### YamlMime:ManagedReference
items:
- uid: App.Middlewares.IContextHookMiddleware
  commentId: T:App.Middlewares.IContextHookMiddleware
  id: IContextHookMiddleware
  parent: App.Middlewares
  children:
  - App.Middlewares.IContextHookMiddleware.AddContextHook``1(EntityState,System.Func{``0,System.Threading.Tasks.Task})
  - App.Middlewares.IContextHookMiddleware.OnSave(EntityState,System.Object)
  langs:
  - csharp
  - vb
  name: IContextHookMiddleware
  nameWithType: IContextHookMiddleware
  fullName: App.Middlewares.IContextHookMiddleware
  type: Interface
  source:
    remote:
      path: App/Middlewares/ContextHookMiddleware.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: IContextHookMiddleware
    path: ../App/Middlewares/ContextHookMiddleware.cs
    startLine: 8
  assemblies:
  - App
  namespace: App.Middlewares
  summary: "\nInterface for middleware which calls predefined hooks based on patterns.\nIt needs to be notified by OnSave to call the hooks.\n"
  example: []
  syntax:
    content: public interface IContextHookMiddleware
    content.vb: Public Interface IContextHookMiddleware
  extensionMethods:
  - App.Middlewares.IContextHookMiddleware.App.Utils.ReflectionExtensions.GetPropertyExpression``1(System.Reflection.PropertyInfo,System.Type)
  - App.Middlewares.IContextHookMiddleware.App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(System.Object,System.Reflection.PropertyInfo,System.Type)
- uid: App.Middlewares.IContextHookMiddleware.OnSave(EntityState,System.Object)
  commentId: M:App.Middlewares.IContextHookMiddleware.OnSave(EntityState,System.Object)
  id: OnSave(EntityState,System.Object)
  parent: App.Middlewares.IContextHookMiddleware
  langs:
  - csharp
  - vb
  name: OnSave(EntityState, object)
  nameWithType: IContextHookMiddleware.OnSave(EntityState, object)
  fullName: App.Middlewares.IContextHookMiddleware.OnSave(EntityState, object)
  type: Method
  source:
    remote:
      path: App/Middlewares/ContextHookMiddleware.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: OnSave
    path: ../App/Middlewares/ContextHookMiddleware.cs
    startLine: 16
  assemblies:
  - App
  namespace: App.Middlewares
  summary: "\nWhen saving an entity, you can call this method to notify the middleware to call the hooks.\n"
  example: []
  syntax:
    content: Task OnSave(EntityState state, object entity)
    parameters:
    - id: state
      type: EntityState
      description: The type of entity update
    - id: entity
      type: System.Object
      description: entity itself
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function OnSave(state As EntityState, entity As Object) As Task
  overload: App.Middlewares.IContextHookMiddleware.OnSave*
  nameWithType.vb: IContextHookMiddleware.OnSave(EntityState, Object)
  fullName.vb: App.Middlewares.IContextHookMiddleware.OnSave(EntityState, Object)
  name.vb: OnSave(EntityState, Object)
- uid: App.Middlewares.IContextHookMiddleware.AddContextHook``1(EntityState,System.Func{``0,System.Threading.Tasks.Task})
  commentId: M:App.Middlewares.IContextHookMiddleware.AddContextHook``1(EntityState,System.Func{``0,System.Threading.Tasks.Task})
  id: AddContextHook``1(EntityState,System.Func{``0,System.Threading.Tasks.Task})
  parent: App.Middlewares.IContextHookMiddleware
  langs:
  - csharp
  - vb
  name: AddContextHook<T>(EntityState, Func<T, Task>)
  nameWithType: IContextHookMiddleware.AddContextHook<T>(EntityState, Func<T, Task>)
  fullName: App.Middlewares.IContextHookMiddleware.AddContextHook<T>(EntityState, System.Func<T, System.Threading.Tasks.Task>)
  type: Method
  source:
    remote:
      path: App/Middlewares/ContextHookMiddleware.cs
      branch: main
      repo: https://github.com/hynky1999/WashingManager
    id: AddContextHook
    path: ../App/Middlewares/ContextHookMiddleware.cs
    startLine: 24
  assemblies:
  - App
  namespace: App.Middlewares
  summary: "\nRegisters a hook for a specific entity type.\n"
  example: []
  syntax:
    content: 'void AddContextHook<T>(EntityState state, Func<T, Task> hook) where T : class'
    parameters:
    - id: state
      type: EntityState
      description: State to react on
    - id: hook
      type: System.Func{{T},System.Threading.Tasks.Task}
      description: Hook that takes entity and does something. It is fire and forget type.
    typeParameters:
    - id: T
      description: ''
    content.vb: Sub AddContextHook(Of T As Class)(state As EntityState, hook As Func(Of T, Task))
  overload: App.Middlewares.IContextHookMiddleware.AddContextHook*
  nameWithType.vb: IContextHookMiddleware.AddContextHook(Of T)(EntityState, Func(Of T, Task))
  fullName.vb: App.Middlewares.IContextHookMiddleware.AddContextHook(Of T)(EntityState, System.Func(Of T, System.Threading.Tasks.Task))
  name.vb: AddContextHook(Of T)(EntityState, Func(Of T, Task))
references:
- uid: App.Middlewares
  commentId: N:App.Middlewares
  name: App.Middlewares
  nameWithType: App.Middlewares
  fullName: App.Middlewares
  spec.csharp:
  - uid: App
    name: App
  - name: .
  - uid: App.Middlewares
    name: Middlewares
  spec.vb:
  - uid: App
    name: App
  - name: .
  - uid: App.Middlewares
    name: Middlewares
- uid: App.Middlewares.IContextHookMiddleware.App.Utils.ReflectionExtensions.GetPropertyExpression``1(System.Reflection.PropertyInfo,System.Type)
  commentId: M:App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
  parent: App.Utils.ReflectionExtensions
  definition: App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
  name: GetPropertyExpression<IContextHookMiddleware>(IContextHookMiddleware, PropertyInfo, Type)
  nameWithType: ReflectionExtensions.GetPropertyExpression<IContextHookMiddleware>(IContextHookMiddleware, PropertyInfo, Type)
  fullName: App.Utils.ReflectionExtensions.GetPropertyExpression<App.Middlewares.IContextHookMiddleware>(App.Middlewares.IContextHookMiddleware, System.Reflection.PropertyInfo, System.Type)
  nameWithType.vb: ReflectionExtensions.GetPropertyExpression(Of IContextHookMiddleware)(IContextHookMiddleware, PropertyInfo, Type)
  fullName.vb: App.Utils.ReflectionExtensions.GetPropertyExpression(Of App.Middlewares.IContextHookMiddleware)(App.Middlewares.IContextHookMiddleware, System.Reflection.PropertyInfo, System.Type)
  name.vb: GetPropertyExpression(Of IContextHookMiddleware)(IContextHookMiddleware, PropertyInfo, Type)
  spec.csharp:
  - uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(App.Middlewares.IContextHookMiddleware,System.Reflection.PropertyInfo,System.Type)
    name: GetPropertyExpression
  - name: <
  - uid: App.Middlewares.IContextHookMiddleware
    name: IContextHookMiddleware
  - name: '>'
  - name: (
  - uid: App.Middlewares.IContextHookMiddleware
    name: IContextHookMiddleware
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(App.Middlewares.IContextHookMiddleware,System.Reflection.PropertyInfo,System.Type)
    name: GetPropertyExpression
  - name: (
  - name: Of
  - name: " "
  - uid: App.Middlewares.IContextHookMiddleware
    name: IContextHookMiddleware
  - name: )
  - name: (
  - uid: App.Middlewares.IContextHookMiddleware
    name: IContextHookMiddleware
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: App.Middlewares.IContextHookMiddleware.App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(System.Object,System.Reflection.PropertyInfo,System.Type)
  commentId: M:App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
  parent: App.Utils.ReflectionExtensions
  definition: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
  name: GetSetPropertyEventCallback<IContextHookMiddleware>(IContextHookMiddleware, object, PropertyInfo, Type)
  nameWithType: ReflectionExtensions.GetSetPropertyEventCallback<IContextHookMiddleware>(IContextHookMiddleware, object, PropertyInfo, Type)
  fullName: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback<App.Middlewares.IContextHookMiddleware>(App.Middlewares.IContextHookMiddleware, object, System.Reflection.PropertyInfo, System.Type)
  nameWithType.vb: ReflectionExtensions.GetSetPropertyEventCallback(Of IContextHookMiddleware)(IContextHookMiddleware, Object, PropertyInfo, Type)
  fullName.vb: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback(Of App.Middlewares.IContextHookMiddleware)(App.Middlewares.IContextHookMiddleware, Object, System.Reflection.PropertyInfo, System.Type)
  name.vb: GetSetPropertyEventCallback(Of IContextHookMiddleware)(IContextHookMiddleware, Object, PropertyInfo, Type)
  spec.csharp:
  - uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(App.Middlewares.IContextHookMiddleware,System.Object,System.Reflection.PropertyInfo,System.Type)
    name: GetSetPropertyEventCallback
  - name: <
  - uid: App.Middlewares.IContextHookMiddleware
    name: IContextHookMiddleware
  - name: '>'
  - name: (
  - uid: App.Middlewares.IContextHookMiddleware
    name: IContextHookMiddleware
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(App.Middlewares.IContextHookMiddleware,System.Object,System.Reflection.PropertyInfo,System.Type)
    name: GetSetPropertyEventCallback
  - name: (
  - name: Of
  - name: " "
  - uid: App.Middlewares.IContextHookMiddleware
    name: IContextHookMiddleware
  - name: )
  - name: (
  - uid: App.Middlewares.IContextHookMiddleware
    name: IContextHookMiddleware
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
  commentId: M:App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
  isExternal: true
  name: GetPropertyExpression<T>(T, PropertyInfo, Type)
  nameWithType: ReflectionExtensions.GetPropertyExpression<T>(T, PropertyInfo, Type)
  fullName: App.Utils.ReflectionExtensions.GetPropertyExpression<T>(T, System.Reflection.PropertyInfo, System.Type)
  nameWithType.vb: ReflectionExtensions.GetPropertyExpression(Of T)(T, PropertyInfo, Type)
  fullName.vb: App.Utils.ReflectionExtensions.GetPropertyExpression(Of T)(T, System.Reflection.PropertyInfo, System.Type)
  name.vb: GetPropertyExpression(Of T)(T, PropertyInfo, Type)
  spec.csharp:
  - uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
    name: GetPropertyExpression
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Utils.ReflectionExtensions.GetPropertyExpression``1(``0,System.Reflection.PropertyInfo,System.Type)
    name: GetPropertyExpression
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: App.Utils.ReflectionExtensions
  commentId: T:App.Utils.ReflectionExtensions
  parent: App.Utils
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: App.Utils.ReflectionExtensions
- uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
  commentId: M:App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
  isExternal: true
  name: GetSetPropertyEventCallback<T>(T, object, PropertyInfo, Type)
  nameWithType: ReflectionExtensions.GetSetPropertyEventCallback<T>(T, object, PropertyInfo, Type)
  fullName: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback<T>(T, object, System.Reflection.PropertyInfo, System.Type)
  nameWithType.vb: ReflectionExtensions.GetSetPropertyEventCallback(Of T)(T, Object, PropertyInfo, Type)
  fullName.vb: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback(Of T)(T, Object, System.Reflection.PropertyInfo, System.Type)
  name.vb: GetSetPropertyEventCallback(Of T)(T, Object, PropertyInfo, Type)
  spec.csharp:
  - uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
    name: GetSetPropertyEventCallback
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
  spec.vb:
  - uid: App.Utils.ReflectionExtensions.GetSetPropertyEventCallback``1(``0,System.Object,System.Reflection.PropertyInfo,System.Type)
    name: GetSetPropertyEventCallback
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: App.Utils
  commentId: N:App.Utils
  name: App.Utils
  nameWithType: App.Utils
  fullName: App.Utils
  spec.csharp:
  - uid: App
    name: App
  - name: .
  - uid: App.Utils
    name: Utils
  spec.vb:
  - uid: App
    name: App
  - name: .
  - uid: App.Utils
    name: Utils
- uid: App.Middlewares.IContextHookMiddleware.OnSave*
  commentId: Overload:App.Middlewares.IContextHookMiddleware.OnSave
  name: OnSave
  nameWithType: IContextHookMiddleware.OnSave
  fullName: App.Middlewares.IContextHookMiddleware.OnSave
- uid: EntityState
  isExternal: true
  name: EntityState
  nameWithType: EntityState
  fullName: EntityState
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
- uid: App.Middlewares.IContextHookMiddleware.AddContextHook*
  commentId: Overload:App.Middlewares.IContextHookMiddleware.AddContextHook
  name: AddContextHook
  nameWithType: IContextHookMiddleware.AddContextHook
  fullName: App.Middlewares.IContextHookMiddleware.AddContextHook
- uid: System.Func{{T},System.Threading.Tasks.Task}
  commentId: T:System.Func{``0,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  name: Func<T, Task>
  nameWithType: Func<T, Task>
  fullName: System.Func<T, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of T, Task)
  fullName.vb: System.Func(Of T, System.Threading.Tasks.Task)
  name.vb: Func(Of T, Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - uid: System.Threading.Tasks.Task
    name: Task
    isExternal: true
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
