@typeparam T where T : App.Data.Models.BorrowableEntity
@inherits GenericEntityBase<T>
@inject IUsageChartingService<T> Charts
@inject ILocalizationService Loc
@if (_statData.Length == 0) {
    <Empty/>
} else {
    <AntDesign.Charts.Column Config="_config" Data="_statData" @ref=_chart/>
}
<LocalDateRangePicker @bind-Value="_dateRange"/>
<Button OnClick="() => InitializeData(_dateRange)">@Loc["Chart"]</Button>

@code {

    [Parameter]
    public LocalDate SinceDate { get; set; }

    [Parameter]
    public LocalDate ToDate { get; set; }

        private const string Usage = "Daily borrows";

    private object[] _statData = {};
    private ColumnConfig _config = new();
    private (LocalDate, LocalDate) _dateRange;
    private Column? _chart;

    protected override void OnInitialized() {
        _config = ChartsUtils.CreateColumnConfig(Usage, "", "Date", "Borrows", Loc);
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync() {
        _dateRange = (SinceDate, ToDate);
        await InitializeData(_dateRange);
        await base.OnParametersSetAsync();
    }

    private async Task InitializeData((LocalDate? start, LocalDate? end)? val) {
        if (val is not null && val.Value.start is not null && val.Value.end is not null) {
    // ReSharper disable once CoVariantArrayConversion
    // It will be only read
            _statData = (await Charts.GetBorrowsByDayAsync(val.Value.start.Value, val.Value.end.Value, Loc.TimeZone)).Select(usage => new {x = usage.time.ToString(), y = usage.value}).ToArray();
            if (_chart != null) {
    // Idk doesn't react to statHasCHanged
                var description = ChartsUtils.GetChartDescription(Usage, EntityName, (SinceDate, ToDate), Loc);
                _config.Description.Text = description;
                await _chart.UpdateChart(csData: _statData, csConfig: _config);
            }
        }
    }

}