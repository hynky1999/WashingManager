@inject IUsageChartingService<T> Charts
@typeparam T where T : App.Data.Models.BorrowableEntity
@inherits GenericEntityBase<T>
@inject ILocalizationService Loc
@if (_statData.Length == 0) {
    <Empty/>
} else {
    <AntDesign.Charts.Column Config="@_config" Data="@_statData" @ref="_chart"/>
}
<LocalDatePickerNullable @bind-Value="Date"></LocalDatePickerNullable>
<Button OnClick="() => InitializeData(Date)">@Loc["Chart"]</Button>

@code {

    [Parameter]
    public LocalDate? Date { get; set; }

        private const string Usage = "Hourly borrows";
    private Column? _chart;

    private object[] _statData = {};
    private ColumnConfig _config = new();

    protected override void OnInitialized() {
        _config = ChartsUtils.CreateColumnConfig(Usage, "", "Hour", "Borrows", Loc);
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync() {
        await InitializeData(Date);
        await base.OnParametersSetAsync();
    }

    private async Task InitializeData(LocalDate? val) {
        if (val is not null) {
    // ReSharper disable once CoVariantArrayConversion
            _statData = (await Charts.GetBorrowsByHourAsync(val.Value, Loc.TimeZone)).Select(usage => new {x = usage.hour.ToString(), y = usage.value}).ToArray();
            if (_chart != null) {
    // Idk doesn't react to statHasCHanged
                var description = ChartsUtils.GetChartDescription(Usage, EntityName, (Date, null), Loc);
                _config.Description.Text = description;
                await _chart.UpdateChart(csData: _statData, csConfig: _config);
            }
        }
    }

}