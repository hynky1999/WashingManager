@inject ILocalizationService Loc
@inject IReservationsService ReservationService
@inject IMessageService MessageService
@using App.Data.Utils
@using System.Linq.Expressions
@typeparam T where T : App.Data.Models.BorrowableEntity


<LazyRemoteTable
    @ref=@_table
    TItem="Reservation"
    Bordered="@true"
    OnQuery=@(ReservationService.GetReservationsAsync<T>)
    OnQueryCount=@(ReservationService.GetReservationsCountAsync<T>)
    PageSize="@(10)">


    <LocDNColumn @bind-Field="@context.BorrowableEntity"/>
    <LocDNColumn @bind-Field="@context.Start" Sortable DefaultSortOrder=@SortDirection.Ascending/>
    <LocDNColumn @bind-Field="@context.End" OnFilter="OnEndFilter" Filters="_endFilters"/>
    <LocDNColumn @bind-Field="@context.User">
        @context.User
    </LocDNColumn>
    <ActionColumn>
        @if (context.Start <= Loc.Now && context.End > Loc.Now && context.BorrowableEntity.Status == Status.Free) {
            <Button
                Type="@ButtonType.Primary"
                Color="Color.Blue3"
                Size="@AntSizeLDSType.Small"
                OnClick=@(() => MakeBorrowFromReservation(context))>
                @Loc["Borrow"]
            </Button>
        }
    </ActionColumn>
</LazyRemoteTable>

@code{
    private LazyRemoteTable<Reservation> _table = new();

    private async void MakeBorrowFromReservation(Reservation reservation) {
        await MessageService.GenericOnDBError(Loc, async () => {
            await ReservationService.MakeBorrowFromReservationAsync(reservation);
            _table.ChangeLocally(reservations => reservations.Where(res => res.ReservationID != reservation.ReservationID).ToArray());
            MessageService.Success(Loc["Borrow created"]).FireAndForget();
        });
    }

    private Expression<Func<Instant, Instant, bool>>? OnEndFilter;
    private TableFilter<Instant>[]? _endFilters;

    protected override void OnInitialized() {
        OnEndFilter = (value, end) => end > value;
        _endFilters = new[] {
            new TableFilter<Instant>() {Selected = true, Text = Loc["Upcoming"], Value = Loc.Now}
        };
    }

}
