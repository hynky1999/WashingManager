@using System.Reflection
@using App.Data.Utils
@typeparam T where T : class
@inject NavigationManager NavManager
@inject IMessageService MessageService
@inject ILocalizationService Loc
@inject ICrudService<T> CrudService

<LazyRemoteTable
    OnQuery="@(async (qModel) => await CrudService.GetAllAsync(qModel, true))"
    OnQueryCount="CrudService.GetCountAsync"
    @ref="_table"
    TItem="T">
    @foreach (var property in typeof(T).
        GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.FlattenHierarchy).
        Where(p => p.CanWrite &&
                   p.GetCustomAttribute<UIVisibility>()?.Visibility != UIVisibilityEnum.Hidden)) {
        @ProperityColumn(context, property)
    }
    <ActionColumn>
        <Space>
            <SpaceItem>
                <Button Color="Color.Red3" OnClick="() => Delete(context)" Size="@AntSizeLDSType.Small" Type="@ButtonType.Primary">@Loc["Delete"]</Button>
            </SpaceItem>
            <SpaceItem>
                <Button Color="Color.Green3" OnClick="() => Update(context)" Size="@AntSizeLDSType.Small" Type="@ButtonType.Primary">@Loc["Update"]</Button>
            </SpaceItem>
        </Space>
    </ActionColumn>
</LazyRemoteTable>

@code {

    private readonly Type[] _supportedFilters = {
        typeof(int), typeof(uint), typeof(long), typeof(string), typeof(Enum), typeof(DateTime), typeof(Guid), typeof(bool)
    };

    private LazyRemoteTable<T>? _table;

    private RenderFragment ProperityColumn(T context, PropertyInfo propertyInfo) {
        return builder => {
            builder.OpenComponent(0, typeof(LocDNColumn<>).MakeGenericType(propertyInfo.PropertyType));
            var val = propertyInfo.GetValue(context);
            builder.AddAttribute(1, "Field", val);
            builder.AddAttribute(2, "FieldChanged", context.GetSetPropertyEventCallback(this, propertyInfo));
            builder.AddAttribute(3, "FieldExpression", context.GetPropertyExpression(propertyInfo));
            builder.AddMultipleAttributes(4, GetColumnParams(propertyInfo));
            builder.CloseComponent();
        };
    }

    private IEnumerable<KeyValuePair<string, object>> GetColumnParams(PropertyInfo info) {
        var attrs = new List<KeyValuePair<string, object>>();
        if (info.PropertyType.GetInterface("IComparable") != null) {
            attrs.Add(new KeyValuePair<string, object>("Sortable", true));
        }

        if (_supportedFilters.Contains(info.PropertyType)) {
            attrs.Add(new KeyValuePair<string, object>("Filterable", true));
        }
        return attrs;
    }

    private async void Update(T model) {
        await MessageService.GenericOnDBError(Loc, () => {
            var id = CrudService.GetId(model);
            var baseResourceApi = string.Join('/', NavManager.Uri.Split("/")[..^1]);
            NavManager.NavigateTo($"{baseResourceApi}/Update/{id}");
            return Task.CompletedTask;
        });
    }

    private async void Delete(T model) {
        await MessageService.GenericOnDBError(Loc, async () => {
            await CrudService.DeleteAsync(model);
            _table?.ChangeLocally(models => models.Remove(model));
            MessageService.Success($"{Loc["Deleted item"]}").FireAndForget();
        });
    }

}