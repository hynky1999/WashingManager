@using App.Features.BEManagment.Desc
@inject IBorrowService BorrowService
@typeparam T where T : BorrowableEntity
@inject IMessageService MessageService
@inject ILogger<BorrowFormModal<T>> Logger
@inject ILocalizationService Loc


<ModalForm MessageSuccess="@Loc[_messageSuccess]"
           Model="_tmpBorrowPerson"
           OnFinish="OnFinish"
           OnSubmit="OnSubmit"
           @ref="_modal"
           Title=@Loc["Create borrow"] TMod="BorrowPerson" TResult="Borrow">
    <Header>
        @if (ShowWashingMachine) {
            <BEDescription BEntity="DefaultBe" T="T"/>
        }
    </Header>
    <FormContent>
        <FormItem Label=@Loc["Name"]>
            <Input @bind-Value="_tmpBorrowPerson.Name" id="Name"/>
        </FormItem>
        <FormItem Label=@Loc["Surname"]>
            <Input @bind-Value="_tmpBorrowPerson.Surname" id="Surname"/>
        </FormItem>
    </FormContent>
</ModalForm>


@code {

    [Parameter]
    public T? DefaultBe { get; set; }

    [Parameter]
    public bool ShowWashingMachine { get; set; } = true;

    [Parameter]
    public EventCallback<Borrow> OnFinish { get; set; }

    private BorrowPerson _tmpBorrowPerson = new();
    private string _messageSuccess = "Borrow created";
    private ModalForm<BorrowPerson, Borrow> _modal = new();

    private async Task<Borrow?> OnSubmit(BorrowPerson borrowPerson) {
        if (DefaultBe is null) {
            MessageService.Error(Loc["DefaultBe is null"]).FireAndForget();
            return null;
        }
        var borrow = new Borrow {
            BorrowPerson = _tmpBorrowPerson,
            BorrowableEntity = DefaultBe
        };
        return await MessageService.GenericOnDBError(Loc, async () => {
            await BorrowService.AddBorrowAsync(borrow);
            return borrow;
        });
    }

    public void OpenModal() {
        _modal.OpenModal();
    }

}