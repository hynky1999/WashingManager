@typeparam TItem where TItem : class

@inject ILocalizationService Loc
@inject ICrudService<TItem> CrudService
@using App.Data.ModelInterfaces
@inherits AntInputComponentBase<TItem>

@* Please keep the nullable access there as the e can be null since AllowClear can be true *@
@* ReSharper disable once ConditionalAccessQualifierIsNonNullableAccordingToAPIContract *@
<Select
    AllowClear="@AllowClear"
    @bind-Value="@CurrentValue"
    DataSource="@_dataSourceSelectItems"
    Disabled="@Disabled"
    LabelName=@(nameof(SelectItem.Label))
    TItem="SelectItem"
    TItemValue="TItem"
    OnSelectedItemChanged="@((e) => {
                               var item = e?.Value;
                               return OnChange.InvokeAsync(item); })"
    ValueName=@(nameof(SelectItem.Value))>

</Select>

@code {

    private class SelectItem {
        public TItem Value { get; set; }
        public string Label { get; set; }

        public SelectItem(TItem value, string label) {
            Value = value;
            Label = label;
        }
    }

    [Parameter]
    public bool CrudInitialize { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public EventCallback<TItem> OnChange { get; set; }

    [Parameter]
    public TItem[]? DataSource { get; set; }

    [Parameter]
    public bool AllowClear { get; set; } = true;


    private SelectItem[] _dataSourceSelectItems = Array.Empty<SelectItem>();
    private bool _isInitialized = false;
    private TItem[]? _dataSource = null;


    protected override async Task OnParametersSetAsync() {
    // If the DataSource is not set and we haven't initialized yet initialize with the CrudService
        if (DataSource == null && _isInitialized == false && CrudInitialize) {
            _isInitialized = true;
            _dataSource = (await CrudService.GetAllAsync(eager: true)).ToArray();
        }
    // If Datasource has changed reload select options
        if (DataSource != _dataSource) {
    // If the Datasource is not set don't update
            if (DataSource != null) {
                _dataSource = DataSource;
            }

            if (_dataSource != null) {
                _dataSourceSelectItems = prepareSource(_dataSource);
            }
        }
    }


    private SelectItem[] prepareSource(TItem[] data) {
        var source = data.Select(e => {
            string _label = e.ToString() ?? "";
            if (e is IDBModel model) {
                _label = model.HumanReadableLoc(Loc);
            }

            return new SelectItem(
                e,
                _label
                );
        });
        return source.ToArray();
    }

}