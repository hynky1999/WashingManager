@inject IBorrowService BorrowService
@using PrackyASusarny.Errors.Folder
@using PrackyASusarny.Features.BEManagment.Desc
@typeparam T where T : BorrowableEntity
@inject MessageService Message
@inject ILogger<BorrowFormModal<T>> Logger


<ModalForm @ref="_modal" TResult="Borrow" TMod="BorrowPerson" Model="_tmpBorrowPerson" Title="Create borrow" OnSubmit="OnSubmit" OnFinish="OnFinish" OnFinishFailed="OnFinishFailed" MessageFail="@_messageFail" MessageSuccess="@_messageSuccess">
    <Header>
        @if (ShowWashingMachine) {
            <BEDescription T="T" BEntity="DefaultBe"/>
        }
    </Header>
    <FormContent>
        <FormItem Label="Name">
            <Input @bind-Value="_tmpBorrowPerson.Name" id="Name"/>
        </FormItem>
        <FormItem Label="Surname">
            <Input @bind-Value="_tmpBorrowPerson.Surname" id="Surname"/>
        </FormItem>
    </FormContent>
</ModalForm>


@code {

    [Parameter]
    public T? DefaultBe { get; set; }

    [Parameter]
    public bool ShowWashingMachine { get; set; } = true;

    [Parameter]
    public EventCallback<Borrow> OnFinish { get; set; }

    [Parameter]
    public EventCallback OnFinishFailed { get; set; }

    private BorrowPerson _tmpBorrowPerson = new();
    private string _messageSuccess = "Borrow created successfully";
    private string _messageFail = "Failed to create borrow";
    private ModalForm<BorrowPerson, Borrow> _modal = new();

    private async Task<Borrow?> OnSubmit() {
        if (DefaultBe is null) {
            Logger.LogError("Washing machine is null");
        }
        var borrow = new Borrow {
            BorrowPerson = _tmpBorrowPerson,
            BorrowableEntity = DefaultBe
        };
        try {
            await BorrowService.AddBorrowAsync(borrow);
            return borrow;
        }
        catch (Exception ex) when (ex is ArgumentException || ex is DbException) {
            return null;
        }
    }

    public void OpenModal() {
        _modal.OpenModal();
    }

}