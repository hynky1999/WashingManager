@using PrackyASusarny.Utils
@using PrackyASusarny.Features.BEManagment.Desc
@typeparam T where T : BorrowableEntity
@inject IBorrowService BorrowService
@inject ICrudService<T> CrudService
@inject MessageService Message
@inject ILocalizationService Loc


<Modal Footer="@null" OnCancel="@CloseModal" Visible="@_visibility">
    <Title Level="2">@Loc["End Borrow"]</Title>
    <Divider/>
    @if (_borrowableEntity != null && ShowBorrowableEntity) {
        <BEDescription BEntity="_borrowableEntity" T="T"/>
    }
    @if (_borrow is not null) {
        <BorrowDescription Borrow="@_borrow"/>
        <Divider/>
        <PriceBorrowCompute Borrow="@_borrow"/>
        <Divider/>
    } else {
        <Spin/>
    }
    <Button Block="true" HtmlType="submit"
            Loading="_loading" OnClick="EndBorrow"
            Type="@ButtonType.Primary">
        @Loc["End"]
    </Button>
</Modal>


@code {

    [Parameter]
    public Borrow? DefaultBorrow { get; set; }

    [Parameter]
    public bool ShowBorrowableEntity { get; set; } = true;

    [Parameter]
    public EventCallback<Borrow> OnSuccess { get; set; }

    private Borrow? _borrow;
    private T? _borrowableEntity;
    private bool _visibility = false;
    private bool _loading = false;


    public void OpenModal() {
        _loading = false;
        _visibility = true;
    }

    protected override async Task OnParametersSetAsync() {
        _loading = true;
        _borrow = DefaultBorrow;
        _borrowableEntity = _borrow?.BorrowableEntity as T;
        if (_borrow is not null) {
            if (ShowBorrowableEntity && _borrowableEntity == null) {
                _borrowableEntity = await CrudService.GetByIdAsync(_borrow.BorrowableEntityID);
            }
        }
        _loading = false;
        await base.OnParametersSetAsync();
    }

    private void CloseModal() {
        _loading = false;
        _visibility = false;
    }

    private async Task EndBorrow() {
        _loading = true;
        if (_borrow is null) {
            Message.Error("No borrow selected");
            return;
        }

        await Message.GenericOnDBError(async () => {
            await BorrowService.EndBorrowAsync(_borrow);
            await OnSuccess.InvokeAsync(_borrow);
            Message.Success(Loc["Borrow ended"]);
            CloseModal();
        });
        _loading = false;
    }


}