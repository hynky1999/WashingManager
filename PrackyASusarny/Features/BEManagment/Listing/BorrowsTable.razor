@inject ILocationService LocationService
@inject IBorrowService BorrowService
@using PrackyASusarny.Features.BEManagment.Modals
@using AntDesign.TableModels
@typeparam T where T : BorrowableEntity

<Table TItem="Borrow" DataSource="_data" @bind-PageIndex="_pageIndex" PageSize="PageSize" Total="_total" Loading="_loading" OnChange="@HandleTableChange" RemoteDataSource>
    <AntDesign.Column TData="Instant" @bind-Field="@context.startDate" Sortable DefaultSortOrder="SortDirection.Ascending">@context.startDate</AntDesign.Column>
    <AntDesign.Column TData="Instant?" @bind-Field="@context.endDate" Filters="_endDate" DefaultSortOrder="SortDirection.Descending" OnFilter="@((value, name) => value == null ? name == null : name != null)">@(context.endDate?.ToString() ?? "Ongoing")</AntDesign.Column>
    <AntDesign.Column TData="string" DataIndex="BorrowPerson.Name" Filterable> </AntDesign.Column>
    <AntDesign.Column TData="string" DataIndex="BorrowPerson.Surname" Filterable> </AntDesign.Column>
    <AntDesign.Column TData="char?" Filters="_buildingFilters" SorterMultiple="1" Sortable DataIndex="BorrowableEntity.Location.Building">@context.BorrowableEntity.Location?.Building</AntDesign.Column>
    <AntDesign.Column TData="int?" Filters="_floorFilters" Sortable SorterMultiple="2" DataIndex="BorrowableEntity.Location.Floor">@context.BorrowableEntity.Location?.Floor</AntDesign.Column>
    <AntDesign.Column TData="int?" Filters="_roomFilters" Sortable SorterMultiple="3" DataIndex="BorrowableEntity.Location.RoomNum">@context.BorrowableEntity.Location?.RoomNum</AntDesign.Column>
    <AntDesign.Column TData="int?" DataIndex="BorrowableEntity.Location.DoorNum">@context.BorrowableEntity.Location?.DoorNum</AntDesign.Column>
    <ActionColumn>
        <Space>
            <Button OnClick="() => OpenRemoveModal(context)" Color="Color.Blue3" Type="@ButtonType.Primary" Size="small">End Borrow</Button>
        </Space>
    </ActionColumn>
</Table>
<BorrowRemoveModal @ref="_modal" T="T" DefaultBorrow="_defaultBorrow" OnSuccess="@(EndBorrow)" ShowBorrowableEntity="true"></BorrowRemoveModal>

@code{

    [Parameter]
    public int PageSize { get; set; } = 5;

    bool _loading;
    int _lastPageIndex = 1;
    int _pageIndex = 1;
    int _total;
    Borrow[] _data = Array.Empty<Borrow>();

    private TableFilter<int?>[] _floorFilters = new TableFilter<int?>[0];
    private TableFilter<char?>[] _buildingFilters = new TableFilter<char?>[0];
    private TableFilter<int?>[] _roomFilters = new TableFilter<int?>[0];

    private readonly TableFilter<Instant?>[] _endDate = {
        new() {Text = "Open", Value = null, Selected = true},
        new() {Text = "Ended", Value = Instant.MaxValue, Selected = false}
    };


    private Borrow? _defaultBorrow;
    private BorrowRemoveModal<T> _modal = new();

    protected override Task OnInitializedAsync() {
        _buildingFilters = LocationService.GetBuildingOptions().Select(
            x => new TableFilter<char?> {Text = x.ToString(), Value = x}).ToArray();

        _roomFilters = LocationService.GetRoomOptions().Select(
            x => new TableFilter<int?> {Text = x.ToString(), Value = x}).ToArray();

        _floorFilters = LocationService.GetFloorOptions().Select(
            x => new TableFilter<int?> {Text = x.ToString(), Value = x}).ToArray();

        return base.OnInitializedAsync();
    }

    async Task HandleTableChange(QueryModel<Borrow> queryModel) {
        _loading = true;
    // Filter
        if (_lastPageIndex == queryModel.PageIndex) {
            queryModel = new QueryModel<Borrow>(1, PageSize, queryModel.SortModel, queryModel.FilterModel);
            _total = await BorrowService.CountBorrowsByBEAsync<T>(queryModel);
        }
        _data = await BorrowService.GetBorrowsByBEAsync<T>(queryModel);
        _pageIndex = queryModel.PageIndex;
        _lastPageIndex = queryModel.PageIndex;
        _loading = false;
    }

    void OpenRemoveModal(Borrow b) {
        _defaultBorrow = b;
        _modal.OpenModal();
    }

    Task EndBorrow(Borrow borrow) {
        _data = _data.Where(x => x.BorrowID != borrow.BorrowID).ToArray();
        return Task.CompletedTask;
    }

}