@inject ILocationService LocationService
@inject IBorrowService BorrowService
@inject ILocalizationService Loc
@using System.Linq.Expressions
@using PrackyASusarny.Features.BEManagment.Modals
@typeparam T where T : BorrowableEntity

<LazyRemoteTable OnQuery="BorrowService.GetBorrowsByBEAsync<T>"
                 OnQueryCount="BorrowService.CountBorrowsByBEAsync<T>"
                 PageSize="@PageSize"
                 @ref="_tableRef"
                 TItem="Borrow">


    <LocDNColumn @bind-Field="@context.startDate" DefaultSortOrder="SortDirection.Ascending"
                 Sortable
                 Title="Start Time">
    </LocDNColumn>
    <LocDNColumn @bind-Field="@context.endDate" DefaultSortOrder="SortDirection.Descending"
                 Filters="@_endDateFilters"
                 OnFilter=@_endDateOnFilter
                 Title="End Time">
    </LocDNColumn>
    <AntDesign.Column DataIndex="BorrowPerson.Name" Filterable
                      TData="string" Title="@Loc["Name"]"/>
    <AntDesign.Column DataIndex="BorrowPerson.Surname" Filterable
                      TData="string" Title="@Loc["Surname"]"/>
    <AntDesign.Column DataIndex="BorrowableEntity.Location.Building"
                      Filters="_buildingFilters"
                      Sortable
                      SorterMultiple="1" TData="char?" Title=@Loc["Building"]>
        @context.BorrowableEntity.Location?.Building
    </AntDesign.Column>
    <AntDesign.Column DataIndex="BorrowableEntity.Location.Floor"
                      Filters="_floorFilters"
                      Sortable
                      SorterMultiple="2" TData="int?" Title=@Loc["Floor"]>
        @context.BorrowableEntity.Location?.Floor
    </AntDesign.Column>
    <AntDesign.Column DataIndex="BorrowableEntity.Location.RoomNum"
                      Filters="_roomFilters"
                      Sortable
                      SorterMultiple="3" TData="int?" Title=@Loc["Room"]>
        @context.BorrowableEntity.Location?.RoomNum
    </AntDesign.Column>
    <AntDesign.Column DataIndex="BorrowableEntity.Location.DoorNum" TData="int?"
                      Title=@Loc["Door"]>
        @context.BorrowableEntity.Location?.DoorNum
    </AntDesign.Column>
    <ActionColumn>
        @if (context.endDate == null) {
            <Space>
                <Button Color="Color.Blue3"
                        OnClick="() => OpenRemoveModal(context)"
                        Size="@AntSizeLDSType.Small"
                        Type="@ButtonType.Primary">
                    @(Loc["End Borrow"])
                </Button>
            </Space>
        }
    </ActionColumn>
</LazyRemoteTable>
<BorrowRemoveModal
    DefaultBorrow="_defaultBorrow" OnSuccess="@(EndBorrow)"
    @ref="_modal" ShowBorrowableEntity="true"
    T="T"/>

@code{

    [Parameter]
    public int PageSize { get; set; } = 5;


    private TableFilter<int?>[] _floorFilters = new TableFilter<int?>[0];
    private TableFilter<char?>[] _buildingFilters = new TableFilter<char?>[0];
    private TableFilter<int?>[] _roomFilters = new TableFilter<int?>[0];
    private LazyRemoteTable<Borrow>? _tableRef;

    Expression<Func<Instant?, Instant?, bool>>? _endDateOnFilter;

    private TableFilter<Instant?>[]? _endDateFilters;


    private Borrow? _defaultBorrow;
    private BorrowRemoveModal<T> _modal = new();

    protected override void OnInitialized() {
        _buildingFilters = LocationService.GetBuildingOptions().Select(
            x => new TableFilter<char?> {Text = x.ToString(), Value = x}).ToArray();

        _roomFilters = LocationService.GetRoomOptions().Select(
            x => new TableFilter<int?> {Text = x.ToString(), Value = x}).ToArray();

        _floorFilters = LocationService.GetFloorOptions().Select(
            x => new TableFilter<int?> {Text = x.ToString(), Value = x}).ToArray();
        _endDateFilters = new[] {
            new TableFilter<Instant?>() {Text = Loc["Ongoing"], Value = null, Selected = true},
            new TableFilter<Instant?>() {Text = Loc["Ended"], Value = Instant.MaxValue, Selected = false},
        };
        _endDateOnFilter = (value, name) => value == null ? name == null : name != null;
        base.OnInitialized();
    }

    void OpenRemoveModal(Borrow b) {
        _defaultBorrow = b;
        _modal.OpenModal();
    }

    Task EndBorrow(Borrow borrow) {
        _tableRef?.ChangeLocally(data => data.Where(x => x.BorrowID != borrow.BorrowID).ToArray());
        return Task.CompletedTask;
    }

}