@inject ILocationService LocationService
@inject IBorrowService BorrowService
@inject ILocalizationService Loc

@using PrackyASusarny.Features.BEManagment.Modals
@using AntDesign.TableModels
@using System.Linq.Expressions
@typeparam T where T : BorrowableEntity

<Table @bind-PageIndex="_pageIndex" DataSource="_data" Loading="_loading"
       OnChange="@HandleTableChange" PageSize="PageSize" RemoteDataSource
       TItem="Borrow" Total="_total" Responsive>

    <AntDesign.Column @bind-Field="@context.startDate" Title="@Loc["Start Time"]" 
                      DefaultSortOrder="SortDirection.Ascending"
                      Sortable TData="Instant">
        @Loc[context.startDate]
    </AntDesign.Column>
    <AntDesign.Column @bind-Field="@context.endDate" Title="@Loc["End Time"]" 
                      DefaultSortOrder="SortDirection.Descending"
                      Filters="_endDateFilters" OnFilter=@_endDateOnFilter
                      TData="Instant?">
        @(Loc[context.endDate] ?? Loc["Ongoing"])
    </AntDesign.Column>
    <AntDesign.Column DataIndex="BorrowPerson.Name" Title="@Loc["Name"]" 
                      Filterable TData="string"/> 
    <AntDesign.Column DataIndex="BorrowPerson.Surname" Title="@Loc["Surname"]" 
                      Filterable TData="string"/> 
    <AntDesign.Column DataIndex="BorrowableEntity.Location.Building"
                      Title=@Loc["Building"]
                      Filters="_buildingFilters"
                      Sortable SorterMultiple="1" TData="char?">
        @context.BorrowableEntity.Location?.Building
    </AntDesign.Column>
    <AntDesign.Column DataIndex="BorrowableEntity.Location.Floor"
                      Title=@Loc["Floor"]
                      Filters="_floorFilters"
                      Sortable SorterMultiple="2" TData="int?">
        @context.BorrowableEntity.Location?.Floor
    </AntDesign.Column>
    <AntDesign.Column DataIndex="BorrowableEntity.Location.RoomNum"
                      Title=@Loc["Room"]
                      Filters="_roomFilters"
                      Sortable SorterMultiple="3" TData="int?">
        @context.BorrowableEntity.Location?.RoomNum
    </AntDesign.Column>
    <AntDesign.Column DataIndex="BorrowableEntity.Location.DoorNum" TData="int?"
        Title=@Loc["Door"]>
        @context.BorrowableEntity.Location?.DoorNum
    </AntDesign.Column>
    <ActionColumn>
        <Space>
            <Button Color="Color.Blue3" 
                    OnClick="() => OpenRemoveModal(context)" 
                    Size="@AntSizeLDSType.Small" 
                    Type="@ButtonType.Primary">@(Loc["End Borrow"])</Button>
        </Space>
    </ActionColumn>
</Table>
<BorrowRemoveModal 
    DefaultBorrow="_defaultBorrow" OnSuccess="@(EndBorrow)" 
    @ref="_modal" ShowBorrowableEntity="true" 
    T="T"/>

@code{

    [Parameter]
    public int PageSize { get; set; } = 5;

    bool _loading;
    int _lastPageIndex = 1;
    int _pageIndex = 1;
    int _total;
    Borrow[] _data = Array.Empty<Borrow>();

    private TableFilter<int?>[] _floorFilters = new TableFilter<int?>[0];
    private TableFilter<char?>[] _buildingFilters = new TableFilter<char?>[0];
    private TableFilter<int?>[] _roomFilters = new TableFilter<int?>[0];

    Expression<Func<Instant?, Instant?, bool>> _endDateOnFilter = (value, name) =>
        value == null ?
            name == null : name != null;

    private TableFilter<Instant?>[] _endDateFilters = new TableFilter<Instant?>[0];


    private Borrow? _defaultBorrow;
    private BorrowRemoveModal<T> _modal = new();

    protected override Task OnInitializedAsync() {
        _buildingFilters = LocationService.GetBuildingOptions().Select(
            x => new TableFilter<char?> {Text = x.ToString(), Value = x}).ToArray();

        _roomFilters = LocationService.GetRoomOptions().Select(
            x => new TableFilter<int?> {Text = x.ToString(), Value = x}).ToArray();

        _floorFilters = LocationService.GetFloorOptions().Select(
            x => new TableFilter<int?> {Text = x.ToString(), Value = x}).ToArray();
        _endDateFilters = new[] {
            
            new TableFilter<Instant?>(){Text = Loc["Ongoing"], Value = null, Selected = true},
            new TableFilter<Instant?>() {Text = Loc["Ended"], Value = Instant.MaxValue, Selected = false}
        };
        return base.OnInitializedAsync();
    }

    async Task HandleTableChange(QueryModel<Borrow> queryModel) {
        _loading = true;
    // Filter
        if (_lastPageIndex == queryModel.PageIndex) {
            queryModel = new QueryModel<Borrow>(1, PageSize, queryModel.SortModel, queryModel.FilterModel);
            _total = await BorrowService.CountBorrowsByBEAsync<T>(queryModel);
        }
        _data = await BorrowService.GetBorrowsByBEAsync<T>(queryModel);
        _pageIndex = queryModel.PageIndex;
        _lastPageIndex = queryModel.PageIndex;
        _loading = false;
    }

    void OpenRemoveModal(Borrow b) {
        _defaultBorrow = b;
        _modal.OpenModal();
    }

    Task EndBorrow(Borrow borrow) {
        _data = _data.Where(x => x.BorrowID != borrow.BorrowID).ToArray();
        return Task.CompletedTask;
    }

}