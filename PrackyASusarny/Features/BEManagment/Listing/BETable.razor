@inject ILocationService LocationService
@inject ICrudService<T> CrudService
@inject ILocalizationService Loc
@using PrackyASusarny.Features.BEManagment.Modals
@using AntDesign.TableModels
@typeparam T where T : BorrowableEntity

<Table TItem="T" Responsive DataSource="_data" @bind-PageIndex="_pageIndex" 
       PageSize="_pageSize" Total="_total" 
       Loading="_loading" OnChange="@HandleTableChange" 
       RemoteDataSource>
       
    <AntDesign.Column TData="Status" @bind-Field="@context.Status" 
                      Title=@Loc["Status"] 
                      Filters="_statusFilter" 
                      Sortable SorterMultiple="1"
    />
    
    @if (typeof(T) == typeof(WashingMachine)) {
        <AntDesign.Column TData="string" 
                          Title=@Loc["Washing Machine Type"]
                          DataIndex="Manufacturer"/>
        <AntDesign.Column TData="Manual"
                          Title=@Loc["Manual"]
                          DataIndex="Manual">
            @{
                var manual = (context as WashingMachine)?.Manual;
            }
            @if (manual != null) {
                <a href="@manual.FileName">@manual.Name</a>
            } else {
                @Loc["None"]
            }
        </AntDesign.Column>
    }
    <AntDesign.Column TData="char?"
                      Title=@Loc["Building"]
                      Filters="_buildingFilters"
                      SorterMultiple="2"
                      Sortable
                      DataIndex="Location.Building">
        @context.Location?.Building
    </AntDesign.Column>
    <AntDesign.Column TData="int?"
                      Title=@Loc["Floor"]
                      Filters="_floorFilters"
                      Sortable SorterMultiple="3"
                      DataIndex="Location.Floor">
        @context.Location?.Floor
    </AntDesign.Column>
    <AntDesign.Column TData="int?"
                      Title=@Loc["Room"]
                      Filters="_roomFilters"
                      Sortable
                      SorterMultiple="4"
                      DataIndex="Location.RoomNum">
        @context.Location?.RoomNum
    </AntDesign.Column>
    <AntDesign.Column 
        Title=@Loc["Door"]
        TData="int?" DataIndex="Location.DoorNum">
        @context.Location?.DoorNum
    </AntDesign.Column>
    <AuthorizeView Policy="@Policies.BorrowManagement">
        <ChildContent Context="_">
            <ActionColumn Title=@Loc["Actions"]>
                <Space Size=@("middle")>
                    @if (context.Status == Status.Free) {
                        <SpaceItem>
                            <Button Type="@ButtonType.Primary"
                                    Color="Color.Blue3" Size="small"
                                    OnClick="@(() => OpenCreateModal(context))">
                                @Loc["Borrow"]
                            </Button>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Type="@ButtonType.Primary"
                                    Color="Color.Red3"
                                    Size=@AntSizeLDSType.Small
                                    OnClick="@(() => OpenStatusModal(context, Status.Broken))">
                                @Loc["Broken"]
                            </Button>
                        </SpaceItem>
                    }
                    else if (context.Status == Status.Broken) {
                        <SpaceItem>
                            <Button
                                Type="@ButtonType.Primary"
                                Color="Color.Green3"
                                Size=@AntSizeLDSType.Small
                                OnClick="@(() => OpenStatusModal(context, Status.Free))">
                                @Loc["Repair"]
                            </Button>
                        </SpaceItem>
                    }
                </Space>
            </ActionColumn>
        </ChildContent>
    </AuthorizeView>
</Table>
<BorrowFormModal @ref="_modalBorrow" T="T" DefaultBe="@_defaultBe" ShowWashingMachine="true" OnFinish="OnBorrowCreated"/>
<StatusChangeModal @ref="_modalStatus" T="T" DefaultBe="@_defaultBe" Status="_repairStatus" OnFinish="wm => wm.Status = _repairStatus"/>

@code{
    bool _loading;
    int _lastPageIndex = 1;
    int _pageIndex = 1;
    readonly int _pageSize = 5;
    int _total;
    T[] _data = Array.Empty<T>();

    private TableFilter<int?>[] _floorFilters = new TableFilter<int?>[0];
    private TableFilter<char?>[] _buildingFilters = new TableFilter<char?>[0];
    private TableFilter<int?>[] _roomFilters = new TableFilter<int?>[0];


    private readonly TableFilter<Status>[] _statusFilter = Enum.GetNames<Status>().Select(
        e => {
            var en = Enum.Parse<Status>(e);
            return new TableFilter<Status> {Text = e, Value = en, Selected = en == Status.Free};
        }).ToArray();


    private T? _defaultBe;
    private StatusChangeModal<T> _modalStatus = new();
    private BorrowFormModal<T> _modalBorrow = new();
    private Status _repairStatus = Status.Broken;

    protected override Task OnInitializedAsync() {
        _buildingFilters = LocationService.GetBuildingOptions().Select(
            x => new TableFilter<char?> {Text = x.ToString(), Value = x}).ToArray();

        _roomFilters = LocationService.GetRoomOptions().Select(
            x => new TableFilter<int?> {Text = x.ToString(), Value = x}).ToArray();

        _floorFilters = LocationService.GetFloorOptions().Select(
            x => new TableFilter<int?> {Text = x.ToString(), Value = x}).ToArray();

        return base.OnInitializedAsync();
    }

    private void OpenCreateModal(T be) {
        _defaultBe = be;
        _modalBorrow.OpenModal();
    }

    private void OpenStatusModal(T be, Status s) {
        _defaultBe = be;
        _repairStatus = s;
        _modalStatus.OpenModal();
    }

    async Task HandleTableChange(QueryModel<T> queryModel) {
        _loading = true;
        if (_lastPageIndex == queryModel.PageIndex) {
            queryModel = new QueryModel<T>(1, _pageSize, queryModel.SortModel, queryModel.FilterModel);
            _total = await CrudService.GetCountAsync(queryModel);
        }
        _data = (await CrudService.GetAllAsync(queryModel, true)).ToArray();
        _pageIndex = queryModel.PageIndex;
        _lastPageIndex = queryModel.PageIndex;
        _loading = false;
    }

    void OnBorrowCreated(Borrow borrow) {
        borrow.BorrowableEntity.Status = Status.Taken;
    }

}