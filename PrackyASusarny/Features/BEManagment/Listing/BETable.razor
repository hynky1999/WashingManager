@page "/WashingMachine"
@using AntDesign.TableModels
@inject ICrudService<WashingMachine> WashingMachineService
<Table TItem="WashingMachine" DataSource="_data" @bind-PageIndex="_pageIndex" @bind-PageSize="_pageSize" Total="_total" Loading="_loading" OnChange=@HandleTableChange RemoteDataSource>
    <PropertyColumn Property="c => c.Status">@context.Status</PropertyColumn>
    <PropertyColumn Filters="_man" Property="c => c.Manufacturer">@context.Manufacturer</PropertyColumn>
    <PropertyColumn Property="c => c.Manual">@context?.Manual</PropertyColumn>
    <AntDesign.Column TData="int?" Filterable DataIndex="Location.Building">@context?.Location?.Building</AntDesign.Column>
    <AntDesign.Column TData="int?" Filters=_floorFilters DataIndex="Location.Floor">@context?.Location?.Floor</AntDesign.Column>
</Table>

@code{
    bool _loading = false;
    int _pageIndex = 1;
    int _pageSize = 5;
    int _total;
    WashingMachine[] _data = Array.Empty<WashingMachine>();

    protected async override Task OnInitializedAsync() {
        _data = (await WashingMachineService.GetAllAsync(eager: true)).ToArray();
    }

    private TableFilter<int?>[] _floorFilters = Enumerable.Range(0, 21).Select(
        x => new TableFilter<int?>(x.ToString(), x, false, TableFilterCompareOperator.Equals, TableFilterCondition.Or)).ToArray();

    private TableFilter<string>[] _man = Enumerable.Range(0, 21).Select(
        x => new TableFilter<string>() {Text = x.ToString(), Value = x.ToString()}).ToArray();

    async Task HandleTableChange(QueryModel<WashingMachine> queryModel) {
        _loading = true;

        _loading = false;

        _total = 200; // 200 is mock data, you should read it from server,e.g. _total = data.TotalCount;
        var x = ParseQueryModel(queryModel);
    }

    string ParseQueryModel(QueryModel<WashingMachine> queryModel) {
    /*
        List<string> query = new List<string>()
        {
            $"results={queryModel.PageSize}",
            $"page={queryModel.PageIndex}",
        };

        queryModel.SortModel.ForEach(x =>
        {
            query.Add($"sortField={x.FieldName.ToLower()}");
            query.Add($"sortOrder={x.Sort}");
        });
        var filters = new List<Expression<Func<WashingMachine, int, bool>>>();

        queryModel.FilterModel.ForEach(filter =>
        {
            Expression left;
            var wm = Expression.Parameter(typeof(WashingMachine));
            filter.SelectedValues.ForEach(value => {
                var right = Expression.Property(wm,filter.FieldName);
                var rightComp = Expression.Equal(value,right);


                Expression.Or()
                query.Add($"{filter.FieldName.ToLower()}={value}");
            });
        });

        return string.Join('&', query);
        */
        return "xd";
    }

}