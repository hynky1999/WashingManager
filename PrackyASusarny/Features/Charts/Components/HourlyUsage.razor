@typeparam T where T : BorrowableEntity
@inherits GenericEntityBase<T>
@inject IUsageChartingService<T> Charts
@inject ILocalizationService LocalizationService
@if (_statData.Length == 0) {
    <Empty Description=@("No Data Found")/>
} else {
    <AntDesign.Charts.Column @ref="_chart" Data="@_statData" Config="@_config"/>
}
<Space>
    <SpaceItem>
        <Select TItem="IsoDayWeekSelect" TItemValue="IsoDayOfWeek" @bind-Value="Day" DataSource="_availableDays" LabelName="@nameof(IsoDayWeekSelect.Name)" ValueName="@nameof(IsoDayWeekSelect.Value)"></Select>
    </SpaceItem>
    <SpaceItem>
        <Button OnClick="() => InitializeData(Day)">Chart</Button>
    </SpaceItem>
</Space>

@code {

    struct IsoDayWeekSelect {
        public string Name { get; set; }
        public IsoDayOfWeek Value { get; set; }
    }

        private const string Usage = "Hourly Usage";

    [Parameter]
    public IsoDayOfWeek Day { get; set; }

    private object[] _statData = {};
    private ColumnConfig _config = new();
    private Column? _chart;

    private readonly IsoDayWeekSelect[] _availableDays = Enum.GetNames<IsoDayOfWeek>().Where(name => Enum.Parse<IsoDayOfWeek>(name) != IsoDayOfWeek.None).Select(
        val => new IsoDayWeekSelect {Name = val, Value = Enum.Parse<IsoDayOfWeek>(val)}
        ).ToArray();

    protected override void OnInitialized() {
        _config = ChartsUtils.CreateColumnConfig(Usage, "", "Hour", "Usage");
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync() {
        await InitializeData(Day);
        await base.OnParametersSetAsync();
    }

    private async Task InitializeData(IsoDayOfWeek day) {
        _statData = (await Charts.GetHourlyUsageAsync(day)).Select(usage => new {x = usage.hour.ToString(), y = Math.Round(usage.value, LocalizationService.DecimalPlaces)}).ToArray();
        if (_chart != null) {
    // Idk doesn't react to statHasCHanged
            var description = $"{Usage} - {Day} for {EntityName}";
            _config.Description.Text = description;
            await _chart.UpdateChart(csData: _statData, csConfig: _config);
        }
    }

}