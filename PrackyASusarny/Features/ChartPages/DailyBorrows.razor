@typeparam T where T : BorrowableEntity
@inherits GenericEntityBase<T>
@inject IUsageChartingService<T> Charts
@inject ILocalizationService LocalizationService
@if (_statData.Length == 0) {
    <Empty Description=@("No Data Found")/>
} else {
    <AntDesign.Charts.Column @ref=_chart Data="_statData" Config="_config"/>
}
<LocalDateRangePicker @bind-Value="_dateRange"/>
<Button OnClick="() => InitializeData(_dateRange)">Chart</Button>

@code {

    [Parameter]
    public LocalDate SinceDate { get; set; }

    [Parameter]
    public LocalDate ToDate { get; set; }

        private const string Usage = "Daily borrows";

    private object[] _statData = {};
    private ColumnConfig _config = new();
    private (LocalDate?, LocalDate?)? _dateRange;
    private Column? _chart;

    protected override void OnInitialized() {
        _config = ChartsUtils.CreateColumnConfig(Usage, "", "Date", "Borrows");
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync() {
        _dateRange = (SinceDate, ToDate);
        var description = ChartsUtils.GetChartDescription(Usage, EntityName, (SinceDate, ToDate), LocalizationService);
        _config.Description.Text = description;
        await InitializeData(_dateRange);
        await base.OnParametersSetAsync();
    }

    private async Task InitializeData((LocalDate? start, LocalDate? end)? val) {
        if (val is not null && val.Value.start is not null && val.Value.end is not null) {
            var start = val.Value.start.Value;
            var end = val.Value.end.Value;
            _statData = (await Charts.GetBorrowsByDayAsync(start, end)).Select(usage => new {x = usage.time.ToString(), y = usage.value}).ToArray();
            if (_chart != null) {
    // Idk doesn't react to statHasCHanged
                await _chart.UpdateChart(csData: _statData);
            }
        }
    }

}