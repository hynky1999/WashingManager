@using PrackyASusarny.Utils
@using PrackyASusarny.Data.Constants
@using PrackyASusarny.Auth.Utils
@inject IUserService UserService
@inject ILocalizationService Loc
@inject IMessageService MessageService

<ModalForm MessageSuccess="@Loc[_messageSuccess]"
           Model="@moneyToAdd"
           OnSubmit="OnSubmit"
           OnFinish="OnAddMoney"
           @ref="_modal"
           Title=@Loc["Add Money"] TMod="Money" TResult="Money">
    <FormContent>
        <FormItem Label=@Loc["Amount"]>
            <Input @bind-Value="moneyToAdd.Amount" id="Amount"/>
        </FormItem>
        <FormItem Label=@Loc["Currency"]>
            <EnumSelect TEnum="@Currency" @bind-Value="moneyToAdd.Currency" id="Currency"/>
        </FormItem>
    </FormContent>
</ModalForm>
<Button HtmlType="submit" Type="@ButtonType.Primary" OnClick="@_modal.OpenModal">
    @Loc["Add money"]
</Button>


@code {

    [CascadingParameter]
    public Task<AuthenticationState>? authTask { get; set; }

    [Parameter]
    public EventCallback<Money> OnAddMoney { get; set; }

    private Money moneyToAdd = new() {
        Amount = 0,
        Currency = Currency.CZK
    };

    private string _messageSuccess = "Added money";
    private ModalForm<Money, Money> _modal = new();

    private async Task<Money?> OnSubmit(Money toAdd) {
        if (authTask == null) {
            MessageService.Error(Loc["User not logged in"]).FireAndForget();
            return toAdd;
        }
        var authState = await authTask;
        var user = authState.User;
        var id = Claims.GetUserId(user);
        return await MessageService.GenericOnDBError(Loc, async () => await UserService.ModifyUserCashAsync(id, moneyToAdd));
    }

}
