@inject IServiceProvider ServiceManager
@inject MessageService MessageService
@using PrackyASusarny.Errors.Folder
@typeparam T where T : new() 

@if (_crudService is not null && _model is not null) {
    <GenericForm Loading="@_loading" @bind-Model="@_model" OnFinish="@OnFinish">
    </GenericForm>
} else {
    <Title Level="2">@_err</Title>
}

@code {

    [Parameter]
    public CrudAction Action { get; set; }

    [Parameter]
    public int? Id { get; set; }


    private T _model = new();
    private ICrudService<T>? _crudService;
    private string _err = "";
    private bool _loading = true;

    protected override async Task OnParametersSetAsync() {
        _loading = true;
        if (_crudService is null) {
            _crudService = ServiceManager.GetService<ICrudService<T>>();
        }
        if (_crudService is not null) {
            _loading = true;
            if (Action == CrudAction.Create) {
                _model = new T();
            } else if (Action == CrudAction.Update && Id is not null) {
                var maybeModel = await _crudService.GetByIdAsync(Id.Value, true);
                if (maybeModel is null) {
                    _err = "Model not found";
                } else {
                    _model = maybeModel;
                }
            }
        } else {
            _err = "Model is not able to load itself";
        }
        _loading = false;
        Console.WriteLine(_model);
        await base.OnParametersSetAsync();
    }

    private async Task OnFinish() {
        if (_crudService is null) {
            return;
        }


        _loading = true;
        if (Action == CrudAction.Create) {
            try {
                await _crudService.CreateAsync(_model);
#pragma warning disable CS4014
                MessageService.Success("Successfully created record");
#pragma warning restore CS4014
                _model = new T();
            }
            catch (DbException) {
#pragma warning disable CS4014
                MessageService.Error("Unable to create record");
#pragma warning restore CS4014
            }
        } else if (Action == CrudAction.Update && Id is not null) {
            try {
                await _crudService.UpdateAsync(_model);
#pragma warning disable CS4014
                MessageService.Success("Successfully updated record");
#pragma warning restore CS4014
            }
            catch (DbException) {
#pragma warning disable CS4014
                MessageService.Error("Unable to update record");
#pragma warning restore CS4014
            }
        }
        _loading = false;
    }

}