// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PrackyASusarny.Data;

#nullable disable

namespace PrackyASusarny.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PrackyASusarny.Auth.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<double>("Cash")
                        .HasColumnType("double precision");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PrackyASusarny.Auth.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("PrackyASusarny.Data.Models.Borrow", b =>
                {
                    b.Property<int>("BorrowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BorrowID"));

                    b.Property<int>("BorrowPersonID")
                        .HasColumnType("integer");

                    b.Property<int>("BorrowableEntityID")
                        .HasColumnType("integer");

                    b.Property<int?>("ReservationID")
                        .HasColumnType("integer");

                    b.Property<Instant?>("endDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("startDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("BorrowID");

                    b.HasIndex("BorrowPersonID");

                    b.HasIndex("BorrowableEntityID");

                    b.HasIndex("ReservationID");

                    b.ToTable("Borrows");
                });

            modelBuilder.Entity("PrackyASusarny.Data.Models.BorrowableEntity", b =>
                {
                    b.Property<int>("BorrowableEntityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BorrowableEntityID"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("LocationID")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("BorrowableEntityID");

                    b.HasIndex("LocationID");

                    b.ToTable("BorrowableEntity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BorrowableEntity");
                });

            modelBuilder.Entity("PrackyASusarny.Data.Models.BorrowableEntityUsage<PrackyASusarny.Data.Models.DryingRoom>", b =>
                {
                    b.Property<int>("DayId")
                        .HasColumnType("integer");

                    b.Property<long>("Hour0Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour10Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour11Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour12Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour13Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour14Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour15Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour16Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour17Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour18Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour19Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour1Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour20Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour21Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour22Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour23Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour2Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour3Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour4Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour5Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour6Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour7Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour8Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour9Total")
                        .HasColumnType("bigint");

                    b.HasKey("DayId");

                    b.ToTable("DryingRoomUsage");
                });

            modelBuilder.Entity("PrackyASusarny.Data.Models.BorrowableEntityUsage<PrackyASusarny.Data.Models.WashingMachine>", b =>
                {
                    b.Property<int>("DayId")
                        .HasColumnType("integer");

                    b.Property<long>("Hour0Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour10Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour11Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour12Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour13Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour14Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour15Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour16Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour17Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour18Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour19Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour1Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour20Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour21Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour22Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour23Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour2Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour3Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour4Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour5Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour6Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour7Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour8Total")
                        .HasColumnType("bigint");

                    b.Property<long>("Hour9Total")
                        .HasColumnType("bigint");

                    b.HasKey("DayId");

                    b.ToTable("WashingMachineUsage");
                });

            modelBuilder.Entity("PrackyASusarny.Data.Models.BorrowPerson", b =>
                {
                    b.Property<int>("BorrowPersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BorrowPersonID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BorrowPersonID");

                    b.ToTable("BorrowPeople");
                });

            modelBuilder.Entity("PrackyASusarny.Data.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LocationID"));

                    b.Property<char>("Building")
                        .HasColumnType("character(1)");

                    b.Property<int>("DoorNum")
                        .HasColumnType("integer");

                    b.Property<int>("Floor")
                        .HasColumnType("integer");

                    b.Property<int>("RoomNum")
                        .HasColumnType("integer");

                    b.HasKey("LocationID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("PrackyASusarny.Data.Models.Manual", b =>
                {
                    b.Property<int>("ManualID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ManualID"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ManualID");

                    b.ToTable("Manuals");
                });

            modelBuilder.Entity("PrackyASusarny.Data.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReservationID"));

                    b.Property<int>("BorrowableEntityID")
                        .HasColumnType("integer");

                    b.Property<Instant>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("ReservationID");

                    b.HasIndex("BorrowableEntityID");

                    b.HasIndex("UserID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("PrackyASusarny.Data.Models.DryingRoom", b =>
                {
                    b.HasBaseType("PrackyASusarny.Data.Models.BorrowableEntity");

                    b.HasDiscriminator().HasValue("DryingRoom");
                });

            modelBuilder.Entity("PrackyASusarny.Data.Models.WashingMachine", b =>
                {
                    b.HasBaseType("PrackyASusarny.Data.Models.BorrowableEntity");

                    b.Property<int?>("ManualID")
                        .HasColumnType("integer");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("text");

                    b.HasIndex("ManualID");

                    b.HasDiscriminator().HasValue("WashingMachine");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("PrackyASusarny.Auth.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("PrackyASusarny.Auth.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("PrackyASusarny.Auth.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("PrackyASusarny.Auth.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrackyASusarny.Auth.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("PrackyASusarny.Auth.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrackyASusarny.Data.Models.Borrow", b =>
                {
                    b.HasOne("PrackyASusarny.Data.Models.BorrowPerson", "BorrowPerson")
                        .WithMany()
                        .HasForeignKey("BorrowPersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrackyASusarny.Data.Models.BorrowableEntity", "BorrowableEntity")
                        .WithMany()
                        .HasForeignKey("BorrowableEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrackyASusarny.Data.Models.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationID");

                    b.Navigation("BorrowPerson");

                    b.Navigation("BorrowableEntity");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("PrackyASusarny.Data.Models.BorrowableEntity", b =>
                {
                    b.HasOne("PrackyASusarny.Data.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("PrackyASusarny.Data.Models.Reservation", b =>
                {
                    b.HasOne("PrackyASusarny.Data.Models.BorrowableEntity", "BorrowableEntity")
                        .WithMany()
                        .HasForeignKey("BorrowableEntityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrackyASusarny.Auth.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BorrowableEntity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PrackyASusarny.Data.Models.WashingMachine", b =>
                {
                    b.HasOne("PrackyASusarny.Data.Models.Manual", "Manual")
                        .WithMany()
                        .HasForeignKey("ManualID");

                    b.Navigation("Manual");
                });
#pragma warning restore 612, 618
        }
    }
}
