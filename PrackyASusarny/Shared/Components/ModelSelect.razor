@using System.Linq.Expressions
@typeparam TItem
@inject ICrudService<TItem> CrudService

<Select DefaultValue="Value" LabelName="@_labelName" ValueChanged="ValueChanged" ValueExpression="@ValueExpression" DataSource="@_dataSource" Disabled="@Disabled"></Select>


@code {
    // TODO add required handling
    [Parameter]
    public TItem? Value { get; set; }

    [Parameter]
    public EventCallback<TItem> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<TItem>>? ValueExpression { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    private List<TItem> _dataSource = new();
    private string _labelName = typeof(TItem).IsSubclassOf(typeof(DbModel)) ? "Label" : "";

    protected override async Task OnInitializedAsync() {
        _dataSource = await CrudService.GetAllAsync(eager: true);
    }

}