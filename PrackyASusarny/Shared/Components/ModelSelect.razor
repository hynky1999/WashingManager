@using System.Linq.Expressions
@typeparam TItem
@inject ICrudService<TItem> CrudService

<Select Value="@Value" ValueChanged="@ValueChanged" ValueExpression="@ValueExpression" DataSource="@_dataSource" Disabled="@Disabled"></Select>

@code {
    // TODO add required handling
    [Parameter]
    public TItem? Value { get; set; }

    [Parameter]
    public EventCallback<TItem> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<TItem>>? ValueExpression { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    private List<TItem> _dataSource = new();


    protected override async Task OnParametersSetAsync() {
        _dataSource = await CrudService.GetAllAsync(eager: false);
    }

}