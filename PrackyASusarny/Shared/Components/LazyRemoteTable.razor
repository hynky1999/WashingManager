@inject MessageService MessageService
@inject ILogger<LazyRemoteTable<T>> Logger
@using AntDesign.TableModels
@typeparam T
<Table @bind-PageIndex="_pageIndex"
       Bordered="Bordered"
       Class="@Class"
       DataSource="_data"

       Loading="_loading"
       OnChange="HandleTableChange"
       PageSize=@PageSize
       RemoteDataSource
       Responsive
       Style="@Style"
       TItem="T"
       Total="_total">

    @if (ChildContent != null) {
        @ChildContent(context)
    }

</Table>

@code {

    [Parameter]
    public RenderFragment<T>? ChildContent { get; set; }


    [Parameter, EditorRequired]
    public Func<QueryModel<T>, Task<T[]>>? OnQuery { get; set; }

    [Parameter, EditorRequired]
    public Func<QueryModel<T>, Task<int>>? OnQueryCount { get; set; }

    [Parameter]
    public bool Bordered { get; set; }

    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public string Class { get; set; } = "border border-primary";

    [Parameter]
    public int PageSize { get; set; } = 5;


    int _pageIndex = 1;
    int _lastPageIndex = 1;

    int _total;
    private bool _loading = false;
    private T[] _data = Array.Empty<T>();


    async Task HandleTableChange(QueryModel<T> queryModel) {
        _loading = true;
    // If the page hasn't change -> filter was changed -> need to recalculated total
        if (_lastPageIndex == queryModel.PageIndex) {
    // Reset to first page
            queryModel = new QueryModel<T>(1, PageSize, queryModel.SortModel, queryModel.FilterModel);
            if (OnQueryCount != null) {
                _total = await MessageService.GenericOnDBError(async () => await OnQueryCount(queryModel));
            }
        }

    // Don't update if the function will be called again because of pageChange
    // On page one the update will not be called because the page index is the same after reset
        if (_pageIndex == 1 || _lastPageIndex != queryModel.PageIndex) {
            if (OnQuery != null) {
                _data = await MessageService.GenericOnDBError(async () => _data = await OnQuery(queryModel)) ?? Array.Empty<T>();
            }
        }
        _pageIndex = queryModel.PageIndex;
        _lastPageIndex = queryModel.PageIndex;
        _loading = false;
    }

    public void ChangeLocally(Func<T[], T[]> func) {
        _data = func(_data);
        StateHasChanged();
    }

    protected override void OnInitialized() {
        base.OnInitialized();
    // OnQuery Functions are crucial and the component won't work without them
        if (OnQuery == null) {
            throw new ArgumentNullException(nameof(OnQuery));
        }
        if (OnQueryCount == null) {
            throw new ArgumentNullException(nameof(OnQueryCount));
        }
    }

}