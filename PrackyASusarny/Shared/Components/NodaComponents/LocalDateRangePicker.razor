@using System.Linq.Expressions
<RangePicker Disabled="Disabled" OnChange="_OnChange" OnClearClick="@(() => _OnChange(new DateRangeChangedEventArgs {Dates = new DateTime?[] {null, null}}))" Value="_dateTimeValue"></RangePicker>

@code {
    // Generic class because of nullability
    // FOr some reason I coulnd't get bind-Value play with RangePicker so had to use functions
    private async void _OnChange(DateRangeChangedEventArgs args) {
        if (args.Dates.Length != 2) {
            throw new ArgumentException("Expected 2 dates");
        }
        Value = (NodaUtils.ToLocalDate(args.Dates[0]), NodaUtils.ToLocalDate(args.Dates[1]));
        await ValueChanged.InvokeAsync(Value);
        await OnChange.InvokeAsync(Value);
    }

    protected override void OnParametersSet() {
        if (Value == null) {
            _dateTimeValue = new DateTime?[] {null, null};
        } else {
            _dateTimeValue = new[] {NodaUtils.ToDateTime(Value.Value.Item1), NodaUtils.ToDateTime(Value.Value.Item2)};
        }
    }

    // ReSharper disable once InconsistentNaming

    [Parameter]
    public (LocalDate?, LocalDate?)? Value { get; set; }

    [Parameter]
    public EventCallback<(LocalDate?, LocalDate?)?> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<(LocalDate?, LocalDate?)?>>? ValueExpression { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public EventCallback<(LocalDate?, LocalDate?)?> OnChange { get; set; }

    private DateTime?[] _dateTimeValue = new DateTime?[2];

}