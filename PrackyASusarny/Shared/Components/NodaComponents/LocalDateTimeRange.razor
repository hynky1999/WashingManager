@inject ILocalizationService Loc
@inherits AntDesign.AntInputComponentBase<(LocalDateTime, LocalDateTime)>
<RangePicker
    ShowTime="@_showTime"
    DefaultValue=_defaultValue
    OnClearClick="@(() => _dateTimeValue = _defaultValue)"
    OnChange=@(args => _dateTimeValue = Array.ConvertAll(args.Dates, d => d ?? new DateTime()))


    DefaultPickerValue=_defaultValue
    DisabledTime=_disabledTime
    DisabledDate=_disabledDates
    Disabled="Disabled"/>


@code {
    // For some reason RangePicker doesn't support binding.
    private DateTime[] _dateTimeValue {
        get {
            return new DateTime[] {
                NodaUtils.ToDateTime(CurrentValue.Item1),
                NodaUtils.ToDateTime(CurrentValue.Item2)
            };
        }
        set { CurrentValue = (NodaUtils.ToLocalDateTime(value[0]), NodaUtils.ToLocalDateTime(value[1])); }
    }

    [Parameter]
    public Func<LocalDateTime, DatePickerDisabledTime>? DisabledTime { get; set; }

    [Parameter]
    public Func<LocalDate, bool>? DisabledDates { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public string? TimeFormat { get; set; }

    [Parameter]
    public (LocalDateTime, LocalDateTime)? DefaultValue { get; set; }

    private Func<DateTime, DatePickerDisabledTime>? _disabledTime;
    private Func<DateTime, bool>? _disabledDates;
    private OneOf.OneOf<bool, string> _showTime;
    private DateTime[] _defaultValue = Array.Empty<DateTime>();


    protected override void OnInitialized() {
        if (DisabledTime != null) {
            _disabledTime = time => DisabledTime(NodaUtils.ToLocalDateTime(time));
        }
        if (DisabledDates != null) {
            _disabledDates = time => DisabledDates(NodaUtils.ToLocalDate(time));
        }

        if (TimeFormat != null) {
            _showTime = TimeFormat;
        } else {
            _showTime = true;
        }

        _defaultValue = InitDefaultValue(DefaultValue);
    // Set it here because Range picker won't call onChange at start
        _dateTimeValue = _defaultValue;


        base.OnInitialized();
    }


    private DateTime[] InitDefaultValue((LocalDateTime, LocalDateTime)? defaultValue) {
        if (defaultValue == null) {
            return new[] {
                Loc.NowInTimeZone.LocalDateTime.ToDateTimeUnspecified(),
                Loc.NowInTimeZone.LocalDateTime.ToDateTimeUnspecified()
            };
        }

        return new[] {
            NodaUtils.ToDateTime(defaultValue.Value.Item1),
            NodaUtils.ToDateTime(defaultValue.Value.Item2)
        };
    }

    protected override void OnParametersSet() {
    }


}
