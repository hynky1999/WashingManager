@inject IServiceProvider ServiceProvider
@typeparam TModel

@if (fields != null)
{
    <Form Loading="@Loading" Model="@Model" OnFinish="@OnFinish">
        @foreach (var field in fields)
        {
            @if (FieldTemplate != null)
            {
                @FieldTemplate(field)
            }
            else
            {
                <FormItem Label="@field.DisplayName">
                    @field.FieldFragment
                    <Paragraph>@field.Description</Paragraph>
                </FormItem>
            }
        }
        <Button Type="@ButtonType.Primary" HtmlType="submit">Submit</Button>
    </Form>
}

@code{
    private List<GenericInput<TModel>>? fields;

    [Parameter]
    public TModel? Model { get; set; }

    [Parameter]
    public EventCallback<TModel> ModelChanged { get; set; }

    [Parameter]
    public bool Loading { get; set; } = false;

    [Parameter]
    public RenderFragment<GenericInput<TModel>>? FieldTemplate { get; set; }

    [Parameter]
    public EventCallback OnFinish { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (fields != null)
        {
            foreach (var field in fields)
            {
                field.ValueChanged = EventCallback.Factory.Create(this, OnValueChanged);
            }
        }

        if (Model != null)
        {
            fields = GenericInput<TModel>.Create(Model, ServiceProvider);
            foreach (var field in fields)
            {
                field.ValueChanged = EventCallback.Empty;
            }
        }
        else
        {
            fields = null;
        }
    }

    private void OnValueChanged()
    {
        ModelChanged.InvokeAsync(Model);
    }


}
