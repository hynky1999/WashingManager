@typeparam TItem where TItem : class?

@inject ILocalizationService Loc
@inject ICrudService<TItem> CrudService
@inherits AntInputComponentBase<TItem>

<Select
    AllowClear="@AllowClear"
    @bind-Value="@CurrentValue"
    DataSource="@_dataSource"
    Disabled="@Disabled"
    LabelName=@(nameof(SelectItem.Label))
    TItem="SelectItem"
    TItemValue="TItem"
    ValueName=@(nameof(SelectItem.Value))>

</Select>

@code {

    private class SelectItem {
        public TItem Value { get; set; }
        public string Label { get; set; }

        public SelectItem(TItem value, string label) {
            Value = value;
            Label = label;
        }
    }


    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public EventCallback<TItem> OnChange { get; set; }

    [Parameter]
    public TItem[]? DataSource { get; set; }

    [Parameter]
    public bool AllowClear { get; set; } = true;


    private SelectItem[] _dataSource = Array.Empty<SelectItem>();
    private TItem[] _dataSourceValues = Array.Empty<TItem>();
    private bool _isCRUDInitialized = false;

    protected async override Task OnParametersSetAsync() {
    // If the data source is set, use it and don't reload as it reloads select
        if (DataSource != null && _dataSourceValues != DataSource) {
            _dataSourceValues = DataSource;
            _isCRUDInitialized = false;
        } else if (!_isCRUDInitialized) {
            _dataSourceValues = (await CrudService.GetAllAsync(eager: true)).ToArray();
            _isCRUDInitialized = true;
        }
        _dataSource = prepareSource(_dataSourceValues);


        await base.OnParametersSetAsync();
    }


    private SelectItem[] prepareSource(TItem[] data) {
        var source = data.Select(e => {
            string _label = e?.ToString() ?? "";
            if (e is IDBModel model) {
                _label = model.HumanReadableLoc(Loc);
            }

            return new SelectItem(
                e,
                _label
                );
        });
        return source.ToArray();
    }

}