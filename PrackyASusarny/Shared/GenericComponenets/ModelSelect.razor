@using System.Linq.Expressions
@typeparam TItem
@inject ILocalizationService Loc
@inject ICrudService<TItem> CrudService

<Select
    DataSource="@_dataSource"
    DefaultValue="Value"
    Disabled="@Disabled"
    LabelName=@(nameof(SelectItem.Label))
    OnSelectedItemChanged=@((x) => OnChange.InvokeAsync(x.Value))
    TItem="SelectItem"
    TItemValue="TItem"
    ValueChanged="ValueChanged"
    ValueExpression="@ValueExpression"
    ValueName=@(nameof(SelectItem.Value))>

</Select>

@code {

    private class SelectItem {
        public TItem Value { get; set; } = default(TItem)!;
        public string Label { get; set; } = string.Empty;
    }


    [Parameter]
    public TItem? Value { get; set; }

    [Parameter]
    public EventCallback<TItem> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<TItem>>? ValueExpression { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public EventCallback<TItem> OnChange { get; set; }

    private SelectItem[] _dataSource = Array.Empty<SelectItem>();

    protected override async Task OnInitializedAsync() {
        var _ds = await CrudService.GetAllAsync(eager: true);
        _dataSource = _ds.Select(e => {
            string _label = e.ToString() ?? "";
            if (e is IDBModel model) {
                _label = model.HumanReadableLoc(Loc);
            }

            return new SelectItem {
                Value = e,
                Label = _label
            };
        }).ToArray();
        await base.OnInitializedAsync();
    }

}