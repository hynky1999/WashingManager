@using System.Reflection
@using PrackyASusarny.Utils
@using PrackyASusarny.Data.Utils
@using PrackyASusarny.Errors.Folder
@typeparam T where T : class
@inject NavigationManager NavManager
@inject MessageService MessageService
@inject ICrudService<T> CrudService

@if (_models.Count > 0) {
    <Table TItem="T" DataSource="@_models" Responsive>
        @foreach (var property in typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.FlattenHierarchy)) {
            @ProperityColumn(context, property)
        }
        <ActionColumn>
            <Space>
                <SpaceItem>
                    <Button Type="@ButtonType.Primary" Size="@AntSizeLDSType.Small" Color="Color.Red3" OnClick="() => Delete(context)">Delete</Button>
                </SpaceItem>
                <SpaceItem>
                    <Button Type="@ButtonType.Primary" Size="@AntSizeLDSType.Small" Color="Color.Green3" OnClick="() => Update(context)">Update</Button>
                </SpaceItem>
            </Space>
        </ActionColumn>
    </Table>
} else {
    <Empty/>
}

@code {
    private List<T> _models = new();

    private readonly Type[] _supportedFilters = {
        typeof(int), typeof(uint), typeof(long), typeof(string), typeof(Enum), typeof(DateTime), typeof(Guid), typeof(bool)
    };

    private RenderFragment ProperityColumn(T context, PropertyInfo propertyInfo) {
        return builder => {
            var visibilityAttr = propertyInfo.GetCustomAttribute<UIVisibility>();
    // Must be writable to pass as fieldChanged
            if (visibilityAttr?.Visibility == UIVisibilityEnum.Hidden || !propertyInfo.CanWrite) {
                return;
            }
            builder.OpenComponent(0, typeof(Column<>).MakeGenericType(propertyInfo.PropertyType));
            var val = propertyInfo.GetValue(context);
            builder.AddAttribute(1, "Field", val);
            builder.AddAttribute(2, "FieldChanged", context.GetSetPropertyEventCallback(this, propertyInfo));
            builder.AddAttribute(3, "FieldExpression", context.GetPropertyExpression(propertyInfo));
            var content = (val as DbModel)?.Label ?? val?.ToString() ?? "";
            builder.AddAttribute(4, "ChildContent", (RenderFragment) (builder2 => { builder2.AddContent(0, content); }));

            if (propertyInfo.PropertyType.GetInterface("IComparable") != null) {
                builder.AddAttribute(5, "Sortable", true);
            }
            if (_supportedFilters.Contains(propertyInfo.PropertyType)) {
                builder.AddAttribute(6, "Filterable", true);
            }
            builder.AddContent(7, content);
            builder.CloseComponent();
        };
    }

    protected override async Task OnParametersSetAsync() {
        _models = await CrudService.GetAllAsync(eager: true);
        await base.OnParametersSetAsync();
    }

    private void Update(T model) {
        try {
            var id = CrudService.GetId(model);
            var baseResourceApi = string.Join('/', NavManager.Uri.Split("/")[..^1]);
            NavManager.NavigateTo($"{baseResourceApi}/Update/{id}");
        }
        catch (DbException) {
            MessageService.Error("Cannot update the model");
        }
    }

    private async void Delete(T model) {
        try {
            await CrudService.DeleteAsync(model);
            _models.Remove(model);
            StateHasChanged();
#pragma warning disable CS4014
            MessageService.Success($"Successfully deleted item {model}");
#pragma warning restore CS4014
        }
        catch (DbException) {
#pragma warning disable CS4014
            MessageService.Error("Failed to delete model");
#pragma warning restore CS4014
        }
    }

}