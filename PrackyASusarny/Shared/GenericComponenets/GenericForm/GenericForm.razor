@namespace PrackyASusarny.Shared.GenericComponenets.GenericForm
@inject IServiceProvider ServiceProvider
@inject ILocalizationService Loc
@implements IDisposable

@typeparam TMod
@if (_fields != null) {
    <Form Loading="@Loading" Model="@Model" OnFinish="@OnFinish">
        @foreach (var field in _fields) {
            @if (FieldTemplate != null) {
                @FieldTemplate(field)
            } else {
                <FormItem Label=@(Localize ? Loc[field.DisplayName] : field.DisplayName)>
                    @field.FieldFragment
                    <Paragraph>@field.Description</Paragraph>
                </FormItem>
            }
        }
        <Button HtmlType="submit" Type="@ButtonType.Primary">@Loc["Submit"]</Button>
    </Form>
}

@code{
    private List<GenericInput<TMod>>? _fields;

    [Parameter]
    public TMod? Model { get; set; }

    [Parameter]
    public bool Loading { get; set; }

    [Parameter]
    public bool Localize { get; set; }

    [Parameter]
    public RenderFragment<GenericInput<TMod>>? FieldTemplate { get; set; }

    [Parameter]
    public EventCallback OnFinish { get; set; }

    [Parameter]
    public EventCallback<TMod> ModelChanged { get; set; }

    protected override void OnParametersSet() {
        base.OnParametersSet();
        if (_fields != null) {
            foreach (var field in _fields) {
                field.ValueChanged -= OnValueChanged;
            }
        }

        if (Model != null) {
            _fields = GenericInput<TMod>.Create(Model, ServiceProvider);
            foreach (var field in _fields) {
                field.ValueChanged += OnValueChanged;
            }
        } else {
            _fields = null;
        }
    }

    private void OnValueChanged(object? sender, EventArgs e) {
        ModelChanged.InvokeAsync(Model);
    }

    public void Dispose() {
        if (_fields != null) {
            foreach (var field in _fields) {
                field.ValueChanged -= OnValueChanged;
            }
        }
    }

}