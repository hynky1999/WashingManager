@using PrackyASusarny.Data.EFCoreServices
@using PrackyASusarny.Errors.Folder
@inject BorrowService BorrowService
@inject ILogger<BorrowFormModal> Logger


<ModalForm TMod="@BorrowPerson" TResult="@Borrow" Model="@_tmpBorrowPerson" OnSubmit="@SubmitForm" OnSuccess="@OnSuccess">
    <h2>Vytvoř výpůjčku</h2>
    @if (ShowWashingMachine) {
        <WmDescription WashingMachine="@WashingMachine"/>
    }
    <FormItem Label="Name">
        <Input @bind-Value="_tmpBorrowPerson.Name" id="Name"/>
    </FormItem>
    <FormItem Label="Surname">
        <Input @bind-Value="_tmpBorrowPerson.Surname" id="Surname"/>
    </FormItem>
    <Button Type="@ButtonType.Primary" HtmlType="submit">Submit</Button>
</ModalForm>


@code {

    [Parameter]
    public WashingMachine? WashingMachine { get; set; }

    [Parameter]
    public EventCallback<Borrow> OnSuccess { get; set; }

    [Parameter]
    public bool ShowWashingMachine { get; set; } = true;

    private readonly BorrowPerson _tmpBorrowPerson = new();

    private async Task<Borrow?> SubmitForm() {
        if (WashingMachine is null) {
            Logger.LogError("Washing machine is null");
            return null;
        }
        var borrow = new Borrow {
            BorrowPerson = new BorrowPerson {
                Name = _tmpBorrowPerson.Name,
                Surname = _tmpBorrowPerson.Surname
            },
            BorrowableEntity = WashingMachine,
            startDate = DateTime.UtcNow
        };
        try {
            await BorrowService.AddBorrow(borrow);
            return borrow;
        }
        catch (Exception ex) when (ex is ArgumentException || ex is DbException) {
            Logger.LogError(ex.Message);
            return null;
        }
    }

}